var e=Math.pow,t=(e,t,n)=>new Promise(((s,r)=>{var a=e=>{try{o(n.next(e))}catch(t){r(t)}},i=e=>{try{o(n.throw(e))}catch(t){r(t)}},o=e=>e.done?s(e.value):Promise.resolve(e.value).then(a,i);o((n=n.apply(e,t)).next())}));import{w as n}from"./index.b56e58f4.js";function s(e,t){return t.forEach((function(t){t&&"string"!=typeof t&&!Array.isArray(t)&&Object.keys(t).forEach((function(n){if("default"!==n&&!(n in e)){var s=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,s.get?s:{enumerable:!0,get:function(){return t[n]}})}}))})),Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return i("refCount")}incRef(e){return i("incRef")}timerAvailable(){return!0}time(e){return i("time")}read(e){return i("read")}readSync(e){return i("readSync")}readToGPU(e,t){return i("readToGPU")}numDataIds(){return i("numDataIds")}disposeData(e,t){return i("disposeData")}write(e,t,n){return i("write")}move(e,t,n,s,r){return i("move")}memory(){return i("memory")}floatPrecision(){return i("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return i("dispose")}}function i(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function o(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,c(e,t,n)}function l(e,t,n){return Math.max(e,Math.min(t,n))}function u(e){return e%2==0?e:e+1}function c(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function h(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function p(e,t,n=""){h(g(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function d(e){h(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||$(e)&&!n)for(let s=0;s<e.length;++s)f(e[s],t,n);else t.push(e);return t}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function y(e){return e%1==0}function b(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function x(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function k(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function v(e,t){let n=1,s=-1;for(let a=0;a<e.length;++a)if(e[a]>=0)n*=e[a];else if(-1===e[a]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${a}`);s=a}else if(e[a]<0)throw Error(`Shapes can not be < 0. Found ${e[a]} at dim ${a}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function w(e,t){const n=t.length;return h((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),h(e.every((e=>y(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function I(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:w(t,e).sort();let i=0;for(let o=0;o<e.length;++o){if(null!=a){if(a[i]===o&&1!==e[o])throw new Error(`Can't squeeze axis ${o} since its dim '${e[o]}' is not 1`);(null==a[i]||a[i]>o)&&1===e[o]&&(n.push(e[o]),s.push(o)),a[i]<=o&&i++}1!==e[o]&&(n.push(e[o]),s.push(o))}return{newShape:n,keptDims:s}}function N(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function S(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function T(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function $(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function C(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function E(e){return"string"==typeof e||e instanceof String}function A(e){return"number"==typeof e}function R(e){return Array.isArray(e)?R(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":A(e)?"float32":E(e)?"string":"boolean"==typeof e?"bool":"float32"}function _(e){return!!(e&&e.constructor&&e.call&&e.apply)}function F(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function D(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function O(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=O(e+t*o,i,n,s)}return r}function M(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return O(0,e,t,n)}function L(e,t){const n=z(e,t);for(let s=0;s<n.length;s++)n[s]=1;return n}function z(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function P(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return M(e,new Float32Array(n));if("int32"===t)return M(e,new Int32Array(n));if("bool"===t)return M(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function B(e){e.forEach((t=>{h(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function W(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let r=0;r<e.length-1;++r)s+=n[r]*e[r];return s}function V(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(e/n[r]),e-=s[r]*n[r];return s[s.length-1]=e,s}function U(e){return e&&e.then&&"function"==typeof e.then}class G{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=H,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(j().getBool("IS_TEST")||j().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];j().getBool("IS_TEST")||j().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}getAsync(e){return t(this,null,(function*(){return e in this.flags||(this.flags[e]=yield this.evaluateFlag(e)),this.flags[e]}))}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(U(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function H(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function j(){return K}let q,K=null;function X(){if(null==q){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}q=e}return q}function Y(e,t){const n=function(){const e=X();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}function Z(...e){j().getBool("IS_TEST")||j().getBool("PROD")||console.warn(...e)}const J=Y("kernelRegistry",(()=>new Map)),Q=Y("gradRegistry",(()=>new Map));function ee(e,t){const n=ae(e,t);return J.get(n)}function te(e){return Q.get(e)}function ne(e){const t=J.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function se(e){const{kernelName:t,backendName:n}=e,s=ae(t,n);J.has(s)&&Z(`The kernel '${t}' for backend '${n}' is already registered`),J.set(s,e)}function re(e){const{kernelName:t}=e;Q.has(t)&&j().getBool("DEBUG")&&Z(`Overriding the gradient for '${t}'`),Q.set(t,e)}function ae(e,t){return`${t}_${e}`}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var ie=le,oe=null;try{oe=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(cR){}function le(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function ue(e){return!0===(e&&e.__isLong__)}le.prototype.__isLong__,Object.defineProperty(le.prototype,"__isLong__",{value:!0}),le.isLong=ue;var ce={},he={};function pe(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=he[e])?s:(n=fe(e,(0|e)<0?-1:0,!0),r&&(he[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=ce[e])?s:(n=fe(e,e<0?-1:0,!1),r&&(ce[e]=n),n)}function de(e,t){if(isNaN(e))return t?Ie:we;if(t){if(e<0)return Ie;if(e>=xe)return Ce}else{if(e<=-ke)return Ee;if(e+1>=ke)return $e}return e<0?de(-e,t).neg():fe(e%be|0,e/be|0,t)}function fe(e,t,n){return new le(e,t,n)}le.fromInt=pe,le.fromNumber=de,le.fromBits=fe;var me=Math.pow;function ge(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return we;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return ge(e.substring(1),t,n).neg();for(var r=de(me(n,8)),a=we,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=de(me(n,o));a=a.mul(u).add(de(l))}else a=(a=a.mul(r)).add(de(l))}return a.unsigned=t,a}function ye(e,t){return"number"==typeof e?de(e,t):"string"==typeof e?ge(e,t):fe(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}le.fromString=ge,le.fromValue=ye;var be=4294967296,xe=be*be,ke=xe/2,ve=pe(1<<24),we=pe(0);le.ZERO=we;var Ie=pe(0,!0);le.UZERO=Ie;var Ne=pe(1);le.ONE=Ne;var Se=pe(1,!0);le.UONE=Se;var Te=pe(-1);le.NEG_ONE=Te;var $e=fe(-1,2147483647,!1);le.MAX_VALUE=$e;var Ce=fe(-1,-1,!0);le.MAX_UNSIGNED_VALUE=Ce;var Ee=fe(0,-2147483648,!1);le.MIN_VALUE=Ee;var Ae=le.prototype;Ae.toInt=function(){return this.unsigned?this.low>>>0:this.low},Ae.toNumber=function(){return this.unsigned?(this.high>>>0)*be+(this.low>>>0):this.high*be+(this.low>>>0)},Ae.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Ee)){var t=de(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=de(me(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},Ae.getHighBits=function(){return this.high},Ae.getHighBitsUnsigned=function(){return this.high>>>0},Ae.getLowBits=function(){return this.low},Ae.getLowBitsUnsigned=function(){return this.low>>>0},Ae.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ee)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},Ae.isZero=function(){return 0===this.high&&0===this.low},Ae.eqz=Ae.isZero,Ae.isNegative=function(){return!this.unsigned&&this.high<0},Ae.isPositive=function(){return this.unsigned||this.high>=0},Ae.isOdd=function(){return 1==(1&this.low)},Ae.isEven=function(){return 0==(1&this.low)},Ae.equals=function(e){return ue(e)||(e=ye(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},Ae.eq=Ae.equals,Ae.notEquals=function(e){return!this.eq(e)},Ae.neq=Ae.notEquals,Ae.ne=Ae.notEquals,Ae.lessThan=function(e){return this.comp(e)<0},Ae.lt=Ae.lessThan,Ae.lessThanOrEqual=function(e){return this.comp(e)<=0},Ae.lte=Ae.lessThanOrEqual,Ae.le=Ae.lessThanOrEqual,Ae.greaterThan=function(e){return this.comp(e)>0},Ae.gt=Ae.greaterThan,Ae.greaterThanOrEqual=function(e){return this.comp(e)>=0},Ae.gte=Ae.greaterThanOrEqual,Ae.ge=Ae.greaterThanOrEqual,Ae.compare=function(e){if(ue(e)||(e=ye(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Ae.comp=Ae.compare,Ae.negate=function(){return!this.unsigned&&this.eq(Ee)?Ee:this.not().add(Ne)},Ae.neg=Ae.negate,Ae.add=function(e){ue(e)||(e=ye(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,fe((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},Ae.subtract=function(e){return ue(e)||(e=ye(e)),this.add(e.neg())},Ae.sub=Ae.subtract,Ae.multiply=function(e){if(this.isZero())return we;if(ue(e)||(e=ye(e)),oe)return fe(oe.mul(this.low,this.high,e.low,e.high),oe.get_high(),this.unsigned);if(e.isZero())return we;if(this.eq(Ee))return e.isOdd()?Ee:we;if(e.eq(Ee))return this.isOdd()?Ee:we;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(ve)&&e.lt(ve))return de(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,p=0;return h+=(p+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,fe((h&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},Ae.mul=Ae.multiply,Ae.divide=function(e){if(ue(e)||(e=ye(e)),e.isZero())throw Error("division by zero");var t,n,s;if(oe)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?fe((this.unsigned?oe.div_u:oe.div_s)(this.low,this.high,e.low,e.high),oe.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Ie:we;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Ie;if(e.gt(this.shru(1)))return Se;s=Ie}else{if(this.eq(Ee))return e.eq(Ne)||e.eq(Te)?Ee:e.eq(Ee)?Ne:(t=this.shr(1).div(e).shl(1)).eq(we)?e.isNegative()?Ne:Te:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(Ee))return this.unsigned?Ie:we;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=we}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:me(2,r-48),i=de(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=de(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=Ne),s=s.add(i),n=n.sub(o)}return s},Ae.div=Ae.divide,Ae.modulo=function(e){return ue(e)||(e=ye(e)),oe?fe((this.unsigned?oe.rem_u:oe.rem_s)(this.low,this.high,e.low,e.high),oe.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Ae.mod=Ae.modulo,Ae.rem=Ae.modulo,Ae.not=function(){return fe(~this.low,~this.high,this.unsigned)},Ae.and=function(e){return ue(e)||(e=ye(e)),fe(this.low&e.low,this.high&e.high,this.unsigned)},Ae.or=function(e){return ue(e)||(e=ye(e)),fe(this.low|e.low,this.high|e.high,this.unsigned)},Ae.xor=function(e){return ue(e)||(e=ye(e)),fe(this.low^e.low,this.high^e.high,this.unsigned)},Ae.shiftLeft=function(e){return ue(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fe(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fe(0,this.low<<e-32,this.unsigned)},Ae.shl=Ae.shiftLeft,Ae.shiftRight=function(e){return ue(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fe(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fe(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Ae.shr=Ae.shiftRight,Ae.shiftRightUnsigned=function(e){if(ue(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?fe(this.low>>>e|t<<32-e,t>>>e,this.unsigned):fe(32===e?t:t>>>e-32,0,this.unsigned)},Ae.shru=Ae.shiftRightUnsigned,Ae.shr_u=Ae.shiftRightUnsigned,Ae.toSigned=function(){return this.unsigned?fe(this.low,this.high,!1):this},Ae.toUnsigned=function(){return this.unsigned?this:fe(this.low,this.high,!0)},Ae.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Ae.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Ae.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},le.fromBytes=function(e,t,n){return n?le.fromBytesLE(e,t):le.fromBytesBE(e,t)},le.fromBytesLE=function(e,t){return new le(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},le.fromBytesBE=function(e,t){return new le(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const Re=ie||s({__proto__:null,default:ie},[ie]);function _e(e){return Re.fromString(e,!0,16)}const Fe=_e("c3a5c85c97cb3127"),De=_e("b492b66fbe98f273"),Oe=_e("9ae16a3b2f90404f");function Me(e){return e.xor(e.shru(47))}function Le(e,t,n){const s=e.slice(t,t+n);return Re.fromBytes(Array.from(s),!0,!0)}function ze(e,t){return Le(e,t,8)}function Pe(e,t){return Le(e,t,4)}function Be(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function We(e,t,n=_e("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Ve(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Be(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Be(r,44)),[r.add(s),a.add(i)]}(ze(e,t),ze(e,t+8),ze(e,t+16),ze(e,t+24),n,s)}function Ue(e,t=e.length){const n=Re.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Oe.add(2*t),s=ze(e,0).add(Oe),r=ze(e,t-8);return We(Be(r,37).mul(n).add(s),Be(s,25).add(r).mul(n),n)}if(t>=4){const n=Oe.add(2*t);return We(Pe(e,0).shl(3).add(t),Pe(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Me(Oe.mul(n).xor(Fe.mul(s))).mul(Oe)}return Oe}(e,t):function(e,t=e.length){const n=Oe.add(2*t),s=ze(e,0).mul(De),r=ze(e,8),a=ze(e,t-8).mul(n),i=ze(e,t-16).mul(Oe);return We(Be(s.add(r),43).add(Be(a,30)).add(i),s.add(Be(r.add(Oe),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Oe.add(2*t),s=ze(e,0).mul(Oe),r=ze(e,8),a=ze(e,t-8).mul(n),i=ze(e,t-16).mul(Oe),o=Be(s.add(r),43).add(Be(a,30)).add(i),l=We(o,s.add(Be(r.add(Oe),18)).add(a),n),u=ze(e,16).mul(n),c=ze(e,24),h=o.add(ze(e,t-32)).mul(n),p=l.add(ze(e,t-24)).mul(n);return We(Be(u.add(c),43).add(Be(h,30)).add(p),u.add(Be(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(De).add(113),a=Me(r.mul(Oe).add(113)).mul(Oe),i=[Re.UZERO,Re.UZERO],o=[Re.UZERO,Re.UZERO];s=s.mul(Oe).add(ze(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Be(s.add(r).add(i[0]).add(ze(e,l+8)),37).mul(De),r=Be(r.add(i[1]).add(ze(e,l+48)),42).mul(De),s=s.xor(o[1]),r=r.add(i[0]).add(ze(e,l+40)),a=Be(a.add(o[0]),33).mul(De),i=Ve(e,l,i[1].mul(De),s.add(o[0])),o=Ve(e,l+32,a.add(o[1]),r.add(ze(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=De.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Be(s.add(r).add(i[0]).add(ze(e,l+8)),37).mul(h),r=Be(r.add(i[1]).add(ze(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(ze(e,l+40))),a=Be(a.add(o[0]),33).mul(h),i=Ve(e,l,i[1].mul(h),s.add(o[0])),o=Ve(e,l+32,a.add(o[1]),r.add(ze(e,l+16))),[a,s]=[s,a],We(We(i[0],o[0],h).add(Me(r).mul(Fe)).add(a),We(i[1],o[1],h).add(s),h)}function Ge(e,t){return"string"===t?qe(e):He([e],t)}function He(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=f(e)),j().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function je(){return j().platform.now()}function qe(e,t="utf-8"){return t=t||"utf-8",j().platform.encode(e,t)}function Ke(e,t="utf-8"){return t=t||"utf-8",j().platform.decode(e,t)}class Xe{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ze)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=je();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:je()-i})}if(j().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let o=0;o<s.length;o++){const t=s[o];t.data().then((n=>{Ye(n,t.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Ye(e,t,n){if("float32"!==t)return!1;for(let s=0;s<e.length;s++){const t=e[s];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class Ze{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?x(`${s}ms`,9):s.error,o=x(e,25),l=t.rank,u=t.size,c=x(t.shape.toString(),14);let h="";for(const p in r){const e=r[p];if(null!=e){const n=e.shape||t.shape,s=n.length;h+=`${p}: ${s}D ${s>0?n:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Je(e,t,n,s){const r=D(t),a=function(e,t,n,s){const r=m(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?nt(e):e;if(o>1)for(let u=0;u<r/a;u++){const e=u*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],Qe(l[e+t],0,n).length)}return i}(e,t,n,r),i=t.length,o=tt(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function Qe(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:E(e)?`'${e}'`:"bool"===n?et(e):parseFloat(e.toFixed(7)).toString(),x(s,t)}function et(e){return 0===e?"false":"true"}function tt(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[Qe(nt(e)[0],0,n)]}return"bool"===n?[et(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=nt(s),a=nt(a)),["["+s.map(((e,t)=>Qe(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Qe(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?nt(e):Array.from(e)).map(((e,t)=>Qe(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...tt(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...tt(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let m=0;m<o;m++){const t=m*h,s=t+h;p.push(...tt(e.slice(t,s),u,n,c,r,m===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let m=1;m<p.length-1;m++)p[m]=" "+p[m]+d;let f=",\n";for(let m=2;m<l;m++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function nt(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class st{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=m(e),null!=n){const e=n.length;h(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||S(t,this.size),this.strides=D(e)}set(e,...t){0===t.length&&(t=[0]),h(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const s of e){if(s<0||s>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let s=0;s<e.length-1;++s)n+=this.strides[s]*e[s];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return rt().makeTensor(this.values,this.shape,this.dtype)}}let rt=null,at=null;class it{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=m(e),this.strides=D(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){return t(this,null,(function*(){const e=yield this.data();return at.buffer(this.shape,this.dtype,e)}))}bufferSync(){return at.buffer(this.shape,this.dtype,this.dataSync())}array(){return t(this,null,(function*(){const e=yield this.data();return M(this.shape,e,"complex64"===this.dtype)}))}arraySync(){return M(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){return t(this,null,(function*(){this.throwIfDisposed();const e=rt().read(this.dataId);if("string"===this.dtype){const n=yield e;try{return n.map((e=>Ke(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}))}dataToGPU(e){return this.throwIfDisposed(),rt().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=rt().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Ke(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}bytes(){return t(this,null,(function*(){this.throwIfDisposed();const e=yield rt().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}))}dispose(){this.isDisposed||(rt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return at.print(this,e)}clone(){return this.throwIfDisposed(),at.clone(this)}toString(e=!1){return Je(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),at.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),rt().makeVariable(this,e,t,n)}}function ot(){return Y("Tensor",(()=>it))}Object.defineProperty(it,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ot();class lt extends it{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!g(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);rt().disposeTensor(this),this.dataId=e.dataId,rt().incRef(this,null)}dispose(){rt().disposeVariable(this),this.isDisposedInternal=!0}}var ut,ct,ht,pt,dt,ft,mt,gt,yt,bt;Object.defineProperty(lt,Symbol.hasInstance,{value:e=>e instanceof it&&null!=e.assign&&e.assign instanceof Function}),(ct=ut||(ut={})).R0="R0",ct.R1="R1",ct.R2="R2",ct.R3="R3",ct.R4="R4",ct.R5="R5",ct.R6="R6",(pt=ht||(ht={})).float32="float32",pt.int32="int32",pt.bool="int32",pt.complex64="complex64",(ft=dt||(dt={})).float32="float32",ft.int32="int32",ft.bool="bool",ft.complex64="complex64",(gt=mt||(mt={})).float32="float32",gt.int32="float32",gt.bool="float32",gt.complex64="complex64",(bt=yt||(yt={})).float32="complex64",bt.int32="complex64",bt.bool="complex64",bt.complex64="complex64";const xt={float32:mt,int32:ht,bool:dt,complex64:yt};function kt(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return xt[e][t]}function vt(e){return kt(e,"int32")}function wt(e,t){if(e.dtype===t.dtype)return[e,t];const n=kt(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function It(e){const t=[];return Nt(e,t,new Set),t}function Nt(e,t,n){if(null==e)return;if(e instanceof it)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const a in r){const e=r[a];n.has(e)||(n.add(e),Nt(e,t,n))}}function St(e){return null!=e.kernelName}class Tt{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class $t{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Tt}ready(){return t(this,null,(function*(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(yield this.initializeBackend(n).success)return void(yield this.setBackend(n))}throw new Error("Could not initialize any backends, all backend initializations failed.")}))}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}setBackend(e){return t(this,null,(function*(){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?yield t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Xe(this.backendInstance),!0}))}setupRegisteredKernels(){ne(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ne(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof a||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Z(`Initialization of backend ${e} failed`),Z(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(n){return Z(`Initialization of backend ${e} failed`),Z(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(s){throw t(),s}}nextTensorId(){return $t.nextTensorId++}nextVariableId(){return $t.nextVariableId++}clone(e){const t=Et.runKernel("Identity",{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Et.runKernel("Cast",t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=ee(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=St(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(St(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=ee(t,this.backendName);h(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,p=St(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=i()})),s&&this.addTapeNode(l,u,t,p,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=te(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(h(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&E(e[0])&&(r=e.map((e=>qe(e))));const a=s.write(r,t,n),i=new it(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new it(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new lt(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*C(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof lt||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*C(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){return t(this,null,(function*(){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=yield e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=yield e.kernelTimeMs,e.extraInfo=yield e.extraInfo;return this.state.activeProfile}))}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=te(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=z(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=It(e),n=new Set(t.map((e=>e.id)));for(let r=0;r<this.state.activeScope.track.length;r++){const e=this.state.activeScope.track[r];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(h(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));h(r instanceof it,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<e.length;l++){const n=e[l],a=n.inputs;for(const e in a){const i=a[e];let o=!1;for(let e=0;e<t.length;e++)if(s[i.id]){n.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[n.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let l=e.length-1;l>=0;l--){const t=e[l],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,i[t.id]=!0;break}}const o=[];for(let l=0;l<e.length;l++){const t=e[l];if(r[t.id]&&i[t.id]){const e={};for(const r in t.inputs){const n=t.inputs[r];s[n.id]&&(e[r]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,o.push(n)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=L(m(e),"float32");return Et.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!g(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),At);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return h(_(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;h(t.every((e=>e instanceof it)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),h(n.value instanceof it,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),h(_(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];h(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),h(a.every((e=>e instanceof it)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}time(e){return t(this,null,(function*(){const t=je(),n=yield this.backend.time(e);return n.wallMs=je()-t,n}))}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Tt;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Ct(){const e=X();if(null==e._tfengine){const t=new G(e);e._tfengine=new $t(t)}var t;return t=e._tfengine.ENV,K=t,rt=()=>e._tfengine,e._tfengine}$t.nextTensorId=0,$t.nextVariableId=0;const Et=Ct();function At(e,t){const n={a:e,b:t};return Et.runKernel("Add",n)}function Rt(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function _t(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Ft=j();function Dt(e,t){let n=e;if($(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||$(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Ot(e,s,[]),s}function Ot(e,t,n){if(n=n||[],!Array.isArray(e)&&!$(e))return void h(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));h(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),h(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let r=0;r<e.length;++r)Ot(e[r],s,n.concat(r))}function Mt(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Lt(e,t,n,s="numeric"){if(e instanceof it)return Mt(s,e.dtype,t,n),e;let r=R(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Mt(s,r,t,n),null==e||!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Dt(e,r);$(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?He(e,r):f(e,[],!0);return Et.makeTensor(i,a,r)}function zt(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Lt(e,`${t}[${r}]`,n,s)))}Ft.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ft.registerFlag("IS_BROWSER",(()=>_t())),Ft.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Ft.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ft.registerFlag("PROD",(()=>!1)),Ft.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ft.getBool("DEBUG"))),Ft.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ft.registerFlag("IS_TEST",(()=>!1)),Ft.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Ft.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Ft.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));function Pt(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{Et.startScope(n);try{const t=s(...e);return U(t)&&console.error("Cannot return a Promise inside of tidy."),Et.endScope(t),t}catch(t){throw Et.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Bt=Pt({complex_:function(e,t){const n=Lt(e,"real","complex"),s=Lt(t,"imag","complex");p(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Et.runKernel("Complex",r)}});function Wt(e,t,n,s){if(null==s&&(s=R(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){B(t);const e=m(t),s=m(n);h(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let r=0;r<n.length;++r){const e=n[r],s=r!==n.length-1||e!==m(t.slice(r));h(n[r]===t[r]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return $(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?He(e,s):f(e,[],!0),Et.makeTensor(e,t,s)}function Vt(e,t,n){return Wt(e,t,Dt(e,n),n)}const Ut={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function Gt(e,n){return t(this,null,(function*(){const s=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let i=0;i<a.length;++i){const o=a[i],l=Array.isArray(e)?e[i].tensor:e[o];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${l.dtype}`);const u={name:o,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const e=new Promise((e=>t(this,null,(function*(){const t=yield l.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}))));r.push(e)}else r.push(l.data());null!=n&&(u.group=n),s.push(u)}return{data:Ht(yield Promise.all(r)),specs:s}}))}function Ht(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const jt="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function qt(e){return jt?Buffer.byteLength(e):new Blob([e]).size}function Kt(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function Xt(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Yt(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:qt(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:qt(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Zt(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let i=0;i<s.length;i++){const r=s[i],o=e[n[r>>10]+(1023&r)]+t[r>>10];a[i]=o}return new Float32Array(r)}}class Jt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Jt.instance&&(Jt.instance=new Jt),Jt.instance}static registerSaveRouter(e){Jt.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Jt.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Jt.getHandlers(e,"save")}static getLoadHandlers(e,t){return Jt.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Jt.getInstance().loadRouters:Jt.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const Qt=e=>Jt.getSaveHandlers(e);function en(){if(!j().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function tn(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class nn{constructor(e){if(this.indexedDB=en(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){return t(this,null,(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}))}load(){return t(this,null,(function*(){return this.databaseAction(this.modelPath)}))}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>tn(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction("models_store","readonly"),s=t.objectStore("models_store").get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=Yt(t),a=r.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore("model_info_store");const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}nn.URL_SCHEME="indexeddb://";const sn=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(nn.URL_SCHEME)?(t=e.slice(nn.URL_SCHEME.length),new nn(t)):null;var t};Jt.registerSaveRouter(sn),Jt.registerLoadRouter(sn);class rn{constructor(){this.indexedDB=en()}listModels(){return t(this,null,(function*(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>tn(n),n.onsuccess=()=>{const s=n.result,r=s.transaction("model_info_store","readonly"),a=r.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}))}removeModel(e){return t(this,null,(function*(){var t;return e=(t=e).startsWith(nn.URL_SCHEME)?t.slice(nn.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>tn(s),s.onsuccess=()=>{const r=s.result,a=r.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction("models_store","readwrite");const s=l.objectStore("models_store").delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}))}}const an="tensorflowjs_models",on="info",ln="model_topology",un="weight_specs",cn="weight_data",hn="model_metadata";function pn(e){return{info:[an,e,on].join("/"),topology:[an,e,ln].join("/"),weightSpecs:[an,e,un].join("/"),weightData:[an,e,cn].join("/"),modelMetadata:[an,e,hn].join("/")}}function dn(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function fn(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class mn{constructor(e){if(!j().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=pn(this.modelPath)}save(e){return t(this,null,(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),s=JSON.stringify(e.weightSpecs),r=Yt(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,s),this.LS.setItem(this.keys.weightData,function(e){if(jt)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let s=0,r=t.length;s<r;s++)n+=String.fromCharCode(t[s]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:r}}catch(t){throw dn(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}))}load(){return t(this,null,(function*(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(jt){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let s=0;s<t.length;++s)n.set([t.charCodeAt(s)],s);return n.buffer}(a),t}))}}mn.URL_SCHEME="localstorage://";const gn=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(mn.URL_SCHEME)?(t=e.slice(mn.URL_SCHEME.length),new mn(t)):null;var t};Jt.registerSaveRouter(gn),Jt.registerLoadRouter(gn);class yn{constructor(){h(j().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),h("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}listModels(){return t(this,null,(function*(){const e={},t=an+"/",n="/"+on;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[fn(r)]=JSON.parse(this.LS.getItem(r))}}return e}))}removeModel(e){return t(this,null,(function*(){var t;const n=pn(e=(t=e).startsWith(mn.URL_SCHEME)?t.slice(mn.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return dn(n),s}))}}class bn{constructor(){this.managers={}}static getInstance(){return null==bn.instance&&(bn.instance=new bn),bn.instance}static registerManager(e,t){h(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),h(e.length>0,(()=>"scheme must not be an empty string."));const n=bn.getInstance();h(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class xn{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(j().get("IS_BROWSER")){j().setPlatform("browser",new xn);try{bn.registerManager(mn.URL_SCHEME,new yn)}catch(hR){}try{bn.registerManager(nn.URL_SCHEME,new rn)}catch(hR){}}const kn=()=>require("node-fetch");let vn;class wn{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=j().global.fetch?j().global.fetch(e,t):(null==vn&&(vn=kn()),vn(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function In(e,t="float32",n){return t=t||"float32",B(e),new st(e,t,n)}j().get("IS_NODE")&&!j().get("IS_BROWSER")&&j().setPlatform("node",new wn);const Nn=Pt({cast_:function(e,t){const n=Lt(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Et.runKernel("Cast",s,r)}});const Sn=Pt({clone_:function(e){const t={x:Lt(e,"x","clone","string_or_numeric")};return Et.runKernel("Identity",t)}});Ct();at={buffer:In,cast:Nn,clone:Sn,print:function(e,t=!1){console.log(e.toString(t))}};function Tn(e){return new Promise((e=>setTimeout(e))).then(e)}class $n{constructor(e){if(!j().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith($n.URL_SCHEME)&&(e=e.slice($n.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){return t(this,null,(function*(){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s=Xt(e,n),r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,yield Tn((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,yield Tn((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Yt(e)}}}))}}$n.URL_SCHEME="downloads://";function Cn(e,t,n,s){var r,a,i;h(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),i=s=null==s?1:s,h((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),h(i>=0&&i<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`)),h(i>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${i}`));let o=0;return Promise.all(e.map((r=>(r.then((r=>{const a=n+ ++o/e.length*(s-n);return t(a),r})),r))))}Jt.registerSaveRouter((e=>j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith($n.URL_SCHEME)?function(e="model"){return new $n(e)}(e.slice($n.URL_SCHEME.length)):null));class En{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(h("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=j().platform.fetch,h(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&h(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}save(e){return t(this,null,(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s=Xt(e,n);t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=yield this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Yt(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}))}load(){return t(this,null,(function*(){const e=yield this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let n;try{n=yield e.json()}catch(cR){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const s=n.modelTopology,r=n.weightsManifest;if(null==s&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return function(e,n){return t(this,null,(function*(){const t={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[s,r]=yield n(e.weightsManifest);t.weightSpecs=s,t.weightData=r}return null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),t}))}(n,(e=>this.loadWeights(e)))}))}loadWeights(e){return t(this,null,(function*(){const n=Array.isArray(this.path)?this.path[1]:this.path,[s,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(n),a=this.weightPathPrefix||s,i=[];for(const t of e)i.push(...t.weights);const o=[],l=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?l.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...yield Promise.all(l));const u=yield function(e,n){return t(this,null,(function*(){null==n&&(n={});const t=null==n.fetchFunc?j().platform.fetch:n.fetchFunc,s=e.map((e=>t(e,n.requestInit,{isBinary:!0}))),r=(null==n.onProgress?yield Promise.all(s):yield Cn(s,n.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==n.onProgress?yield Promise.all(r):yield Cn(r,n.onProgress,.5,1)}))}(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[i,Kt(u)]}))}}function An(e){return null!=e.match(En.URL_SCHEME_REGEX)}En.URL_SCHEME_REGEX=/^https?:\/\//;const Rn=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>An(e))):An(e),n)return _n(e,t)}return null};function _n(e,t){return new En(e,t)}function Fn(e,t){return _n(e,t)}Jt.registerSaveRouter(Rn),Jt.registerLoadRouter(Rn);const Dn=Pt({matMul_:function(e,t,n=!1,s=!1){let r=Lt(e,"a","matMul"),a=Lt(t,"b","matMul");[r,a]=wt(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Et.runKernel("BatchMatMul",i,o)}});const On=Pt({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Lt(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Et.runKernel("OneHot",r,a)}});function Mn(){return Et}function Ln(){return Et.memory()}function zn(e,t){return Et.tidy(e,t)}function Pn(e){It(e).forEach((e=>e.dispose()))}function Bn(e){return Et.keep(e)}function Wn(e,t,n=1){return Et.registerBackend(e,t,n)}const Vn=Pt({imag_:function(e){const t={input:Lt(e,"input","imag")};return Et.runKernel("Imag",t)}});const Un=Pt({neg_:function(e){const t={x:Lt(e,"x","neg")};return Et.runKernel("Neg",t)}});const Gn=Pt({real_:function(e){const t={input:Lt(e,"input","real")};return Et.runKernel("Real",t)}});const Hn=Pt({transpose_:function(e,t,n){const s=Lt(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),h(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{h(e>=0&&e<s.rank,(()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?zn((()=>{let e=Gn(s),t=Vn(s);return e=Et.runKernel("Transpose",{x:e},a),t=Et.runKernel("Transpose",{x:t},a),n&&(t=Un(t)),Bt(e,t)})):Et.runKernel("Transpose",r,a)}});function jn(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function qn(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Kn(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(s)}}return n}let Xn;const Yn=Pt({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=ee("FromPixels",Et.backendName)){const n={pixels:e},s={numChannels:t};return Et.runKernel("FromPixels",n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==Xn)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Xn=new OffscreenCanvas(1,1).getContext("2d")}else Xn=document.createElement("canvas").getContext("2d");Xn.canvas.width=l,Xn.canvas.height=u,Xn.drawImage(e,0,0,l,u),c=Xn.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(d(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Dt(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Wt(e,t,s,n)}(h,[u,l,t],"int32")}});function Zn(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===m(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let h=0;h<r.length-1;++h)i*=r[h];const o=e.shape,l=r.slice();l.pop();let u=1;for(let h=a;h<n;++h)u*=o[h],l.push(o[h]);const c=[...D(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function Jn(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let i=0;i<r;++i)if(n.shape[i]!==t.shape[i])throw new Error(a+` updates.shape[${i}] (${n.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);for(let i=0;i<n.rank-r;++i)if(n.shape[i+r]!==e[i+s])throw new Error(a+` updates.shape[${i+r}] (${n.shape[i+r]}) != shape[${i+r}] (${e[i+r]})`)}function Qn(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Jn(n,t,e)}function es(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let l=r;l<a;++l)i*=n[l];const o=r<1?1:r;return{sliceRank:r,numUpdates:m(t.shape)/o,sliceSize:i,strides:[...D(n.slice(0,r)),1],outputSize:m(n)}}function ts(e,t,n){const s=e.shape.length;h(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),h(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)h(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function ns(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function ss(e,t,n,s){const r=[...e];for(let a=r.length;a<s.length;a++)r.push(1);for(let a=0;a<n;a++)0===a?r[t]=1:(r.splice(t,0,1),r.pop());return r}function rs(e,t,n){return n<=e?n:n-(t-1)}function as(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function is(e,t,n,s,r){const a=[...r],i=as(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=0;else{const r=rs(t,n,o);let i=s[r];e&1<<r&&(i=0),a[o]=i}return a}function os(e,t,n,s,r){const a=[...r],i=as(n,t);for(let o=0;o<a.length;o++)if(i.indexOf(o)>-1)a[o]=Number.MAX_SAFE_INTEGER;else{const r=rs(t,n,o);let i=s[r];e&1<<r&&(i=Number.MAX_SAFE_INTEGER),a[o]=i}for(let o=0;o<a.length;o++){const e=r[o];a[o]<0&&(a[o]+=e),a[o]=l(0,a[o],r[o])}return a}function ls(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function us(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=s[r];return i<0&&(i+=u),i=l(0,i,u-1),i}function cs(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=s[r];return i<0&&(i+=u),i=o>0?l(0,i,u):l(-1,i,u-1),i}function hs(e,t,n){let s=n.length;for(let r=0;r<n.length;r++)if(n[r]>1){s=r;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function ps(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function ds(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{h(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(h(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function fs(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let b=0;b<h.dims;b++)c&&0!=(1<<b&o)&&h.numAddAxisAfterEllipsis++,1<<b&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let b=0;b<e.length;++b){if(0===p.strides[b])throw Error(`strides[${b}] must be non-zero`);const t=!!(p.shrinkAxisMask&1<<b),n=e[b];if(-1===n){g.push(t?1:-1);continue}const s=[p.beginMask&1<<b,p.endMask&1<<b],r=[p.strides[b]>0?0:-1,p.strides[b]>0?n:n-1];if(t&&p.strides[b]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[b];const a=!!(p.beginMask&1<<b&&p.endMask&1<<b);if(p.beginValid&&p.endValid){if(t){const e=p.begin[b]<0?n+p.begin[b]:p.begin[b];if(p.begin[b]=e,p.end[b]=p.begin[b]+1,e<0||e>=n)throw Error(`slice index ${p.begin[b]} of dimension ${b} out of bounds.`)}else p.begin[b]=ms(p.begin[b],0,p.strides[b],n,s,r),p.end[b]=ms(p.end[b],1,p.strides[b],n,s,r);const e=1===p.strides[b]&&0===p.begin[b]&&p.end[b]===n;d=d&&e,f=f&&(0===b&&1===p.strides[b]||e)}else d=d&&1===p.strides[b]&&a,f=f&&(0===b&&1===p.strides[b]||a);let i,o=!1;if(p.beginValid&&p.endValid?(i=p.end[b]-p.begin[b],o=!0):t?(i=1,o=!0):a&&n>=0&&(i=p.strides[b]<0?-n:n,o=!0),o){let e;e=0===i||i<0!=p.strides[b]<0?0:Math.trunc(i/p.strides[b])+(i%p.strides[b]!=0?1:0),g.push(e)}else g.push(-1)}for(let b=0;b<p.finalShapeGatherIndices.length;++b){const e=p.finalShapeGatherIndices[b];e>=0?y.push(g[e]):-2===e&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function ms(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}var gs=Object.freeze(Object.defineProperty({__proto__:null,assertParamsValid:ts,maskToAxes:function(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t},computeOutShape:ns,stridesWithElidedDims:ss,getNormalizedAxes:function(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=is(i,l,u,s,e),h=os(o,l,u,r,e),p=ss(a,l,u,e)}else for(let d=0;d<u;d++)c[d]=us(i,s,a,e,d,l),h[d]=cs(o,r,a,e,d,l),p[d]=ls(a,d,l);return{begin:c,end:h,strides:p}},startIndicesWithElidedDims:is,stopIndicesWithElidedDims:os,stridesForAxis:ls,startForAxis:us,stopForAxis:cs,isSliceContinous:hs,computeFlatOffset:ps,parseSliceParams:ds,sliceInfo:fs},Symbol.toStringTag,{value:"Module"}));class ys{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class bs{constructor(){this.classNameMap={}}static getMap(){return null==bs.instance&&(bs.instance=new bs),bs.instance}static register(e){bs.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function xs(e){h(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),h("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),h(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),bs.register(e)}const ks=Pt({add_:function(e,t){let n=Lt(e,"a","add"),s=Lt(t,"b","add");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Add",r)}});const vs=Pt({floorDiv_:function(e,t){let n=Lt(e,"a","floorDiv"),s=Lt(t,"b","floorDiv");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("FloorDiv",r)}});const ws=Pt({div_:function(e,t){let n=Lt(e,"a","div"),s=Lt(t,"b","div");if([n,s]=wt(n,s),"int32"===n.dtype&&"int32"===s.dtype)return vs(n,s);const r={a:n,b:s};return Et.runKernel("RealDiv",r,{})}});const Is=Pt({mul_:function(e,t){let n=Lt(e,"a","mul"),s=Lt(t,"b","mul");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Multiply",r)}});const Ns=Pt({abs_:function(e){const t=Lt(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Et.runKernel("ComplexAbs",e)}{const e={x:t};return Et.runKernel("Abs",e)}}});const Ss=Pt({acos_:function(e){const t={x:Lt(e,"x","acos")};return Et.runKernel("Acos",t)}});const Ts=Pt({acosh_:function(e){const t={x:Lt(e,"x","acosh")};return Et.runKernel("Acosh",t)}});const $s=Pt({addN_:function(e){h(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),h(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Lt(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!g(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Et.runKernel("AddN",s)}});const Cs=Pt({all_:function(e,t=null,n=!1){const s={x:Lt(e,"x","all","bool")},r={axis:t,keepDims:n};return Et.runKernel("All",s,r)}});const Es=Pt({any_:function(e,t=null,n=!1){const s={x:Lt(e,"x","any","bool")},r={axis:t,keepDims:n};return Et.runKernel("Any",s,r)}});const As=Pt({argMax_:function(e,t=0){const n={x:Lt(e,"x","argMax")},s={axis:t};return Et.runKernel("ArgMax",n,s)}});const Rs=Pt({argMin_:function(e,t=0){const n={x:Lt(e,"x","argMin")},s={axis:t};return Et.runKernel("ArgMin",n,s)}});const _s=Pt({asin_:function(e){const t={x:Lt(e,"x","asin")};return Et.runKernel("Asin",t)}});const Fs=Pt({asinh_:function(e){const t={x:Lt(e,"x","asinh")};return Et.runKernel("Asinh",t)}});const Ds=Pt({atan_:function(e){const t={x:Lt(e,"x","atan")};return Et.runKernel("Atan",t)}});const Os=Pt({atan2_:function(e,t){let n=Lt(e,"a","atan2"),s=Lt(t,"b","atan2");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Atan2",r)}});const Ms=Pt({atanh_:function(e){const t={x:Lt(e,"x","atanh")};return Et.runKernel("Atanh",t)}});function Ls(e,t,n,s,r="NHWC",a){return Bs(e,[...t,e[3]],n,a,s,null,null,Xs(r))}function zs(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Us(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Bs(e,u,n,s,r,a,!1,i)}function Ps(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Gs(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Ws(e,c,n,s,r,!1,h,a)}function Bs(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Us(n),[y,b]=Us(s),x=Hs(p,y),k=Hs(d,b),{padInfo:v,outHeight:w,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Vs(e,t,n));const a=e[0],i=e[1],o=js((a-t+2*s)/n+1,r),l=js((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=js((t-a+p+d)/s+1,o),h=js((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,k,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,w,I]:"channelsLast"===o&&(S=[l,w,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:w,outWidth:I,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:k,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Ws(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Gs(n),[k,v,w]=Gs(s),I=Hs(d,k),N=Hs(f,v),S=Hs(m,w),{padInfo:T,outDepth:$,outHeight:C,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Vs(e,t,s));const i=e[0],o=e[1],l=e[2],u=js((i-t+2*r)/s+1,a),c=js((o-t+2*r)/s+1,a),h=js((l-t+2*r)/s+1,a);return[u,c,h,n]}([t,n,s,1],o,1,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,k=Math.floor(m/2);h={top:b,bottom:x,left:k,right:m-k,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,$,C,E]:"channelsLast"===i&&(R=[l,$,C,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:$,outHeight:C,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:k,dilationHeight:v,dilationWidth:w,inShape:e,outShape:R,filterShape:t}}function Vs(e,t,n,s=1){const r=Hs(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Us(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Gs(e){return"number"==typeof e?[e,e,e]:e}function Hs(e,t){return t<=1?e:e+(e-1)*(t-1)}function js(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function qs(e){const[t,n,s]=Us(e);return 1===t&&1===n&&1===s}function Ks(e,t){return qs(e)||qs(t)}function Xs(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Ys(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)h(y(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{h(y(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Zs=Pt({reshape_:function(e,t){const n={x:Lt(e,"x","reshape","string_or_numeric")},s={shape:t};return Et.runKernel("Reshape",n,s)}});const Js=Pt({avgPool_:function(e,t,n,s,r){const a=Lt(e,"x","avgPool","float32");h(Ks(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=Zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),Ys("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Et.runKernel("AvgPool",l,u);return c=Nn(c,a.dtype),o?Zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qs=Pt({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Lt(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),h("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Ys("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let p=Et.runKernel("AvgPool3D",u,c);return p=Nn(p,o.dtype),l?Zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const er=Pt({concat_:function(e,t=0){h(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=zt(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Sn(n[0]);const s=n,r={axis:t};return Et.runKernel("Concat",s,r)}});const tr=Pt({sigmoid_:function(e){const t={x:Lt(e,"x","sigmoid","float32")};return Et.runKernel("Sigmoid",t)}});const nr=Pt({slice_:function(e,t,n){const s=Lt(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Et.runKernel("Slice",r,a)}});const sr=Pt({tanh_:function(e){const t={x:Lt(e,"x","tanh","float32")};return Et.runKernel("Tanh",t)}});const rr=Pt({batchToSpaceND_:function(e,t,n){const s=Lt(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));h(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),h(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),h(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Et.runKernel("BatchToSpaceND",a,i)}});const ar=Pt({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Lt(e,"x","batchNorm"),o=Lt(t,"mean","batchNorm"),l=Lt(n,"variance","batchNorm");let u,c;null!=r&&(u=Lt(r,"scale","batchNorm")),null!=s&&(c=Lt(s,"offset","batchNorm")),h(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),h(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),h(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(e){let t;return t=0===e.rank||1===e.rank?Zs(e,[1,1,1,e.size]):2===e.rank?Zs(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),d={x:p,scale:u,offset:c,mean:o,variance:l},f={varianceEpsilon:a},m=Et.runKernel("FusedBatchNorm",d,f);return Zs(m,i.shape)}});const ir=Pt({batchNorm2d_:function(e,t,n,s,r,a){const i=Lt(e,"x","batchNorm"),o=Lt(t,"mean","batchNorm"),l=Lt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Lt(r,"scale","batchNorm")),null!=s&&(c=Lt(s,"offset","batchNorm")),h(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),h(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),h(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&h(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&h(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),ar(i,o,l,c,u,a)}});const or=Pt({batchNorm3d_:function(e,t,n,s,r,a){const i=Lt(e,"x","batchNorm"),o=Lt(t,"mean","batchNorm"),l=Lt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Lt(r,"scale","batchNorm")),null!=s&&(c=Lt(s,"offset","batchNorm")),h(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),h(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),h(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&h(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&h(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),ar(i,o,l,c,u,a)}});const lr=Pt({batchNorm4d_:function(e,t,n,s,r,a){const i=Lt(e,"x","batchNorm"),o=Lt(t,"mean","batchNorm"),l=Lt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Lt(r,"scale","batchNorm")),null!=s&&(c=Lt(s,"offset","batchNorm")),h(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),h(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),h(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&h(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&h(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),ar(i,o,l,c,u,a)}});const ur=Pt({bincount_:function(e,t,n){const s=Lt(e,"x","bincount"),r=Lt(t,"weights","bincount");h("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),h(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Et.runKernel("Bincount",a,i)}});const cr=Pt({broadcastArgs_:function(e,t){const n=Lt(e,"s0","broadcastArgs","int32"),s=Lt(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return Et.runKernel("BroadcastArgs",r)}});const hr=Pt({broadcastTo_:function(e,t){let n=Lt(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Zs(n,e)}const r=n.shape,a=Array.from(t);for(let l=t.length-1;l>=0;l--)if(r[l]===t[l])a[l]=1;else if(1!==n.shape[l])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Sn(n);const i={x:n},o={reps:a};return Et.runKernel("Tile",i,o)}});const pr=Pt({ceil_:function(e){const t={x:Lt(e,"x","ceil","float32")};return Et.runKernel("Ceil",t)}});const dr=Pt({clipByValue_:function(e,t,n){const s=Lt(e,"x","clipByValue");h(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Et.runKernel("ClipByValue",r,a)}});const fr=Pt({concat1d_:function(e){return er(e,0)}});const mr=Pt({concat2d_:function(e,t){return er(e,t)}});const gr=Pt({concat3d_:function(e,t){return er(e,t)}});const yr=Pt({concat4d_:function(e,t){return er(e,t)}});const br=Pt({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Lt(e,"x","conv2d","float32"),l=Lt(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),h(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Ys("conv2d",s,i);const p="NHWC"===r?u.shape[3]:u.shape[1];h(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),h(Ks(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:u,filter:l},f={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},m=Et.runKernel("Conv2D",d,f);return c?Zs(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const xr=Pt({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Lt(e,"x","conv1d"),l=Lt(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=Zs(o,[1,o.shape[0],o.shape[1]])),h(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),h(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Ys("conv1d",s,i),h(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),h(Ks(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),h("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const p=Zs(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=Zs(u,[u.shape[0],1,u.shape[1],u.shape[2]]),f=br(d,p,[1,n],s,"NHWC",[1,a],i);return Zs(f,c?[f.shape[2],f.shape[3]]:[f.shape[0],f.shape[2],f.shape[3]])}});const kr=Pt({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){h(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),h(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),h(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),h(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],p="NHWC"===a?l.shape[3]:l.shape[1];h(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),h(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),Ys("conv2dDerInput",r,i);const d={dy:l,filter:n},f={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},m=Et.runKernel("Conv2DBackpropInput",d,f);return u?Zs(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const vr=Pt({conv2dTranspose_:function(e,t,n,s,r,a){const i=Lt(e,"x","conv2dTranspose"),o=Lt(t,"filter","conv2dTranspose");return kr(n,i,o,s,r,"NHWC",a)}});const wr=Pt({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Lt(e,"x","conv3d"),o=Lt(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),h(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),h(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),h(Ks(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),h("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},p={strides:n,pad:s,dataFormat:r,dilations:a},d=Et.runKernel("Conv3D",c,p);return u?Zs(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Ir=Pt({conv3DBackpropInput_:function(e,t,n,s,r){h(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];h(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),h(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),h(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),h(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),h(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},p={pad:r,strides:s,inputShape:a},d=Et.runKernel("Conv3DBackpropInputV2",c,p);return o?Zs(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Nr=Pt({conv3dTranspose_:function(e,t,n,s,r){const a=Lt(e,"x","conv3dTranspose"),i=Lt(t,"filter","conv3dTranspose");return Ir(n,a,i,s,r)}});const Sr=Pt({cos_:function(e){const t={x:Lt(e,"x","cos","float32")};return Et.runKernel("Cos",t)}});const Tr=Pt({cosh_:function(e){const t={x:Lt(e,"x","cosh","float32")};return Et.runKernel("Cosh",t)}});const $r=Pt({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:Lt(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Et.runKernel("Cumprod",r,a)}});const Cr=Pt({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Lt(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Et.runKernel("Cumsum",r,a)}});const Er=Pt({denseBincount_:function(e,t,n,s=!1){const r=Lt(e,"x","denseBincount"),a=Lt(t,"weights","denseBincount");h("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),h(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),h(n>=0,(()=>`size must be non-negative, but got ${n}.`)),h(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Et.runKernel("DenseBincount",i,o)}});const Ar=Pt({depthToSpace_:function(e,t,n="NHWC"){const s=Lt(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];h(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),h(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),h(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),h(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Et.runKernel("DepthToSpace",o,l)}});const Rr=Pt({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Lt(e,"x","depthwiseConv2d","float32"),l=Lt(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),h(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),h(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Ys("depthwiseConv2d",s,i);const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Et.runKernel("DepthwiseConv2dNative",p,d);return c?Zs(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const _r=Pt({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Lt(e,"x","dilation2d"),o=Lt(t,"filter","dilation2d");h(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),h(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),h("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},p={strides:n,pad:s,dilations:r},d=Et.runKernel("Dilation2D",c,p);return u?Zs(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Fr=Pt({equal_:function(e,t){let n=Lt(e,"a","equal","string_or_numeric"),s=Lt(t,"b","equal","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("Equal",r)}});const Dr=Pt({where_:function(e,t,n){const s=Lt(t,"a","where"),r=Lt(n,"b","where"),a=Lt(e,"condition","where","bool"),i=Kn(Kn(a.shape,s.shape),r.shape),o={condition:hr(a,i),t:hr(s,i),e:hr(r,i)};return Et.runKernel("Select",o)}});const Or=Pt({zerosLike_:function(e){const t={x:Lt(e,"x","zerosLike")};return Et.runKernel("ZerosLike",t)}});const Mr=Pt({divNoNan_:function(e,t){let n=Lt(e,"a","div"),s=Lt(t,"b","div");[n,s]=wt(n,s);const r=ws(n,s),a=Or(r),i=Fr(s,a);return Dr(i,a,r)}});const Lr=Pt({dot_:function(e,t){const n=Lt(e,"t1","dot"),s=Lt(t,"t2","dot");h(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(h(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=Zs(n,[1,-1]),t=Zs(s,[-1,1]),r=Dn(e,t);return Zs(r,[])}if(1===n.rank&&2===s.rank){const e=Zs(n,[1,-1]),t=Zs(s,[s.shape[0],s.shape[1]]),r=Dn(e,t);return Zs(r,[r.size])}if(2===n.rank&&1===s.rank){const e=Zs(s,[-1,1]),t=Dn(n,e);return Zs(t,[t.size])}{const e=Zs(s,[s.shape[0],s.shape[1]]);return Dn(n,e)}}});const zr=Pt({einsum_:function(e,...t){const n=t.map(((e,t)=>Lt(e,`tensors${t}`,"einsum"))),s={equation:e};return Et.runKernel("Einsum",n,s)}});const Pr=Pt({elu_:function(e){const t={x:Lt(e,"x","elu","float32")};return Et.runKernel("Elu",t)}});const Br=Pt({erf_:function(e){let t=Lt(e,"x","erf");h("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Nn(t,"float32"));const n={x:t};return Et.runKernel("Erf",n)}});function Wr(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Vr(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Ur(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Gr(e,t){return Vr(e,t.map((e=>1)),t)}function Hr(e,t,n){h(Wr(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function jr(e,t){if(Wr(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function qr(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Kr(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const Xr=Pt({max_:function(e,t=null,n=!1){const s={x:Lt(e,"x","max")},r={reductionIndices:t,keepDims:n};return Et.runKernel("Max",s,r)}});const Yr=Pt({min_:function(e,t=null,n=!1){const s={x:Lt(e,"x","min")},r={axis:t,keepDims:n};return Et.runKernel("Min",s,r)}});const Zr=Pt({pow_:function(e,t){let n=Lt(e,"base","pow"),s=Lt(t,"exp","pow");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Pow",r)}});function Jr(e,t){if(($(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&$(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Wt(e,[],[],t)}const Qr=Pt({sqrt_:function(e){const t={x:Lt(e,"x","sqrt","float32")};return Et.runKernel("Sqrt",t)}});const ea=Pt({square_:function(e){const t=Lt(e,"x","square");return Et.runKernel("Square",{x:t},{})}});const ta=Pt({sum_:function(e,t=null,n=!1){let s=Lt(e,"x","sum");"bool"===s.dtype&&(s=Nn(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Et.runKernel("Sum",r,a)}});function na(e,t,n=null){if(0===e.rank)return Ns(e);if(1!==e.rank&&null===n)return na(Zs(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ta(Ns(e),n);if(t===1/0)return Xr(Ns(e),n);if(t===-1/0)return Yr(Ns(e),n);if("euclidean"===t||2===t)return Qr(ta(Zr(Ns(e),Jr(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Xr(ta(Ns(e),n[0]),n[1]-1);if(t===1/0)return Xr(ta(Ns(e),n[1]),n[0]);if(t===-1/0)return Yr(ta(Ns(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Qr(ta(ea(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const sa=Pt({norm_:function(e,t="euclidean",n=null,s=!1){const r=na(e=Lt(e,"x","norm"),t,n);let a=r.shape;if(s){const t=w(n,e.shape);a=Gr(r.shape,t)}return Zs(r,a)}});const ra=Pt({euclideanNorm_:function(e,t=null,n=!1){return sa(e,"euclidean",t,n)}});const aa=Pt({exp_:function(e){const t={x:Lt(e,"x","exp")};return Et.runKernel("Exp",t)}});const ia=Pt({expandDims_:function(e,t=0){const n=Lt(e,"x","expandDims","string_or_numeric");h(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Et.runKernel("ExpandDims",s,r)}});const oa=Pt({expm1_:function(e){const t={x:Lt(e,"x","expm1")};return Et.runKernel("Expm1",t)}});const la=Pt({tile_:function(e,t){const n=Lt(e,"x","tile","string_or_numeric");h(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Et.runKernel("Tile",s,r)}});const ua=Pt({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=In([e,t],s),a=e<=t?e:t;for(let o=0;o<a;++o)r.set(1,o,o);const i=Zs(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return la(ia(i,0),[n[0],1,1]);if(2===n.length)return la(ia(ia(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return la(ia(ia(ia(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function ca(e,t,n){const s={shape:e,value:t,dtype:n};return Et.runKernel("Fill",{},s)}const ha=Pt({floor_:function(e){const t={x:Lt(e,"x","floor","float32")};return Et.runKernel("Floor",t)}});const pa=Pt({gather_:function(e,t,n=0,s=0){const r={x:Lt(e,"x","gather"),indices:Lt(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Et.runKernel("GatherV2",r,a)}});const da=Pt({greater_:function(e,t){let n=Lt(e,"a","greater","string_or_numeric"),s=Lt(t,"b","greater","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("Greater",r)}});const fa=Pt({greaterEqual_:function(e,t){let n=Lt(e,"a","greaterEqual","string_or_numeric"),s=Lt(t,"b","greaterEqual","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("GreaterEqual",r)}});const ma=Pt({isFinite_:function(e){const t={x:Lt(e,"x","isFinite")};return Et.runKernel("IsFinite",t)}});const ga=Pt({isInf_:function(e){const t={x:Lt(e,"x","isInf")};return Et.runKernel("IsInf",t)}});const ya=Pt({isNaN_:function(e){const t={x:Lt(e,"x","isNaN")};return Et.runKernel("IsNan",t)}});const ba=Pt({leakyRelu_:function(e,t=.2){const n={x:Lt(e,"x","leakyRelu")},s={alpha:t};return Et.runKernel("LeakyRelu",n,s)}});const xa=Pt({less_:function(e,t){let n=Lt(e,"a","less","string_or_numeric"),s=Lt(t,"b","less","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("Less",r)}});const ka=Pt({lessEqual_:function(e,t){let n=Lt(e,"a","lessEqual","string_or_numeric"),s=Lt(t,"b","lessEqual","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("LessEqual",r)}});function va(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Et.runKernel("LinSpace",{},s)}const wa=Pt({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Lt(e,"x","localResponseNormalization");h(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),h(y(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=Zs(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Et.runKernel("LRN",l,u);return o?Zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ia=Pt({log_:function(e){const t={x:Lt(e,"x","log","float32")};return Et.runKernel("Log",t)}});const Na=Pt({log1p_:function(e){const t={x:Lt(e,"x","log1p")};return Et.runKernel("Log1p",t)}});function Sa(e){return Et.customGrad(e)}const Ta=Pt({softplus_:function(e){const t={x:Lt(e,"x","softplus")};return Et.runKernel("Softplus",t)}});const $a=Pt({logSigmoid_:function(e){const t=Lt(e,"x","logSigmoid");return Sa((e=>({value:Un(Ta(Un(e))),gradFunc:t=>Is(t,tr(Un(e)))})))(t)}});const Ca=Pt({sub_:function(e,t){let n=Lt(e,"a","sub"),s=Lt(t,"b","sub");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Sub",r)}});const Ea=Pt({logSoftmax_:function(e,t=-1){const n=Lt(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Sa(((e,n)=>{const s=Xr(e,t,!0),r=Ca(e,s),a=Ca(Nn(r,"float32"),Ia(ta(aa(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=aa(s);return Ca(e,Is(ta(e,t,!0),r))}}}))(n)}});const Aa=Pt({logSumExp_:function(e,t=null,n=!1){const s=Lt(e,"x","logSumExp"),r=w(t,s.shape),a=Xr(s,r,!0),i=Ca(s,a),o=aa(i),l=ta(o,r),u=Ia(l),c=ks(Zs(a,u.shape),u);if(n){const e=Gr(c.shape,r);return Zs(c,e)}return c}});const Ra=Pt({logicalAnd_:function(e,t){const n=Lt(e,"a","logicalAnd","bool"),s=Lt(t,"b","logicalAnd","bool");Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("LogicalAnd",r)}});const _a=Pt({logicalNot_:function(e){const t={x:Lt(e,"x","logicalNot","bool")};return Et.runKernel("LogicalNot",t)}});const Fa=Pt({logicalOr_:function(e,t){const n=Lt(e,"a","logicalOr","bool"),s=Lt(t,"b","logicalOr","bool");Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("LogicalOr",r)}});const Da=Pt({logicalXor_:function(e,t){const n=Lt(e,"a","logicalXor","bool"),s=Lt(t,"b","logicalXor","bool");return Kn(n.shape,s.shape),Ra(Fa(e,t),_a(Ra(e,t)))}});const Oa=Pt({searchSorted_:function(e,t,n="left"){const s=Lt(e,"sortedSequence","searchSorted"),r=Lt(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=Zs(s,[-1,a]),l=Zs(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(m(l.shape)>=2147483648)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=2147483648)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const u={sortedSequence:o,values:l},c={side:n};return Et.runKernel("SearchSorted",u,c)}});function Ma(e,t){return Oa(e,t,"left")}const La=Pt({maxPool_:function(e,t,n,s,r){const a=Lt(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=Zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),h(Ks(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Ys("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Et.runKernel("MaxPool",l,u);return o?Zs(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const za=Pt({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Lt(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),h(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),h("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Ys("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},p=Et.runKernel("MaxPool3D",u,c);return l?Zs(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Pa=Pt({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Lt(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Et.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});const Ba=Pt({maximum_:function(e,t){let n=Lt(e,"a","maximum"),s=Lt(t,"b","maximum");[n,s]=wt(n,s),"bool"===n.dtype&&(n=Nn(n,"int32"),s=Nn(s,"int32")),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("Maximum",r)}});const Wa=Pt({mean_:function(e,t=null,n=!1){const s={x:Lt(e,"x","mean")},r={axis:t,keepDims:n};return Et.runKernel("Mean",s,r)}});function Va(e,t="float32"){if("complex64"===t){const t=Va(e,"float32"),n=Va(e,"float32");return Bt(t,n)}const n=z(m(e),t);return Et.makeTensor(n,e,t)}function Ua(e,t="float32"){if("complex64"===t){const t=Ua(e,"float32"),n=Va(e,"float32");return Bt(t,n)}const n=L(m(e),t);return Et.makeTensor(n,e,t)}const Ga=Pt({minimum_:function(e,t){let n=Lt(e,"a","minimum"),s=Lt(t,"b","minimum");[n,s]=wt(n,s),"bool"===n.dtype&&(n=Nn(n,"int32"),s=Nn(s,"int32")),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("Minimum",r)}});const Ha=Pt({mirrorPad_:function(e,t,n){h("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Lt(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");h(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let o=0;o<s.rank;o++)h(2===t[o].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),h(t[o][0]>=0&&t[o][0]<=s.shape[o]-r&&t[o][1]>=0&&t[o][1]<=s.shape[o]-r,(()=>`Padding in dimension ${o} cannot be greater than or equal to ${s.shape[o]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Et.runKernel("MirrorPad",i,a)}});const ja=Pt({mod_:function(e,t){let n=Lt(e,"a","mod"),s=Lt(t,"b","mod");[n,s]=wt(n,s);const r={a:n,b:s};return Et.runKernel("Mod",r)}});const qa=Pt({moments_:function(e,t=null,n=!1){const s=w(t,(e=Lt(e,"x","moments")).shape),r=Wa(e,s,n);let a=r.shape;n||(a=Gr(r.shape,s));const i=ea(Ca(Nn(e,"float32"),Zs(r,a)));return{mean:r,variance:Wa(i,s,n)}}});const Ka=Pt({multinomial_:function(e,t,n,s=!1){const r=Lt(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?Zs(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Et.runKernel("Multinomial",o,l);return 1===i?Zs(u,[u.size]):u}});const Xa=Pt({notEqual_:function(e,t){let n=Lt(e,"a","notEqual","string_or_numeric"),s=Lt(t,"b","notEqual","string_or_numeric");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("NotEqual",r)}});const Ya=Pt({onesLike_:function(e){const t={x:Lt(e,"x","onesLike")};return Et.runKernel("OnesLike",t)}});const Za=Pt({pad_:function(e,t,n=0){const s=Lt(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Et.runKernel("PadV2",a,r)}});const Ja=Pt({spaceToBatchND_:function(e,t,n){const s=Lt(e,"x","spaceToBatchND");h(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),h(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),h(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Et.runKernel("SpaceToBatchND",r,a)}});const Qa=Pt({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Lt(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),h(Ks(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=zs(l.shape,t,a,r,s),p=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const f=1===p[0]&&1===p[1],[m,g]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],p,d),y=f?s:"valid",b=f?l:Ja(l,p,m),x=("avg"===n?()=>Js(b,t,a,y,i):()=>La(b,t,a,y,i))(),k=f?x:rr(x,p,g);return u?Zs(k,[k.shape[1],k.shape[2],k.shape[3]]):k}});const ei=Pt({prelu_:function(e,t){const n={x:Lt(e,"x","prelu"),alpha:Lt(t,"alpha","prelu")};return Et.runKernel("Prelu",n)}});const ti=Pt({prod_:function(e,t=null,n=!1){let s=Lt(e,"x","prod");"bool"===s.dtype&&(s=Nn(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Et.runKernel("Prod",r,a)}});var ni={exports:{}};!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.alea=a}(0,ni);var si={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor128=a}(0,si);var ri={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorwow=a}(0,ri);var ai={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorshift7=a}(0,ai);var ii={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor4096=a}(0,ii);var oi={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.tychei=a}(0,oi);var li,ui={exports:{}};li=ui,function(e,t){var n,s=this,r=256,a=t.pow(r,6),i=t.pow(2,52),o=2*i,l=255;function u(l,u,m){var g=[],y=d(p((u=1==u?{entropy:!0}:u||{}).entropy?[l,f(e)]:null==l?function(){try{var t;return n&&(t=n.randomBytes)?t=t(r):(t=new Uint8Array(r),(s.crypto||s.msCrypto).getRandomValues(t)),f(t)}catch(cR){var a=s.navigator,i=a&&a.plugins;return[+new Date,s,i,s.screen,f(e)]}}():l,3),g),b=new c(g),x=function(){for(var e=b.g(6),t=a,n=0;e<i;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=o;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,d(f(b.S),e),(u.pass||m||function(e,n,s,r){return r&&(r.S&&h(r,b),e.state=function(){return h(b,{})}),s?(t.random=e,n):e})(x,y,"global"in u?u.global:this==t,u.state)}function c(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=l&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=l&a+1],n=n*r+o[l&(o[a]=o[i=l&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(p(e[n],t-1))}catch(cR){}return s.length?s:"string"==r?e:e+"\0"}function d(e,t){for(var n,s=e+"",r=0;r<s.length;)t[l&r]=l&(n^=19*t[l&r])+s.charCodeAt(r++);return f(t)}function f(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=u,d(t.random(),e),li.exports){li.exports=u;try{n=require("crypto")}catch(m){}}}([],Math);var ci=ni.exports,hi=si.exports,pi=ri.exports,di=ai.exports,fi=ii.exports,mi=oi.exports,gi=ui.exports;gi.alea=ci,gi.xor128=hi,gi.xorwow=pi,gi.xorshift7=di,gi.xor4096=fi,gi.tychei=mi;var yi=gi;class bi{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=yi.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class xi{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=yi.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ki=Pt({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new bi(t,n,s,!1,r),i=In(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const vi=Pt({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=In(e,s),i=new xi(t,n,null,r);for(let o=0;o<a.values.length;o++)a.values[o]=i.nextValue();return a.toTensor()}});function wi(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Et.runKernel("Range",{},r)}const Ii=Pt({reciprocal_:function(e){const t={x:Lt(e,"x","reciprocal")};return Et.runKernel("Reciprocal",t)}});const Ni=Pt({relu_:function(e){const t={x:Lt(e,"x","relu")};return Et.runKernel("Relu",t)}});const Si=Pt({relu6_:function(e){const t={x:Lt(e,"x","relu6")};return Et.runKernel("Relu6",t)}});const Ti=Pt({reverse_:function(e,t){const n={x:Lt(e,"x","reverse")},s={dims:t};return Et.runKernel("Reverse",n,s)}});const $i=Pt({round_:function(e){const t={x:Lt(e,"x","round")};return Et.runKernel("Round",t)}});const Ci=Pt({rsqrt_:function(e){const t={x:Lt(e,"x","rsqrt","float32")};return Et.runKernel("Rsqrt",t)}});const Ei=Pt({selu_:function(e){const t={x:Lt(e,"x","selu")};return Et.runKernel("Selu",t)}});const Ai=Pt({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Lt(e,"x","separableConv2d"),l=Lt(t,"depthwiseFilter","separableConv2d"),u=Lt(n,"pointwiseFilter","separableConv2d");let c=o,p=!1;if(3===o.rank&&(p=!0,c=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");h(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),h(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),h(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),h(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),h(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],f=l.shape[3];h(u.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${u.shape[2]}.`));const m=Rr(c,l,s,r,i,a),g=br(m,u,1,"valid",i);return p?Zs(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Ri=function(e,n){return t(this,null,(function*(){const t=Lt(e,"x","setdiff1d"),s=Lt(n,"y","setdiff1d");h(t.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${t.dtype}) and y (${s.dtype}).`)),h(1===t.rank,(()=>`x should be 1D tensor, but got x (${t.shape}).`)),h(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=yield t.data(),a=yield s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new st([o],t.dtype),u=new st([o],"int32");for(let e=0,n=0;e<r.length;e++)i.has(r[e])||(l.values[n]=r[e],u.values[n]=e,n++);return[l.toTensor(),u.toTensor()]}))};const _i=Pt({sign_:function(e){const t={x:Lt(e,"x","sign")};return Et.runKernel("Sign",t)}});const Fi=Pt({sin_:function(e){const t={x:Lt(e,"x","sin","float32")};return Et.runKernel("Sin",t)}});const Di=Pt({sinh_:function(e){const t={x:Lt(e,"x","sinh")};return Et.runKernel("Sinh",t)}});const Oi=Pt({slice1d_:function(e,t,n){const s=Lt(e,"x","slice1d");return h(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),nr(s,[t],[n])}});const Mi=Pt({slice2d_:function(e,t,n){const s=Lt(e,"x","slice2d");return h(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),nr(s,t,n)}});const Li=Pt({slice3d_:function(e,t,n){const s=Lt(e,"x","slice3d");return h(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),nr(s,t,n)}});const zi=Pt({slice4d_:function(e,t,n){const s=Lt(e,"x","slice4d");return h(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),nr(s,t,n)}});const Pi=Pt({softmax_:function(e,t=-1){const n=Lt(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Et.runKernel("Softmax",s,r)}});const Bi=Pt({fft_:function(e){h("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Et.runKernel("FFT",t)}});const Wi=Pt({ifft_:function(e){h("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Et.runKernel("IFFT",t)}});const Vi=Pt({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Zs(e,[n,t]);s=Wi(r)}else{const r=[n,2*(t-1)],a=Zs(Gn(e),[n,t]),i=Zs(Vn(e),[n,t]),o=Ti(nr(a,[0,1],[n,t-2]),1),l=Is(Ti(nr(i,[0,1],[n,t-2]),1),Jr(-1)),u=er([a,o],1),c=er([i,l],1),h=Zs(Bt(u,c),[r[0],r[1]]);s=Wi(h)}if(s=Gn(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Zs(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const Ui=Pt({split_:function(e,t,n=0){const s={x:Lt(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Et.runKernel("SplitV",s,r)}});const Gi=Pt({rfft_:function(e,t){h("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=nr(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=er([e,Va(s)],e.shape.length-1),n=t}else r=e;const a=Or(r),i=Zs(Bt(r,a),[s,n]),o=Bi(i),l=Math.floor(n/2)+1,u=Gn(o),c=Vn(o),p=Ui(u,[l,n-l],u.shape.length-1),d=Ui(c,[l,n-l],c.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=l,Zs(Bt(p[0],d[0]),f)}});const Hi=Pt({squaredDifference_:function(e,t){let n=Lt(e,"a","squaredDifference"),s=Lt(t,"b","squaredDifference");[n,s]=wt(n,s),Kn(n.shape,s.shape);const r={a:n,b:s};return Et.runKernel("SquaredDifference",r,{})}});const ji=Pt({squeeze_:function(e,t){const n=Lt(e,"x","squeeze");return Zs(n,I(n.shape,t).newShape)}});const qi=Pt({stack_:function(e,t=0){const n=zt(e,"tensors","stack","string_or_numeric");h(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&h(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Et.runKernel("Pack",s,r)}});const Ki=Pt({step_:function(e,t=0){const n={x:Lt(e,"x","step")},s={alpha:t};return Et.runKernel("Step",n,s)}});const Xi=Pt({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Lt(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Et.runKernel("StridedSlice",u,c)}});const Yi=Pt({tan_:function(e){const t={x:Lt(e,"x","tan","float32")};return Et.runKernel("Tan",t)}});function Zi(e,t){d(e);const n=Dt(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Wt(e,null,n,t)}function Ji(e,t,n){if(d(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Dt(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Wt(e,t,s,n)}const Qi=Pt({topk_:function(e,t=1,n=!0){const s=Lt(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Et.runKernel("TopK",a,i);return{values:o,indices:l}}});const eo=Pt({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new bi(t,n,s,!0,r),i=In(e,s);for(let o=0;o<i.values.length;o++)i.values[o]=a.nextValue();return i.toTensor()}});const to=Pt({unique_:function(e,t=0){const n=Lt(e,"x","unique","string_or_numeric");h(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Et.runKernel("Unique",s,r);return{values:a,indices:i}}});const no=Pt({unsortedSegmentSum_:function(e,t,n){const s=Lt(e,"x","unsortedSegmentSum"),r=Lt(t,"segmentIds","unsortedSegmentSum","int32");h(y(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Et.runKernel("UnsortedSegmentSum",a,i)}});const so=Pt({unstack_:function(e,t=0){const n=Lt(e,"x","unstack","string_or_numeric");h(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Et.runKernel("Unpack",s,r)}});function ro(e,t){return Oa(e,t,"right")}function ao(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const s=In(e,"int32"),r=In([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=s.indexToLoc(n[a]),i=a*e.length;r.values.set(t,i)}return r.toTensor()}const io=function(e){return t(this,null,(function*(){const t=Lt(e,"condition","whereAsync","bool"),n=yield t.data(),s=ao(t.shape,n);return e!==t&&t.dispose(),s}))};const oo=Pt({scatterND_:function(e,t,n){const s=Lt(e,"indices","scatterND","int32"),r=Lt(t,"updates","scatterND");Qn(r,s,n);const a={indices:s,updates:r},i={shape:n};return Et.runKernel("ScatterNd",a,i)}});const lo=Pt({sparseToDense_:function(e,t,n,s=0){const r=Lt(e,"sparseIndices","sparseToDense","int32"),a=Lt(t,"sparseValues","sparseToDense","string_or_numeric"),i=Lt(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Et.runKernel("SparseToDense",o,l)}});const uo=Pt({gatherND_:function(e,t){const n=Lt(t,"indices","gatherND","int32"),s={params:Lt(e,"x","gatherND","string_or_numeric"),indices:n};return Et.runKernel("GatherNd",s)}});const co=Pt({dropout_:function(e,t,n,s){const r=Lt(e,"x","dropout");if(h("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),h(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof it?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(g(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=ws(ha(ks(vi(a,0,1,"float32",s),i)),i);return Is(r,o)}});function ho(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return Zi(r,"float32")}const po=Pt({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=Zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2]])),h(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),h(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),h(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];h(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),h(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Ys("conv2dDerFilter",r,i);const p={x:o,dy:l},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Et.runKernel("Conv2DBackpropFilter",p,d)}});function fo(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Is(e,Ki(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function mo(e,t){let n=t;const s=qn(e.shape,t.shape);return s.length>0&&(n=ta(n,s)),Zs(n,e.shape)}function go(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Ni(e);if("elu"===t)return Pr(e);if("relu6"===t)return Si(e);if("prelu"===t)return ei(e,n);if("leakyrelu"===t)return ba(e,s);if("sigmoid"===t)return tr(e);throw new Error(`Unknown fused activation ${t}.`)}const yo=(e,t)=>!(e>0)||"linear"===t;const bo=Pt({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===yo(Et.state.gradientDepth,l)){h("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let p=br(e,t,n,s,r,a,i);return null!=o&&(p=ks(p,o)),go(p,l,u,c)}const p=Lt(e,"x","conv2d","float32"),d=Lt(t,"filter","conv2d","float32");let f=p,m=!1;3===p.rank&&(m=!0,f=Zs(p,[1,p.shape[0],p.shape[1],p.shape[2]])),h(4===f.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${f.rank}.`)),h(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),Ys("fused conv2d",s,i);const g="NHWC"===r?f.shape[3]:f.shape[1];h(d.shape[2]===g,(()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`)),h(Ks(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const y=Bs(f.shape,d.shape,n,a,s,i);let b,x;if(null!=o&&(b=Lt(o,"bias","fused conv2d"),[b]=wt(b,p),"NHWC"===r?Kn(y.outShape,b.shape):(h(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),h(0===b.shape.length||b.shape[0]===y.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${y.outChannels})`)))),null!=u){const e=u.shape;if(h(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)h(1===e[0]||e[0]===y.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${y.outChannels}).`));else if(3===e.length)try{Kn(e,y.outShape)}catch(cR){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(n)}x=Lt(u,"prelu weights","fused conv2d")}const k=(e,t)=>{h("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[i,o,u,c]=t,p=fo(e,u,l);h(qs(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const d=[kr(o.shape,p,i,n,s),po(o,p,i.shape,n,s)];if(null!=c){const e=mo(c,p);d.push(e)}return d},v={x:f,filter:d,bias:b,preluActivationWeights:x},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return Sa(((e,t,n)=>{let s=Et.runKernel("FusedConv2D",v,w);return n([t,e,s]),m&&(s=Zs(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:k}}))(f,d)}return Sa(((e,t,n,s)=>{let r=Et.runKernel("FusedConv2D",v,w);return s([t,e,r,n]),m&&(r=Zs(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}}))(f,d,b)}});const xo=Pt({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=Zs(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Et.runKernel("DepthwiseConv2dNativeBackpropFilter",u,c)}});const ko=Pt({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Et.runKernel("DepthwiseConv2dNativeBackpropInput",u,c);return l?Zs(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const vo=Pt({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===yo(Et.state.gradientDepth,l)){let h=Rr(e,t,n,s,r,a,i);return null!=o&&(h=ks(h,o)),go(h,l,u,c)}const p=Lt(e,"x","depthwiseConv2d","float32"),d=Lt(t,"filter","depthwiseConv2d","float32");let f=p,m=!1;3===p.rank&&(m=!0,f=Zs(p,[1,p.shape[0],p.shape[1],p.shape[2]])),h(4===f.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${f.rank}.`)),h(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),h(f.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${f.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==a&&(a=[1,1]),h(Ks(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Ys("fused depthwiseConv2d",s,i);const g=Bs(f.shape,d.shape,n,a,s,i,!0);let y,b;null!=o&&(y=Lt(o,"bias","fused conv2d"),[y]=wt(y,p),Kn(g.outShape,y.shape)),null!=u&&(b=Lt(u,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{h(qs(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,p=fo(e,u,l),d=ko(o.shape,p,r,n,s,a,i),f=xo(o,p,r.shape,n,s,a,i);if(null!=c){return[d,f,mo(y,p)]}return[d,f]},k={x:f,filter:d,bias:y,preluActivationWeights:b},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return Sa(((e,t,n)=>{let s=Et.runKernel("FusedDepthwiseConv2D",k,v);return n([t,e,s]),m&&(s=Zs(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(f,d)}return Sa(((e,t,n,s)=>{let r=Et.runKernel("FusedDepthwiseConv2D",k,v);return s([t,e,r,n]),m&&(r=Zs(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(f,d,y)}});const wo=Pt({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===yo(Et.state.gradientDepth,a)){let l=Dn(e,t,n,s);return null!=r&&(l=ks(l,r)),go(l,a,i,o)}let l=Lt(e,"a","fused matMul"),u=Lt(t,"b","fused matMul");[l,u]=wt(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],p=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=n?l.shape[l.rank-1]:l.shape[l.rank-2],f=s?u.shape[u.rank-2]:u.shape[u.rank-1],g=l.shape.slice(0,-2),y=u.shape.slice(0,-2),b=m(g),x=m(y);h(c===p,(()=>`Error in fused matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const k=Kn(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,f]),v=Zs(l,n?[b,c,d]:[b,d,c]),w=Zs(u,s?[x,f,p]:[x,p,f]);let I,N;null!=r&&(I=Lt(r,"bias","fused matMul"),[I]=wt(I,l),Kn(k,I.shape)),null!=i&&(N=Lt(i,"prelu weights","fused matMul"));const S=(e,t)=>{const[i,o,l,u]=t,c=fo(Zs(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=Dn(c,o,!1,!1),p=Dn(c,i,!0,!1)):n&&!s?(h=Dn(o,c,!1,!0),p=Dn(i,c,!1,!1)):(h=Dn(o,c,!0,!0),p=Dn(c,i,!0,!0)):(h=Dn(c,o,!1,!0),p=Dn(i,c,!0,!1)),null!=r){return[h,p,mo(u,c)]}return[h,p]},T={a:v,b:w,bias:I,preluActivationWeights:N},$={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return Sa(((e,t,n)=>{const s=Et.runKernel("_FusedMatMul",T,$);return n([e,t,s]),{value:Zs(s,k),gradFunc:S}}))(v,w)}return Sa(((e,t,n,s)=>{const r=Et.runKernel("_FusedMatMul",T,$);return s([e,t,r,n]),{value:Zs(r,k),gradFunc:S}}))(v,w,I)}});Pt({hammingWindow_:function(e){return ho(e,.54,.46)}});const Io=Pt({hannWindow_:function(e){return ho(e,.5,.5)}});const No=Pt({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(nr(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=er([nr(e,a,t-s),ca([s],r)]);i.push(o),a+=n}return 0===i.length?Ji([],[0,t]):Zs(er(i),[i.length,t])}});Pt({stft_:function(e,t,n,s,r=Io){var a;null==s&&(a=t,s=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=No(e,t,n),o=Is(i,r(t));return Gi(o,s)}});const So=Pt({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Lt(e,"image","cropAndResize"),o=Lt(t,"boxes","cropAndResize","float32"),l=Lt(n,"boxInd","cropAndResize","int32"),u=o.shape[0];h(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),h(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),h(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),h(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),h(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),h("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},p={method:r,extrapolationValue:a,cropSize:s};return Et.runKernel("CropAndResize",c,p)}});const To=Pt({flipLeftRight_:function(e){const t=Lt(e,"image","flipLeftRight","float32");h(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Et.runKernel("FlipLeftRight",n,{})}});const $o=Pt({grayscaleToRGB_:function(e){const t=Lt(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];h(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),h(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,la(t,r)}});const Co=Pt({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Lt(e,"image","rotateWithOffset","float32");h(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Et.runKernel("RotateWithOffset",a,i)}});function Eo(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),h(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),h(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),h(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),h(1===t.rank,(()=>"scores must be a 1D tensor")),h(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),h(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Ao=Pt({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Lt(e,"boxes","nonMaxSuppression","float32"),i=Lt(t,"scores","nonMaxSuppression","float32"),o=Eo(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Et.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},l)}});function Ro(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||_o)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function _o(e,t){return e>t?1:e<t?-1:0}function Fo(e,t,n,s,r){return Mo(e,t,n,s,r,0)}function Do(e,t,n,s,r,a){return Mo(e,t,n,s,r,0,!1,a,!0)}function Oo(e,t,n,s,r,a){return Mo(e,t,n,s,r,a,!0)}function Mo(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let g=0;g<t.length;g++)t[g]>r&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(Po);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let l=h.length-1;l>=i;--l){const n=Lo(e,a,h[l]);if(n>=s){o=!0;break}if(t.score=t.score*zo(s,c,n),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&Ro(u,t,Po))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Lo(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function zo(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Po(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Bo=function(e,n,s){return t(this,arguments,(function*(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Lt(e,"boxes","nonMaxSuppressionAsync"),i=Lt(t,"scores","nonMaxSuppressionAsync"),o=Eo(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=yield Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Fo(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),Zi(h,"int32")}))};const Wo=Pt({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Lt(e,"boxes","nonMaxSuppression"),o=Lt(t,"scores","nonMaxSuppression"),l=Eo(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Et.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Vo=function(e,n,s){return t(this,arguments,(function*(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Lt(e,"boxes","nonMaxSuppressionAsync"),o=Lt(t,"scores","nonMaxSuppressionAsync"),l=Eo(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=yield Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Oo(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Zi(p,"int32"),selectedScores:Zi(d)}}))};const Uo=Pt({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Lt(e,"boxes","nonMaxSuppression"),o=Lt(t,"scores","nonMaxSuppression"),l=Eo(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Et.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Go=function(e,n,s){return t(this,arguments,(function*(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Lt(e,"boxes","nonMaxSuppressionAsync"),o=Lt(t,"scores","nonMaxSuppressionAsync"),l=Eo(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=yield Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Do(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Zi(f,"int32"),validOutputs:Jr(m,"int32")}}))};const Ho=Pt({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Lt(e,"images","resizeBilinear");h(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),h(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),h(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Zs(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Et.runKernel("ResizeBilinear",o,l);return i?Zs(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const jo=Pt({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Lt(e,"images","resizeNearestNeighbor");h(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),h(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),h("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),h(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=Zs(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Et.runKernel("ResizeNearestNeighbor",o,l);return i?Zs(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const qo=Pt({threshold_:function(e,t="binary",n=!1,s=.5){const r=Lt(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=Is(Zi([s]),255);if(h(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),h(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),h("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),h("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=Ui(r,[1,1,1],-1);const e=Is(i,.2989),t=Is(o,.587),n=Is(l,.114);u=ks(ks(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=Zi([-1]),u=Zi([0]),c=Zi([0]);for(let h=0;h<e.size-1;h++){n=nr(e,0,h+1),s=nr(e,h+1),i=ws(ta(n),t),o=ws(ta(s),t);const p=ta(Is(n,wi(0,n.size)));r=ws(p,ta(n));const d=ca(s.shape,n.size),f=ks(wi(0,s.size),d),m=Is(s,f);a=ws(ta(m),ta(s));const g=Ca(r,a),y=Ca(r,a),b=Is(i,o);c=Is(Is(b,g),y);const x=da(c,u);u=Dr(x,c,u),l=Dr(x,Zi([h]),l)}return l}(ur(Nn($i(u),"int32"),Vt([]),256),a)}const p=n?ka(u,c):da(u,c);return Nn(Is(p,255),"int32")}});const Ko=Pt({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Lt(e,"image","transform","float32"),o=Lt(t,"transforms","transform","float32");h(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),h(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),h(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Et.runKernel("Transform",l,u)}});const Xo=Pt({bandPart_:function(e,t,n){h(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),h(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Lt(e,"a","bandPart");h(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=Zs(wi(0,a,1,"int32"),[-1,1]),l=wi(0,i,1,"int32"),u=Ca(o,l),c=Ra(ka(u,Jr(+t,"int32")),fa(u,Jr(-n,"int32"))),p=Va([a,i],s.dtype);return Zs(qi(so(Zs(s,[-1,a,i])).map((e=>Dr(c,e,p)))),r)}});const Yo=Pt({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,h(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)h(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Ui(e,e.shape[0],0).map((e=>ji(e,[0])));h(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let r=0;r<e.length;++r)n.push(Et.tidy((()=>{let e=s[r];if(r>0)for(let t=0;t<r;++t){const s=Is(ta(Is(n[t],e)),n[t]);e=Ca(e,s)}return ws(e,sa(e,"euclidean"))})));return t?qi(n,0):n}});function Zo(e,t=!1){return Et.tidy((()=>{h(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=ua(n),a=Sn(e);const i=Ji([[1]],[1,1]);let o=Sn(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Et.tidy((()=>{const t=nr(a,[e,e],[n-e,1]),l=sa(t),u=nr(a,[e,e],[1,1]),c=Dr(da(u,0),Ji([[-1]]),Ji([[1]])),h=Ca(u,Is(c,l)),p=ws(t,h);o=1===p.shape[0]?Sn(i):er([i,nr(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Un(ws(Dn(c,h),l)),f=nr(a,[e,0],[n-e,s]),m=Is(d,o),g=Hn(o);if(0===e)a=Ca(f,Dn(m,Dn(g,f)));else{const t=Ca(f,Dn(m,Dn(g,f)));a=er([nr(a,[0,0],[e,s]),t],0)}const y=Hn(m),b=nr(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Ca(b,Dn(Dn(b,o),y));else{const t=Ca(b,Dn(Dn(b,o),y));r=er([nr(r,[0,0],[n,e]),t],1)}return[o,a,r]})),Pn([t,l,u])}return!t&&n>s&&(r=nr(r,[0,0],[n,s]),a=nr(a,[0,0],[s,s])),[r,a]}))}const Jo=Pt({qr_:function(e,t=!1){if(h(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Zo(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=so(Zs(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Zo(e,t);r.push(n),a.push(s)}));return[Zs(qi(r,0),e.shape),Zs(qi(a,0),e.shape)]}}});var Qo,el;(el=Qo||(Qo={}))[el.NONE=0]="NONE",el[el.MEAN=1]="MEAN",el[el.SUM=2]="SUM",el[el.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const tl=Pt({computeWeightedLoss_:function(e,t,n=Qo.SUM_BY_NONZERO_WEIGHTS){const s=Lt(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Lt(t,"weights","computeWeightedLoss"));const a=null==r?s:Is(s,r);if(n===Qo.NONE)return a;if(n===Qo.SUM)return ta(a);if(n===Qo.MEAN){if(null==r)return Wa(a);{const e=s.size/r.size,t=ws(ta(a),ta(r));return e>1?ws(t,Jr(e)):t}}if(n===Qo.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ws(ta(a),Jr(s.size));{const e=Is(r,Ua(s.shape)),t=Nn(ta(Xa(e,Jr(0))),"float32");return ws(ta(a),t)}}throw Error(`Unknown reduction: ${n}`)}});Pt({absoluteDifference_:function(e,t,n,s=Qo.SUM_BY_NONZERO_WEIGHTS){const r=Lt(e,"labels","absoluteDifference"),a=Lt(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Lt(n,"weights","absoluteDifference")),p(r.shape,a.shape,"Error in absoluteDifference: ");const o=Ns(Ca(r,a));return tl(o,i,s)}});Pt({cosineDistance_:function(e,t,n,s,r=Qo.SUM_BY_NONZERO_WEIGHTS){const a=Lt(e,"labels","cosineDistance"),i=Lt(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Lt(s,"weights","cosineDistance")),p(a.shape,i.shape,"Error in cosineDistance: ");const l=Jr(1),u=Ca(l,ta(Is(a,i),n,!0));return tl(u,o,r)}});Pt({hingeLoss_:function(e,t,n,s=Qo.SUM_BY_NONZERO_WEIGHTS){let r=Lt(e,"labels","hingeLoss");const a=Lt(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Lt(n,"weights","hingeLoss")),p(r.shape,a.shape,"Error in hingeLoss: ");const o=Jr(1);r=Ca(Is(Jr(2),r),o);const l=Ni(Ca(o,Is(r,a)));return tl(l,i,s)}});Pt({huberLoss_:function(e,t,n,s=1,r=Qo.SUM_BY_NONZERO_WEIGHTS){const a=Lt(e,"labels","huberLoss"),i=Lt(t,"predictions","huberLoss");let o=null;null!=n&&(o=Lt(n,"weights","huberLoss")),p(a.shape,i.shape,"Error in huberLoss: ");const l=Jr(s),u=Ns(Ca(i,a)),c=Ga(u,l),h=Ca(u,c),d=ks(Is(Jr(.5),ea(c)),Is(l,h));return tl(d,o,r)}});Pt({logLoss_:function(e,t,n,s=1e-7,r=Qo.SUM_BY_NONZERO_WEIGHTS){const a=Lt(e,"labels","logLoss"),i=Lt(t,"predictions","logLoss");let o=null;null!=n&&(o=Lt(n,"weights","logLoss")),p(a.shape,i.shape,"Error in logLoss: ");const l=Jr(1),u=Jr(s),c=Un(Is(a,Ia(ks(i,u)))),h=Is(Ca(l,a),Ia(ks(Ca(l,i),u))),d=Ca(c,h);return tl(d,o,r)}});Pt({meanSquaredError_:function(e,t,n,s=Qo.SUM_BY_NONZERO_WEIGHTS){const r=Lt(e,"labels","meanSquaredError"),a=Lt(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Lt(n,"weights","meanSquaredError")),p(r.shape,a.shape,"Error in meanSquaredError: ");const o=Hi(r,a);return tl(o,i,s)}});Pt({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Qo.SUM_BY_NONZERO_WEIGHTS){let a=Lt(e,"multiClassLabels","sigmoidCrossEntropy");const i=Lt(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Lt(n,"weights","sigmoidCrossEntropy")),p(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Jr(s),t=Jr(1),n=Jr(.5);a=ks(Is(a,Ca(t,e)),Is(n,e))}const l=function(e,t){const n=Lt(e,"labels","sigmoidCrossEntropyWithLogits"),s=Lt(t,"logits","sigmoidCrossEntropyWithLogits");p(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Ni(s),a=Is(s,n),i=Na(aa(Un(Ns(s))));return ks(Ca(r,a),i)}(a,i);return tl(l,o,r)}});Pt({softmaxCrossEntropy_:function(e,t,n,s=0,r=Qo.SUM_BY_NONZERO_WEIGHTS){let a=Lt(e,"onehotLabels","softmaxCrossEntropy");const i=Lt(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Lt(n,"weights","softmaxCrossEntropy")),p(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Jr(s),t=Jr(1),n=Jr(a.shape[1]);a=ks(Is(a,Ca(t,e)),ws(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Sa(((e,t,s)=>{const r=Aa(t,[n],!0),a=Ca(Nn(t,"float32"),r);s([e,a]);const i=Un(Is(a,e));return{value:ta(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Gr(e.shape,[n]);return[Is(Zs(e,a),Ca(Nn(s,"float32"),aa(r))),Is(Zs(e,a),Ca(aa(r),Nn(s,"float32")))]}}}))(e,t)}(a,i);return tl(l,o,r)}});const nl=Pt({sparseFillEmptyRows_:function(e,t,n,s){const r=Lt(e,"indices","sparseFillEmptyRows","int32"),a=Lt(t,"values","sparseFillEmptyRows"),i=Lt(n,"denseShape","sparseFillEmptyRows","int32"),o=Lt(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Et.runKernel("SparseFillEmptyRows",l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const sl=Pt({sparseReshape_:function(e,t,n){const s=Lt(e,"inputIndices","sparseReshape","int32"),r=Lt(t,"inputShape","sparseReshape","int32"),a=Lt(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Et.runKernel("SparseReshape",i);return{outputIndices:o[0],outputShape:o[1]}}});const rl=Pt({sparseSegmentMean_:function(e,t,n){const s=Lt(e,"data","sparseSegmentMean"),r=Lt(t,"indices","sparseSegmentMean","int32"),a=Lt(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Et.runKernel("SparseSegmentMean",i)}});const al=Pt({sparseSegmentSum_:function(e,t,n){const s=Lt(e,"data","sparseSegmentSum"),r=Lt(t,"indices","sparseSegmentSum","int32"),a=Lt(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Et.runKernel("SparseSegmentSum",i)}});const il=Pt({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Lt(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Lt(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=Et.runKernel("StringNGrams",h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const ol=Pt({stringSplit_:function(e,t,n=!0){const s=Lt(e,"input","stringSplit","string"),r=Lt(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=Et.runKernel("StringSplit",i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const ll=Pt({stringToHashBucketFast_:function(e,t){const n=Lt(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Et.runKernel("StringToHashBucketFast",r,s)}}),ul={flipLeftRight:To,grayscaleToRGB:$o,resizeNearestNeighbor:jo,resizeBilinear:Ho,rotateWithOffset:Co,cropAndResize:So,nonMaxSuppression:Ao,nonMaxSuppressionAsync:Bo,nonMaxSuppressionWithScore:Wo,nonMaxSuppressionWithScoreAsync:Vo,nonMaxSuppressionPadded:Uo,nonMaxSuppressionPaddedAsync:Go,threshold:qo,transform:Ko},cl={bandPart:Xo,gramSchmidt:Yo,qr:Jo},hl={sparseFillEmptyRows:nl,sparseReshape:sl,sparseSegmentMean:rl,sparseSegmentSum:al},pl={stringNGrams:il,stringSplit:ol,stringToHashBucketFast:ll};class dl extends ys{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return Pn(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){h(_(e),(()=>"The f passed in variableGrads(f) must be a function")),h(null==t||Array.isArray(t)&&t.every((e=>e instanceof lt)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Et.registeredVariables)t.push(Et.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;h((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Et.gradients(e,t,null,!0);h(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),h(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Pn(this.iterations_)}saveIterations(){return t(this,null,(function*(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Jr(this.iterations_,"int32")}}))}getWeights(){return t(this,null,(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}setWeights(e){return t(this,null,(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}))}extractIterations(e){return t(this,null,(function*(){return this.iterations_=(yield e[0].tensor.data())[0],e.slice(1)}))}}Object.defineProperty(dl,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class fl extends dl{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Et.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Et.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:zn((()=>Or(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:zn((()=>Or(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;zn((()=>{const e=ks(Is(a,this.rho),Is(ea(r),1-this.rho)),t=Is(ws(Qr(ks(i,this.epsilon)),Qr(ks(a,this.epsilon))),r),n=ks(Is(i,this.rho),Is(ea(t),1-this.rho));a.assign(e),i.assign(n);const o=ks(Is(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Pn(this.accumulatedGrads.map((e=>e.variable))),Pn(this.accumulatedUpdates.map((e=>e.variable))))}getWeights(){return t(this,null,(function*(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[yield this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}))}setWeights(e){return t(this,null,(function*(){const t=(e=yield this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}fl.className="Adadelta",xs(fl);class ml extends dl{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Et.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:zn((()=>ca(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;zn((()=>{const e=ks(a,ea(r));a.assign(e);const t=ks(Is(ws(r,Qr(ks(e,Et.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Pn(this.accumulatedGrads.map((e=>e.variable)))}getWeights(){return t(this,null,(function*(){return[yield this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}))}setWeights(e){return t(this,null,(function*(){e=yield this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}ml.className="Adagrad",xs(ml);class gl extends dl{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],zn((()=>{this.accBeta1=Jr(t).variable(),this.accBeta2=Jr(n).variable()})),null==s&&(this.epsilon=Et.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);zn((()=>{const n=Ca(1,this.accBeta1),s=Ca(1,this.accBeta2);t.forEach(((t,r)=>{const a=Et.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:zn((()=>Or(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:zn((()=>Or(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=ks(Is(o,this.beta1),Is(i,1-this.beta1)),c=ks(Is(l,this.beta2),Is(ea(i),1-this.beta2)),h=ws(u,n),p=ws(c,s);o.assign(u),l.assign(c);const d=ks(Is(ws(h,ks(Qr(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Is(this.accBeta1,this.beta1)),this.accBeta2.assign(Is(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Pn(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Pn(this.accumulatedSecondMoment.map((e=>e.variable)))}getWeights(){return t(this,null,(function*(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[yield this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}))}setWeights(e){return t(this,null,(function*(){e=yield this.extractIterations(e),zn((()=>{this.accBeta1.assign(Zr(this.beta1,this.iterations_+1)),this.accBeta2.assign(Zr(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}gl.className="Adam",xs(gl);class yl extends dl{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],zn((()=>{this.iteration=Jr(0).variable(),this.accBeta1=Jr(t).variable()})),null==s&&(this.epsilon=Et.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);zn((()=>{const n=Ca(1,this.accBeta1),s=ws(-this.learningRate,ks(Is(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Et.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Or(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Or(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=ks(Is(o,this.beta1),Is(i,1-this.beta1)),c=Is(l,this.beta2),h=Ns(i),p=Ba(c,h);o.assign(u),l.assign(p);const d=ks(Is(ws(s,n),ws(u,ks(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(ks(this.iteration,1)),this.accBeta1.assign(Is(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Pn(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Pn(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}getWeights(){return t(this,null,(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")}))}setWeights(e){return t(this,null,(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}yl.className="Adamax",xs(yl);class bl extends dl{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Et.registeredVariables[t];zn((()=>{const e=ks(Is(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Bn(Jr(-e))}dispose(){this.c.dispose()}getWeights(){return t(this,null,(function*(){return[yield this.saveIterations()]}))}setWeights(e){return t(this,null,(function*(){if(0!==(e=yield this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}))}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}bl.className="SGD",xs(bl);class xl extends bl{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Jr(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Et.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:zn((()=>Or(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&zn((()=>{let e;const t=ks(Is(this.m,r),a);e=this.useNesterov?ks(Is(this.c,ks(a,Is(t,this.m))),s):ks(Is(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Pn(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}getWeights(){return t(this,null,(function*(){return[yield this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}))}setWeights(e){return t(this,null,(function*(){e=yield this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}xl.className="Momentum",xs(xl);class kl extends dl{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Et.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Et.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:zn((()=>Or(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:zn((()=>Or(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:zn((()=>Or(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;zn((()=>{const e=ks(Is(i,this.decay),Is(ea(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=ks(Is(t,this.decay),Is(a,1-this.decay)),l=ws(Is(a,this.learningRate),Qr(Ca(e,ks(ea(r),this.epsilon)))),u=ks(Is(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Ca(s,u);s.assign(c)}else{const e=ks(Is(i,this.decay),Is(ea(a),1-this.decay)),t=ks(Is(o,this.momentum),ws(Is(a,this.learningRate),Qr(ks(e,this.epsilon))));i.assign(e),o.assign(t);const n=Ca(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Pn(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Pn(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Pn(this.accumulatedMoments.map((e=>e.variable)))}getWeights(){return t(this,null,(function*(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[yield this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}))}setWeights(e){return t(this,null,(function*(){e=yield this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}kl.className="RMSProp",xs(kl);class vl{static sgd(e){return new bl(e)}static momentum(e,t,n=!1){return new xl(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new kl(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new gl(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new fl(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new yl(e,t,n,s,r)}static adagrad(e,t=.1){return new ml(e,t)}}const wl={sgd:vl.sgd,momentum:vl.momentum,adadelta:vl.adadelta,adagrad:vl.adagrad,rmsprop:vl.rmsprop,adamax:vl.adamax,adam:vl.adam},Il="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Nl(){return new Promise((e=>Il((()=>e()))))}function Sl(e,t){const n=e[0].length;e.forEach(((e,t)=>{h(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),h(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)h(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Tl(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}function $l(e){return e<=30?e:F(e,Math.floor(Math.sqrt(e)))}function Cl(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function El(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Al(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Rl(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let a=1;a<e.length;++a)a<=t.length?s?r.push(t[a-1]*e[a]):r.push(e[a]/t[a-1]):r.push(e[a]);return r}function _l(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Fl(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const Dl=1.0507009873554805;function Ol(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Ml(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Ll(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function zl(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<e.length;r+=4)n[Math.floor(r/4)]=e[r],s[Math.floor(r/4)]=e[r+1];return{real:n,imag:s}}function Pl(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Bl(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Wl(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Vl(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Ul=/->/g;function Gl(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Ul,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split("->");h(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let h=0;h<r.length;++h){const e=r[h];if(!a.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let h=0;h<s.length;++h){const e=s[h];-1===o.indexOf(e)&&","!==e&&o.push(e)}const l=new Array(a.length);for(let h=0;h<i;++h){if(new Set(a[h].split("")).size!==a[h].length)throw new Error(`Found duplicate axes in input component ${a[h]}. Support for duplicate axes in input is not implemented yet.`);l[h]=[];for(let e=0;e<a[h].length;++e)l[h].push(o.indexOf(a[h][e]))}const u=o.length,c=[];for(let h=r.length;h<u;++h)c.push(h);return{allDims:o,summedDims:c,idDims:l}}function Hl(e,t){let n=new Array(e);n.fill(-1);for(let r=0;r<t.length;++r)n[t[r]]=r;const s=[];for(let r=0;r<e;++r)-1===n[r]&&s.push(r);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function jl(e,t,n){const s=new Array(e);for(let r=0;r<n.length;++r){const e=n[r].shape;for(let n=0;n<t[r].length;++n)void 0===s[t[r][n]]?s[t[r][n]]=e[n]:h(s[t[r][n]]===e[n],(()=>`Expected dimension ${s[t[r][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function ql(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let i=0;i<r;++i)s.push([]);const a=[];for(let i=0;i<n.length;++i){const e=Xl(t,n[i]);for(const t of e)-1===a.indexOf(t)&&(s[i].push(t),a.push(t))}return{path:n,steps:s}}function Kl(e){return e.every(((e,t)=>e===t))}function Xl(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function Yl(e,t,n=0){let s=[];if("number"==typeof t)h(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{h(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}h(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Zl(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Jl(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Ql(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function eu(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function tu(e,t){return`size ${e} must be non-negative, not ${t}`}function nu(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function su(e,t){return`Input to reshape is a SparseTensor with ${m(e)}\n  dense values, but the requested shape requires a multiple of ${m(t)}. inputShape=${e} outputShape= ${t}`}function ru(e,t){return`Input to reshape is a tensor with ${m(e)} dense values, but the requested shape has ${m(t)}. inputShape=${e} outputShape=${t}`}function au(){return"segment ids must be >= 0"}function iu(){return"segment ids are not increasing"}function ou(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function lu(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function uu(e,t){let n,s=!1;for(e<=30?(n=e,s=!0):n=F(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=F(e,n+1);return n}function cu(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function hu(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let h=0;h<s;++h)if(e.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${e.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)o.push(e.shape[h]),l*=e.shape[h];for(let h=s;h<n;h++)o.push(e.shape[h]),u*=e.shape[h];for(let h=s;h<r;h++)o.push(t.shape[h]);for(let h=n+1;h<a;h++)o.push(e.shape[h]),c*=e.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var pu=Object.freeze(Object.defineProperty({__proto__:null,segOpComputeOptimalWindowSize:uu,computeOutShape:cu,collectGatherOpShapeInfo:hu},Symbol.toStringTag,{value:"Module"}));function du(e){try{return e.map((e=>Ke(e)))}catch(hR){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${hR}`)}}function fu(e){return e.map((e=>qe(e)))}var mu=Object.freeze(Object.defineProperty({__proto__:null,slice_util:gs,segment_util:pu,fromUint8ToStringArray:du,fromStringArrayToUint8:fu,upcastType:kt,axesAreInnerMostDims:Wr,combineLocations:Vr,computeOutAndReduceShapes:Ur,expandShapeToKeepDim:Gr,assertAxesAreInnerMostDims:Hr,getAxesPermutation:jr,getUndoAxesPermutation:qr,getInnerMostAxes:Kr,getBroadcastDims:jn,getReductionAxes:qn,assertAndGetBroadcastShape:Kn,assertParamsConsistent:Sl,computeOutShape:Tl,computeDilation2DInfo:Ls,computePool2DInfo:zs,computePool3DInfo:Ps,computeConv2DInfo:Bs,computeConv3DInfo:Ws,computeDefaultPad:Vs,tupleValuesAreOne:qs,eitherStridesOrDilationsAreOne:Ks,convertConv2DDataFormat:Xs,checkPadOnDimRoundingMode:Ys,getFusedDyActivation:fo,getFusedBiasGradient:mo,applyActivation:go,shouldFuse:yo,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:$l,getImageCenter:Cl,getReshaped:El,getPermuted:Al,getReshapedPermuted:Rl,getSliceBeginCoords:_l,getSliceSize:Fl,prepareAndValidate:Zn,validateUpdateShape:Jn,validateInput:Qn,calculateShapes:es,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:Dl,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Z,log:function(...e){j().getBool("IS_TEST")||j().getBool("PROD")||console.log(...e)},mergeRealAndImagArrays:Ol,splitRealAndImagArrays:Ml,complexWithEvenIndex:Ll,complexWithOddIndex:zl,getComplexWithIndex:Pl,assignToTypedArray:Bl,exponents:Wl,exponent:Vl,decodeEinsumEquation:Gl,getEinsumPermutation:Hl,checkEinsumDimSizes:jl,getEinsumComputePath:ql,isIdentityPermutation:Kl,prepareSplitSize:Yl,getSparseFillEmptyRowsIndicesDenseShapeMismatch:Zl,getSparseFillEmptyRowsNegativeIndexErrorMessage:Jl,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:Ql,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:eu,getSparseReshapeNegativeOutputDimErrorMessage:tu,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:nu,getSparseReshapeInputOutputMultipleErrorMessage:su,getSparseReshapeInputOutputMismatchErrorMessage:ru,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:au,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:iu,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:ou,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:lu},Symbol.toStringTag,{value:"Module"}));const gu={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,Ki(Nn(n,"float32"),-1))}}},yu={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ea(Nn(n,"float32")),s=Qr(Ca(Jr(1),t));return Un(ws(e,s))}}}},bu={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Qr(Ca(ea(Nn(n,"float32")),1));return ws(e,t)}}}},xu={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{let t=e;const s=qn(n.shape,r);return s.length>0&&(t=ta(t,s)),Zs(t,n.shape)},b:()=>{let t=e;const n=qn(s.shape,r);return n.length>0&&(t=ta(t,n)),Zs(t,s.shape)}}}},ku={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},vu={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Or(n)}}},wu={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Or(n)}}},Iu={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,Qr(Ca(Jr(1),ea(Nn(n,"float32")))))}}},Nu={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Qr(ks(Jr(1),ea(Nn(n,"float32"))));return ws(e,t)}}}},Su={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{const t=ks(ea(n),ea(s));let a=Is(e,ws(s,t));const i=qn(n.shape,r);return i.length>0&&(a=ta(a,i)),Zs(a,n.shape)},b:()=>{const t=ks(ea(n),ea(s));let a=Un(Is(e,ws(n,t)));const i=qn(s.shape,r);return i.length>0&&(a=ta(a,i)),Zs(a,s.shape)}}}},Tu={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,ks(ea(Nn(n,"float32")),1))}}},$u={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,Ca(Jr(1),ea(Nn(n,"float32"))))}}};const Cu=Pt({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Lt(e,"dy","avgPool3dGrad"),o=Lt(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),h(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),h(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Ys("avgPool3dGrad",r,a);const p={dy:l,input:u},d={filterSize:n,strides:s,pad:r,dimRoundingMode:a},f=Et.runKernel("AvgPool3DGrad",p,d);return c?Zs(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Eu={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>Cu(e,s,r,a,i,o)}}};const Au=Pt({avgPoolGrad_:function(e,t,n,s,r){const a=Lt(e,"dy","avgPoolGrad"),i=Lt(t,"input","avgPoolGrad");h(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=Zs(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=Zs(a,[1,a.shape[0],a.shape[1],a.shape[2]])),h(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),h(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},p={filterSize:n,strides:s,pad:r},d=Et.runKernel("AvgPoolGrad",c,p);return u?Zs(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Ru={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>Au(e,s,r,a,i)}}},_u={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Dn(e,r,!1,!1),b:()=>Dn(e,s,!0,!1)}:a&&!i?{a:()=>Dn(r,e,!1,!0),b:()=>Dn(s,e,!1,!1)}:{a:()=>Dn(r,e,!0,!0),b:()=>Dn(e,s,!0,!0)}:{a:()=>Dn(e,r,!1,!0),b:()=>Dn(s,e,!0,!1)}}},Fu={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>Ja(e,s,r)}}},Du={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let l=r.length-1;l>=0;l--)if(r[l]===a[l])i[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let l=0;l<i.length;l++)i[l]>1&&o.push(l);return{x:()=>ta(e,o,!0)}}},Ou={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},Mu={kernelName:"Ceil",gradFunc:e=>({x:()=>Or(e)})},Lu={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Dr(Ra(fa(s,r),ka(s,a)),e,Or(e))}}},zu={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:gu.gradFunc},Pu={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=w(r,t[0].shape)[0],i=s.map((e=>e[a]));return Ui(e,i,a).map((e=>()=>e))}},Bu={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return h(qs(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>kr(s.shape,e,r,i,o,l),filter:()=>po(s,e,r.shape,i,o,l)}}},Wu={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>br(e,r,a,i,o,1,l),filter:()=>po(e,s,r.shape,a,i,o,l)}}};const Vu=Pt({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Zs(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=Zs(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),h(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),h(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),h(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),h(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),h(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Et.runKernel("Conv3DBackpropFilterV2",o,l)}}),Uu={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;h(qs(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Ir(i.shape,e,o,r,a),filter:()=>Vu(i,e,o.shape,r,a)}}},Gu={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(Un(Fi(Nn(n,"float32"))),e)}}},Hu={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(Di(Nn(n,"float32")),e)}}},ju={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=jr([r],s.rank);let n=Cr(e,r,a,!i);return null!=t&&(n=Hn(n,t)),n}}}},qu={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;h(qs(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return h(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),h(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),h(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),h(Ks(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),Ys("depthwiseConv2d",a,i),{x:()=>ko(l.shape,e,u,r,a,o,i),filter:()=>xo(l,e,u.shape,r,a,o,i)}}},Ku={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Et.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Et.runKernel("Dilation2DBackpropFilter",i,n)}}},Xu={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Et.runKernel("EluGrad",s)}}},Yu={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Is(aa(Un(ea(n))),2/Math.sqrt(Math.PI));return{x:()=>Is(e,s)}}},Zu={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,n)}}},Ju={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Zs(e,n.shape)}}},Qu={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,aa(n))}}},ec={kernelName:"Floor",gradFunc:e=>({x:()=>Or(e)})},tc={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{const t=ws(e,Nn(s,"float32")),a=qn(n.shape,r);return a.length>0?Zs(ta(t,a),n.shape):t},b:()=>{let t=Is(e,Nn(n,"float32"));const a=qn(s.shape,r);a.length>0&&(t=Zs(ta(t,a),s.shape));const i=ea(s);return Un(ws(t,Nn(i,"float32")))}}}},nc={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Jr(1):o,u=qn(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Ca(r,a),p=Is(e,l),d=Ci(ks(i,Jr(s))),f=Is(Is(Is(d,d),d),Jr(-.5));return{x:()=>1===a.rank?Zs(Is(Is(e,la(Zs(d,[1,1,1,a.shape[0]]),c)),l),r.shape):Zs(Is(Is(e,d),l),r.shape),mean:()=>{let e=Is(Is(d,Jr(-1)),p);return 1===a.rank&&(e=ta(e,u)),Zs(e,a.shape)},variance:()=>{let e=Is(Is(f,h),p);return 1===a.rank&&(e=ta(e,u)),Zs(e,a.shape)},scale:()=>{const t=Is(h,d);let n=Is(e,t);return 1===a.rank&&(n=ta(n,u)),Zs(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=ta(t,u)),Zs(t,a.shape)}}}},sc={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=w(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=rc(0,l),p=rc(l+1,l+1+c),d=ac([o,[n],u]),f=Zs(e,d),m=Zs(r,[n]),g=ac([[l],h,p]),y=Hn(f,g);let b=no(y,m,s.shape[i]);const x=qr(g);return b=Hn(b,x),b},indices:()=>r}}};function rc(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function ac(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const ic={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Or(n),b:()=>Or(s)}}},oc={kernelName:"Identity",gradFunc:e=>({x:()=>Nn(e,"float32")})},lc={kernelName:"IsFinite",gradFunc:e=>({x:()=>Or(e)})},uc={kernelName:"IsInf",gradFunc:e=>({x:()=>Or(e)})},cc={kernelName:"IsNan",gradFunc:e=>({x:()=>Or(e)})},hc={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=da(s,0);return{x:()=>Dr(a,e,Is(e,r))}}},pc={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,ks(n,1))}}},dc={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,Nn(n,"float32"))}}},fc={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=aa(s);return Ca(e,Is(ta(e,r,!0),t))}}}};const mc=Pt({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Et.runKernel("LRNGrad",o,l)}}),gc={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>mc(s,r,e,a,i,o,l)}}};function yc(e,t,n,s){return t.rank<n.rank&&(t=Zs(t,Gr(t.shape,s))),e.rank<n.rank&&(e=Zs(e,Gr(e.shape,s))),{x:()=>Is(e,Nn(Fr(n,t),e.dtype))}}const bc={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=yc(e,t[1],a,w(r,a.shape));return{x:()=>i.x()}}},xc={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Is(e,Nn(fa(n,s),"float32")),b:()=>Is(e,Nn(xa(n,s),"float32"))}}};const kc=Pt({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Lt(e,"dy","maxPool3dGrad"),l=Lt(t,"input","maxPool3dGrad"),u=Lt(n,"output","maxPool3dGrad");let c=o,p=l,d=u,f=!1;4===l.rank&&(f=!0,c=Zs(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),p=Zs(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=Zs(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),h(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),h(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),h(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),Ys("maxPool3dGrad",a,i);const m={dy:c,input:p,output:d},g={filterSize:s,strides:r,pad:a,dimRoundingMode:i},y=Et.runKernel("MaxPool3DGrad",m,g);return f?Zs(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),vc={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>kc(e,s,r,a,i,o,l)}}};const wc=Pt({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Lt(e,"dy","maxPoolGrad"),l=Lt(t,"input","maxPoolGrad"),u=Lt(n,"output","maxPoolGrad");h(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),h(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),h(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Ys("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},p={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Et.runKernel("MaxPoolGrad",c,p)}}),Ic={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>nr(e,a,s.shape)}}};function Nc(e,t,n){const s=e.shape.length,r=s-n.length,a=jr(n,s);let i=e;null!=a&&(i=Hn(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=Zs(t,s),a=$r(e,n,!0,!1),i=$r(e,n,!0,!0),o=Is(a,i);return Is(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=qr(a);u=Hn(u,e)}return u}const Sc={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>rr(e,s,r)}}},Tc={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>er(e,s)}}};const $c=[gu,yu,bu,xu,ku,vu,wu,Iu,Nu,Su,Tu,$u,Eu,Ru,_u,Fu,Du,Ou,Mu,Lu,zu,Pu,Wu,Bu,Uu,Gu,Hu,ju,qu,Ku,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{const t=ws(e,Nn(s,"float32")),a=qn(n.shape,r);return a.length>0?Zs(ta(t,a),n.shape):t},b:()=>{let t=Is(e,Nn(n,"float32"));const a=qn(s.shape,r);a.length>0&&(t=Zs(ta(t,a),s.shape));const i=ea(s);return Un(ws(t,Nn(i,"float32")))}}}},Xu,Yu,Zu,Ju,Qu,tc,ec,nc,sc,ic,oc,lc,uc,cc,hc,pc,dc,fc,gc,bc,bc,xc,vc,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>wc(e,s,r,a,i,o)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=w(r,s.shape),i=m(Ur(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Zs(e,t);return ws(Is(n,Ua(s.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=yc(e,i,a,w(r,a.shape));return{x:()=>o.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Is(e,Nn(ka(n,s),"float32")),b:()=>Is(e,Nn(da(n,s),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>nr(e,a,s.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{const t=qn(n.shape,r);return t.length>0?Zs(ta(e,t),n.shape):e},b:()=>{const t=Is(e,Un(ha(ws(n,s)))),a=qn(s.shape,r);return a.length>0?Zs(ta(t,a),s.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{const t=Is(e,Nn(s,"float32")),a=qn(n.shape,r);return a.length>0?Zs(ta(t,a),n.shape):t},b:()=>{const t=Is(e,Nn(n,"float32")),a=qn(s.shape,r);return a.length>0?Zs(ta(t,a),s.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>Un(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Va(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>Or(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return so(e,s).map((e=>()=>e))}},Ic,Ic,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Kn(a.shape,i.shape);return{a:()=>{const t=Nn(i,"float32");let n=Is(e,Is(t,Zr(a,Ca(t,Jr(1)))));const s=qn(a.shape,o);return s.length>0&&(n=ta(n,s)),Zs(n,a.shape)},b:()=>{const t=da(a,0),n=Dr(t,Ia(a),Or(a));let s=Is(e,Is(r,n));const l=qn(i.shape,o);return l.length>0&&(s=ta(s,l)),Zs(s,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=da(n,0);return{x:()=>Dr(r,e,Is(e,s)),alpha:()=>{let t=Dr(r,Or(e),Is(e,n));const a=qn(s.shape,e.shape);return a.length>0&&(t=ta(t,a)),Zs(t,s.shape)}}}},{kernelName:"Prod",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>Nc(s,e,a)}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,Un(ea(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Is(ka(n,6),Ki(n));return{x:()=>Is(e,Nn(s,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,Nn(Ki(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Zs(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Et.runKernel("ResizeBilinearGrad",r,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Et.runKernel("ResizeNearestNeighborGrad",r,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:s}=n,r=w(s,e.shape);return{x:()=>Ti(e,r)}}},{kernelName:"Round",gradFunc:e=>({x:()=>Or(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Un(ws(e,Is(Zr(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Nn(Or(n),"float32"),t:()=>Is(e,Nn(n,e.dtype)),e:()=>Is(e,Nn(_a(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=da(n,Jr(0)),s=Jr(1.7580993408473768),r=Jr(Dl),a=Is(e,r),i=Is(Is(e,s),aa(Nn(n,"float32")));return Dr(t,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,Is(n,Ca(Jr(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>Or(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(Sr(Nn(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(Tr(Nn(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=ds(s,r,a),u=[];for(let c=0;c<e.rank;c++)u.push([o[c],i[c]-o[c]-l[c]]);return{x:()=>Za(e,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Is(e,s);return{logits:()=>Ca(a,Is(ta(a,[r],true),s))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,tr(n))}}},Sc,Sc,Tc,Tc,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,Is(Qr(Nn(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Jr(2);return{a:()=>Is(e,Is(r,Ca(n,s))),b:()=>Is(e,Is(r,Ca(s,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(e,Is(Nn(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>Or(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Kn(n.shape,s.shape);return{a:()=>{let t=e;const s=qn(n.shape,r);return s.length>0&&(t=ta(t,s)),Zs(t,n.shape)},b:()=>{let t=e;const n=qn(s.shape,r);return n.length>0&&(t=ta(t,n)),Zs(Un(t),s.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;w(a,s.shape).forEach((e=>{r[e]=1}));const i=Zs(e,r),o=Is(i,Ua(s.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ws(e,ea(Sr(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Is(Ca(Jr(1),ea(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Or(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=ks(t,nr(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=ks(t,nr(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=ks(t,nr(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=ks(t,nr(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=qr(r);return{x:()=>Hn(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>qi(e,r)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Ba(t,Or(t)),s=pa(e,n);let r=fa(t,Jr(0,"int32"));const a=s.rank-r.rank;for(let o=0;o<a;++o)r=ia(r,o+1);r=Ra(r,Ua(s.shape,"bool"));const i=Or(s);return Dr(r,s,i)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>Or(e)})}];for(const pR of $c)re(pR);ot().prototype.abs=function(){return this.throwIfDisposed(),Ns(this)},ot().prototype.acos=function(){return this.throwIfDisposed(),Ss(this)},ot().prototype.acosh=function(){return this.throwIfDisposed(),Ts(this)},ot().prototype.add=function(e){return this.throwIfDisposed(),ks(this,e)},ot().prototype.all=function(e,t){return this.throwIfDisposed(),Cs(this,e,t)},ot().prototype.any=function(e,t){return this.throwIfDisposed(),Es(this,e,t)},ot().prototype.argMax=function(e){return this.throwIfDisposed(),As(this,e)},ot().prototype.argMin=function(e){return this.throwIfDisposed(),Rs(this,e)},ot().prototype.asScalar=function(){return this.throwIfDisposed(),h(1===this.size,(()=>"The array must have only 1 element.")),Zs(this,[])},ot().prototype.asType=function(e){return this.throwIfDisposed(),Nn(this,e)},ot().prototype.as1D=function(){return this.throwIfDisposed(),Zs(this,[this.size])},ot().prototype.as2D=function(e,t){return this.throwIfDisposed(),Zs(this,[e,t])},ot().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),Zs(this,[e,t,n])},ot().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),Zs(this,[e,t,n,s])},ot().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),Zs(this,[e,t,n,s,r])},ot().prototype.asin=function(){return this.throwIfDisposed(),_s(this)},ot().prototype.asinh=function(){return this.throwIfDisposed(),Fs(this)},ot().prototype.atan=function(){return this.throwIfDisposed(),Ds(this)},ot().prototype.atan2=function(e){return this.throwIfDisposed(),Os(this,e)},ot().prototype.atanh=function(){return this.throwIfDisposed(),Ms(this)},ot().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Js(this,e,t,n,s)},ot().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),rr(this,e,t)},ot().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),ar(this,e,t,n,s,r)},ot().prototype.broadcastTo=function(e){return this.throwIfDisposed(),hr(this,e)},ot().prototype.cast=function(e){return this.throwIfDisposed(),Nn(this,e)},ot().prototype.ceil=function(){return this.throwIfDisposed(),pr(this)},ot().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),dr(this,e,t)},ot().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof it&&(e=[e]),er([this,...e],t)},ot().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),xr(this,e,t,n,s,r,a)},ot().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),vr(this,e,t,n,s,r)},ot().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),br(this,e,t,n,s,r,a)},ot().prototype.cos=function(){return this.throwIfDisposed(),Sr(this)},ot().prototype.cosh=function(){return this.throwIfDisposed(),Tr(this)},ot().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),$r(this,e,t,n)},ot().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Cr(this,e,t,n)},ot().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ar(this,e,t)},ot().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Rr(this,e,t,n,s,r,a)},ot().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),_r(this,e,t,n,s,r)},ot().prototype.divNoNan=function(e){return this.throwIfDisposed(),Mr(this,e)},ot().prototype.div=function(e){return this.throwIfDisposed(),ws(this,e)},ot().prototype.dot=function(e){return this.throwIfDisposed(),Lr(this,e)},ot().prototype.elu=function(){return this.throwIfDisposed(),Pr(this)},ot().prototype.equal=function(e){return this.throwIfDisposed(),Fr(this,e)},ot().prototype.erf=function(){return this.throwIfDisposed(),Br(this)},ot().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),ra(this,e,t)},ot().prototype.exp=function(){return this.throwIfDisposed(),aa(this)},ot().prototype.expandDims=function(e){return this.throwIfDisposed(),ia(this,e)},ot().prototype.expm1=function(){return this.throwIfDisposed(),oa(this)},ot().prototype.fft=function(){return this.throwIfDisposed(),Bi(this)},ot().prototype.flatten=function(){return this.throwIfDisposed(),Zs(this,[this.size])},ot().prototype.floor=function(){return this.throwIfDisposed(),ha(this)},ot().prototype.floorDiv=function(e){return this.throwIfDisposed(),vs(this,e)},ot().prototype.gather=function(e,t){return this.throwIfDisposed(),pa(this,e,t)},ot().prototype.greaterEqual=function(e){return this.throwIfDisposed(),fa(this,e)},ot().prototype.greater=function(e){return this.throwIfDisposed(),da(this,e)},ot().prototype.ifft=function(){return this.throwIfDisposed(),Wi(this)},ot().prototype.irfft=function(){return this.throwIfDisposed(),Vi(this)},ot().prototype.isFinite=function(){return this.throwIfDisposed(),ma(this)},ot().prototype.isInf=function(){return this.throwIfDisposed(),ga(this)},ot().prototype.isNaN=function(){return this.throwIfDisposed(),ya(this)},ot().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ba(this,e)},ot().prototype.lessEqual=function(e){return this.throwIfDisposed(),ka(this,e)},ot().prototype.less=function(e){return this.throwIfDisposed(),xa(this,e)},ot().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),wa(this,e,t,n,s)},ot().prototype.logSigmoid=function(){return this.throwIfDisposed(),$a(this)},ot().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Ea(this,e)},ot().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Aa(this,e,t)},ot().prototype.log=function(){return this.throwIfDisposed(),Ia(this)},ot().prototype.log1p=function(){return this.throwIfDisposed(),Na(this)},ot().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Ra(this,e)},ot().prototype.logicalNot=function(){return this.throwIfDisposed(),_a(this)},ot().prototype.logicalOr=function(e){return this.throwIfDisposed(),Fa(this,e)},ot().prototype.logicalXor=function(e){return this.throwIfDisposed(),Da(this,e)},ot().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Dn(this,e,t,n)},ot().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),La(this,e,t,n,s)},ot().prototype.max=function(e,t){return this.throwIfDisposed(),Xr(this,e,t)},ot().prototype.maximum=function(e){return this.throwIfDisposed(),Ba(this,e)},ot().prototype.mean=function(e,t){return this.throwIfDisposed(),Wa(this,e,t)},ot().prototype.min=function(e,t){return this.throwIfDisposed(),Yr(this,e,t)},ot().prototype.minimum=function(e){return this.throwIfDisposed(),Ga(this,e)},ot().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Ha(this,e,t)},ot().prototype.mod=function(e){return this.throwIfDisposed(),ja(this,e)},ot().prototype.mul=function(e){return this.throwIfDisposed(),Is(this,e)},ot().prototype.neg=function(){return this.throwIfDisposed(),Un(this)},ot().prototype.norm=function(e,t,n){return this.throwIfDisposed(),sa(this,e,t,n)},ot().prototype.notEqual=function(e){return this.throwIfDisposed(),Xa(this,e)},ot().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),On(this,e,t,n)},ot().prototype.onesLike=function(){return this.throwIfDisposed(),Ya(this)},ot().prototype.pad=function(e,t){return this.throwIfDisposed(),Za(this,e,t)},ot().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),Qa(this,e,t,n,s,r,a)},ot().prototype.pow=function(e){return this.throwIfDisposed(),Zr(this,e)},ot().prototype.prelu=function(e){return this.throwIfDisposed(),ei(this,e)},ot().prototype.prod=function(e,t){return this.throwIfDisposed(),ti(this,e,t)},ot().prototype.reciprocal=function(){return this.throwIfDisposed(),Ii(this)},ot().prototype.relu=function(){return this.throwIfDisposed(),Ni(this)},ot().prototype.relu6=function(){return this.throwIfDisposed(),Si(this)},ot().prototype.reshapeAs=function(e){return this.throwIfDisposed(),Zs(this,e.shape)},ot().prototype.reshape=function(e){return this.throwIfDisposed(),Zs(this,e)},ot().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Ho(this,e,t,n)},ot().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),jo(this,e,t,n)},ot().prototype.reverse=function(e){return this.throwIfDisposed(),Ti(this,e)},ot().prototype.rfft=function(){return this.throwIfDisposed(),Gi(this)},ot().prototype.round=function(){return this.throwIfDisposed(),$i(this)},ot().prototype.rsqrt=function(){return this.throwIfDisposed(),Ci(this)},ot().prototype.selu=function(){return this.throwIfDisposed(),Ei(this)},ot().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ai(this,e,t,n,s,r,a)},ot().prototype.sigmoid=function(){return this.throwIfDisposed(),tr(this)},ot().prototype.sign=function(){return this.throwIfDisposed(),_i(this)},ot().prototype.sin=function(){return this.throwIfDisposed(),Fi(this)},ot().prototype.sinh=function(){return this.throwIfDisposed(),Di(this)},ot().prototype.slice=function(e,t){return this.throwIfDisposed(),nr(this,e,t)},ot().prototype.softmax=function(e){return this.throwIfDisposed(),Pi(this,e)},ot().prototype.softplus=function(){return this.throwIfDisposed(),Ta(this)},ot().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Ja(this,e,t)},ot().prototype.split=function(e,t){return this.throwIfDisposed(),Ui(this,e,t)},ot().prototype.sqrt=function(){return this.throwIfDisposed(),Qr(this)},ot().prototype.square=function(){return this.throwIfDisposed(),ea(this)},ot().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Hi(this,e)},ot().prototype.squeeze=function(e){return this.throwIfDisposed(),ji(this,e)},ot().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof it?[this,e]:[this,...e];return qi(n,t)},ot().prototype.step=function(e){return this.throwIfDisposed(),Ki(this,e)},ot().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),Xi(this,e,t,n,s,r,a,i,o)},ot().prototype.sub=function(e){return this.throwIfDisposed(),Ca(this,e)},ot().prototype.sum=function(e,t){return this.throwIfDisposed(),ta(this,e,t)},ot().prototype.tan=function(){return this.throwIfDisposed(),Yi(this)},ot().prototype.tanh=function(){return this.throwIfDisposed(),sr(this)},ot().prototype.tile=function(e){return this.throwIfDisposed(),la(this,e)},ot().prototype.toBool=function(){return this.throwIfDisposed(),Nn(this,"bool")},ot().prototype.toFloat=function(){return this.throwIfDisposed(),Nn(this,"float32")},ot().prototype.toInt=function(){return this.throwIfDisposed(),Nn(this,"int32")},ot().prototype.topk=function(e,t){return this.throwIfDisposed(),Qi(this,e,t)},ot().prototype.transpose=function(e){return this.throwIfDisposed(),Hn(this,e)},ot().prototype.unique=function(e){return this.throwIfDisposed(),to(this,e)},ot().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),no(this,e,t)},ot().prototype.unstack=function(e){return this.throwIfDisposed(),so(this,e)},ot().prototype.where=function(e,t){return this.throwIfDisposed(),Dr(e,this,t)},ot().prototype.zerosLike=function(){return this.throwIfDisposed(),Or(this)};class Cc extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Cc.prototype)}}class Ec extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ec.prototype)}}class Ac extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ac.prototype)}}class Rc extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Rc.prototype)}}class _c extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_c.prototype)}}class Fc{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Dc(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Oc(e,t){if(!e)throw new _c(t)}function Mc(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Lc(e){return 1===e.length?e[0]:e}function zc(e){return Array.isArray(e)?e:[e]}function Pc(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Bc(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Wc={};function Vc(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Uc(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Uc(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Uc(t):e[n]=t.value)}}}function Gc(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Wc)a=Wc[r];else if(a=t[r],null==a)throw new Ac(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Ac(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Wc?[o,l]=Wc.className:i in t&&([o,l]=t[i]),null==o)throw new Ac(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const n of Object.keys(Wc))e[n]=Wc[n];for(const r of Object.keys(n))e[r]=n[r];a.config.customObjects=e;const t=Object.assign({},Wc);for(const r of Object.keys(n))Wc[r]=n[r];Uc(a.config);const s=l(o,a.config,n,r);return Wc=Object.assign({},t),s}{const e=Object.assign({},Wc);for(const s of Object.keys(n))Wc[s]=n[s];const t=new o(a.config);return Wc=Object.assign({},e),t}}}function Hc(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function jc(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function qc(e){if(null==e)throw new Ac(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Kc(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Ac(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Xc(e,t,n=0,s=1/0){return Oc(n>=0),Oc(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function Yc(e,t){Array.isArray(e)?(h(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Yc(e,`element ${n+1} of ${t}`)))):h(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Zc(e)}.`))}function Zc(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Zc(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Jc(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let Qc=0;function eh(){return Qc++}const th={};function nh(e=""){return e in th||(th[e]=0),th[e]+=1,e+th[e].toString()}const sh=["channelsFirst","channelsLast"],rh=["nearest","bilinear"],ah=["valid","same","causal"],ih=["max","avg"],oh=["sum","mul","concat","ave"],lh=new Map;function uh(e){Kc(sh,"DataFormat",e)}function ch(e){Kc(ah,"PaddingMode",e)}function hh(e){Kc(ih,"PoolMode",e)}const ph=[];function dh(e,t){ph.push(e);try{const e=t();return ph.pop(),e}catch(cR){throw ph.pop(),cR}}function fh(e){if(!yh(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===ph.length?"":ph.join("/")+"/")+e}function mh(e){if(!yh(e))throw new Error("Not a valid tensor name: '"+e+"'");lh.has(e)||lh.set(e,0);const t=lh.get(e);if(lh.set(e,lh.get(e)+1),t>0){const n=`${e}_${t}`;return lh.set(n,1),n}return e}const gh=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function yh(e){return!!e.match(gh)}function bh(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function xh(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function kh(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function vh(e,t){if(t<e)throw new Ac(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let wh;function Ih(){return null==wh&&(wh=Et.backend.epsilon()),wh}function Nh(e,t){return Nn(e,t)}function Sh(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Zs(e,n)}function Th(e,t,n){return zn((()=>{switch(e.rank){case 1:return Oi(e,t,n);case 2:return Mi(e,[t,0],[n,e.shape[1]]);case 3:return Li(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return zi(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return nr(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return nr(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Ac(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function $h(e,t,n){return zn((()=>{switch(e.rank){case 1:return Oi(e,t,n);case 2:return Mi(e,[0,t],[e.shape[0],n]);case 3:return Li(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return zi(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Ac(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ch(e,t,n,s){return zn((()=>{switch(e.rank){case 1:return Oi(e,t,n);case 2:switch(s){case 1:return Th(e,t,n);case 2:return $h(e,t,n);default:throw new Ac(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Th(e,t,n);case 2:return Li(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return $h(e,t,n);default:throw new Ac(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Th(e,t,n);case 2:return zi(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return zi(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return $h(e,t,n);default:throw new Ac(`The axis is not within the rank of the tensor ${s}`)}default:throw new Ac(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Eh(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),er(e,t)}function Ah(e,t){switch(e.rank){case 1:return fr([e,t]);case 2:return mr([e,t],0);case 3:return gr([e,t],0);case 4:return yr([e,t],0);default:throw new Ac(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Rh(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Ac(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return la(e,t)}function _h(e,t=0,n=1,s,r){return ki(e,t,n,s,r)}function Fh(e,t,n,s){if(e.rank<2||t.rank<2)throw new Rc(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Rc(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return wo({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Mh(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=Zs(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Zs(Hn(t,c),[l,-1]);const h=[...r,...u];return Zs(wo({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Mh(e.rank,s,"channelsLast"):null,activation:n}),h)}}function Dh(e,t,n){return zn((()=>(t=Array.isArray(t)?Zi(t,"int32"):Nn(t,"int32"),pa(e,t,n))))}function Oh(e){return Is(e,e)}function Mh(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Ac(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?Zs(t,[1,s[0],1,1,1]):Zs(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?Zs(t,[1,1,1,1,s[0]]):Zs(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?Zs(t,[1,s[0],1,1]):Zs(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?Zs(t,[1,1,1,s[0]]):Zs(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?Zs(t,[1,s[0],1]):Zs(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?Zs(t,[1,1,s[0]]):Zs(t,[1].concat(s))}else if(e<3)return t;throw new Ac(`Unsupported input rank by biasAdd: ${t.rank}`)}function Lh(e,t,n){return zn((()=>(null==n&&(n="channelsLast"),uh(n),ks(e,Mh(e.rank,t,n)))))}function zh(e,t,n,s){return zn((()=>co(e,t,n,s)))}function Ph(e,t,n=!1){return n?e():t()}const Bh=["fanIn","fanOut","fanAvg"],Wh=["normal","uniform","truncatedNormal"];class Vh extends ys{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Uh extends Vh{apply(e,t){return Va(e,t)}}Uh.className="Zeros",xs(Uh);class Gh extends Vh{apply(e,t){return Ua(e,t)}}Gh.className="Ones",xs(Gh);class Hh extends Vh{constructor(e){if(super(),"object"!=typeof e)throw new Ac(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Ac(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return zn((()=>Is(Jr(this.value),Ua(e,t))))}getConfig(){return{value:this.value}}}Hh.className="Constant",xs(Hh);class jh extends Vh{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return vi(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}jh.className="RandomUniform",xs(jh);class qh extends Vh{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Rc(`randomNormal does not support dType ${t}.`);return _h(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}qh.className="RandomNormal",xs(qh);class Kh extends Vh{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Rc(`truncatedNormal does not support dType ${t}.`);return eo(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Kh.className="TruncatedNormal",xs(Kh);class Xh extends Vh{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return zn((()=>{if(2!==e.length||e[0]!==e[1])throw new Ac("Identity matrix initializer can only be used for 2D square matrices.");return Is(this.gain,ua(e[0]))}))}getConfig(){return{gain:this.gain}}}Xh.className="Identity",xs(Xh);class Yh extends Vh{constructor(e){if(super(),e.scale<0)throw new Ac(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Kc(Bh,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Kc(Wh,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(uh(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=bh(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=bh(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=bh(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Rc(`${this.getClassName()} does not support dType ${t}.`);return eo(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return vi(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Yh.className="VarianceScaling",xs(Yh);class Zh extends Yh{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}Zh.className="GlorotUniform",xs(Zh);class Jh extends Yh{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}Jh.className="GlorotNormal",xs(Jh);class Qh extends Yh{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}Qh.className="HeNormal",xs(Qh);class ep extends Yh{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}ep.className="HeUniform",xs(ep);class tp extends Yh{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}tp.className="LeCunNormal",xs(tp);class np extends Yh{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Yh.className}}np.className="LeCunNormal",xs(np);class sp extends Vh{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Rc("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return zn((()=>{if(e.length<2)throw new Rc("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=_h(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=cl.gramSchmidt(t);return e[0]>e[1]&&(n=Hn(n)),Is(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}sp.className="Orthogonal",xs(sp);const rp={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function ap(e,t={}){return Gc(e,bs.getMap().classNameMap,t,"initializer")}function ip(e){return Vc(e)}function op(e){if("string"==typeof e){const t=e in rp?rp[e]:e;if("GlorotNormal"===t)return new Jh;if("GlorotUniform"===t)return new Zh;if("HeNormal"===t)return new Qh;if("HeUniform"===t)return new ep;if("LeCunNormal"===t)return new tp;if("LeCunUniform"===t)return new np;{const e={};return e.className=t,e.config={},ap(e)}}return e instanceof Vh?e:ap(e)}function lp(e){return Array.isArray(e)&&Array.isArray(e[0])}function up(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function cp(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Ac(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function hp(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Ac(`Expected exactly 1 Shape; got ${e.length}`)}return e}function pp(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class dp{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=eh(),n=null==n?"Variable":n,this.originalName=fh(n),this.name=mh(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return Et.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function fp(e){return e.map((e=>e.read()))}function mp(e){e.forEach((e=>{e[0].write(e[1])}))}class gp{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class yp{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=eh(),null!=a&&(this.originalName=fh(a),this.name=mh(this.originalName)),this.rank=t.length}}let bp=0;class xp{constructor(e,t){this.callArgs=t,this.id=bp++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const n of e.inboundLayers)null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let kp=0;class vp extends ys{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=kp++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Pc(e)+"_"+nh(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Ec(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Ac(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Lc(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Lc(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Cc(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Cc(`Layer ${this.name} is not connected, no input to return.`);return Lc(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Cc(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Cc(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Lc(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=zc(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=zc(this.inputSpec);if(e.length!==t.length)throw new Ac(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Ac(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Ac(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Ac(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Ac(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Ac(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Ac(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=zc(e);let s=!0;for(const a of n)if(!(a instanceof yp)){s=!1;break}let r=!0;for(const a of n)if(a instanceof yp){r=!1;break}if(s===r)throw new Ac("Arguments to apply() must be all SymbolicTensors or all Tensors");return dh(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of zc(e))t.push(n.shape);this.build(Lc(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=zc(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Lc(a),null!=this.activityRegularizer)throw new Rc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=zc(e);const t=[];for(const n of e)t.push(n.shape);return Lc(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new yp(a,n,this,zc(e),t,this.name,s))):new yp(a,s,this,zc(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Rc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Cc(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Cc(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Ec(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return pp(this.weights)}build(e){this.built=!0}getWeights(e=!1){return fp(e?this.trainableWeights:this.weights)}setWeights(e){zn((()=>{const t=this.weights;if(t.length!==e.length)throw new Ac(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=fp(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!g(a.shape,o.shape))throw new Ac(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}mp(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Ac(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():op("zeros"));const l=s.apply(t,n),u=new dp(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=zc(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=zc(e);t=zc(t),n=zc(n),s=zc(s),r=up(r),a=up(a);const l=[],u=[],c=[];for(const h of o)l.push(h.sourceLayer),u.push(h.nodeIndex),c.push(h.tensorIndex);new xp({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let h=0;h<t.length;h++)t[h].sourceLayer=this,t[h].nodeIndex=this.inboundNodes.length-1,t[h].tensorIndex=h}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function wp(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=wp(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Ip extends vp{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:nh("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Ac("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Ac("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Ac("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new yp(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new xp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Ac(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}Ip.className="InputLayer",xs(Ip);class Np{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Np)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Ac(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Nn(t,e.dtype)}catch(hR){throw new Ac(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof yp){if(null==this.id2Value[e.id])throw new Ac(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ac(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof yp){if(null==this.id2Value[e.id])throw new Ac(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ac(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Pn(this.id2Mask)}}const Sp=new Fc,Tp=new Fc;function $p(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const h of o)-1!==u.indexOf(h)?l.push(t.getValue(h)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let p,d=Sp.get(c);if(null==d){const e=function(e,t){h(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=Ep(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Ep(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach((e=>s[t].add(e)))}}return{sorted:n,recipientCounts:Cp(s)}}(i,t);d=e.sorted,p=e.recipientCounts,Sp.put(c,d),Tp.put(c,p)}p={},r||Object.assign(p,Tp.get(c));const f=new Np(t);for(let h=0;h<d.length;++h){if(null!=s){const e=Ln().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const e=d[h],a=e.sourceLayer;if(a instanceof Ip)continue;const i=[],u=[],c=[];let m=!1;for(const n of e.inputs){const e=f.getValue(n),s=f.getMask(n);i.push(e),u.push(s),null!=s&&(m=!0),r||(p[n.name]--,0!==p[n.name]||t.hasKey(n)||-1!==o.indexOf(n.name)||e.isDisposed||!0===n.sourceLayer.stateful||c.push(e))}m&&((n=n||{}).mask=u[0]);const g=zc(a.apply(i,n));let y=null;a.supportsMasking&&(y=a.computeMask(i,u));const b=Ap(e),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}r||Pn(c)}return f.disposeMasks(),a?l:l[0]}function Cp(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Ep(e,t){const n=new Set,s=[],r={};for(const o of t.names())n.add(o);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function Ap(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function Rp(e,t){return zn((()=>Qr(ta(Is(e,e),t,!0))))}j().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=Sp&&Sp.setMaxEntries(e),null!=Tp&&Tp.setMaxEntries(e)}));class _p extends ys{getConfig(){return{}}}class Fp extends _p{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return zn((()=>{const t=Rp(e,this.axis),n=dr(t,0,this.maxValue);return Is(e,ws(n,ks(Ih(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Fp.className="MaxNorm",xs(Fp);class Dp extends _p{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return zn((()=>ws(e,ks(Ih(),Rp(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Dp.className="UnitNorm",xs(Dp);class Op extends _p{apply(e){return Ni(e)}}Op.className="NonNeg",xs(Op);class Mp extends _p{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return zn((()=>{const t=Rp(e,this.axis),n=ks(Is(this.rate,dr(t,this.minValue,this.maxValue)),Is(1-this.rate,t));return Is(e,ws(n,ks(Ih(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Mp.className="MinMaxNorm",xs(Mp);const Lp={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function zp(e){return Vc(e)}function Pp(e,t={}){return Gc(e,bs.getMap().classNameMap,t,"constraint")}function Bp(e){if(null==e)return null;if("string"==typeof e){return Pp({className:e in Lp?Lp[e]:e,config:{}})}return e instanceof _p?e:Pp(e)}function Wp(e){return t(this,null,(function*(){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=yield Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Pn(s)}}))}function Vp(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Up,Gp;(Gp=Up||(Up={}))[Gp.SILENT=0]="SILENT",Gp[Gp.VERBOSE=1]="VERBOSE";class Hp{constructor(){this.validationData=null}setParams(e){this.params=e}onEpochBegin(e,n){return t(this,null,(function*(){}))}onEpochEnd(e,n){return t(this,null,(function*(){}))}onBatchBegin(e,n){return t(this,null,(function*(){}))}onBatchEnd(e,n){return t(this,null,(function*(){}))}onTrainBegin(e){return t(this,null,(function*(){}))}onTrainEnd(e){return t(this,null,(function*(){}))}setModel(e){}}class jp{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}onEpochBegin(e,n){return t(this,null,(function*(){null==n&&(n={});for(const t of this.callbacks)yield t.onEpochBegin(e,n)}))}onEpochEnd(e,n){return t(this,null,(function*(){null==n&&(n={});for(const t of this.callbacks)yield t.onEpochEnd(e,n)}))}onBatchBegin(e,n){return t(this,null,(function*(){null==n&&(n={});for(const t of this.callbacks)yield t.onBatchBegin(e,n)}))}onBatchEnd(e,n){return t(this,null,(function*(){null==n&&(n={});for(const t of this.callbacks)yield t.onBatchEnd(e,n)}))}onTrainBegin(e){return t(this,null,(function*(){null==e&&(e={});for(const t of this.callbacks)yield t.onTrainBegin(e)}))}onTrainEnd(e){return t(this,null,(function*(){null==e&&(e={});for(const t of this.callbacks)yield t.onTrainEnd(e)}))}}class qp extends Hp{constructor(){super()}onEpochBegin(e){return t(this,null,(function*(){this.seen=0,this.totals={}}))}onBatchEnd(e,n){return t(this,null,(function*(){null==n&&(n={});const e=null==n.size?0:n.size;this.seen+=e;for(const t in n){const s=n[t];if("number"==typeof s)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+s*e;else{let n;t in this.totals?n=this.totals[t]:this.totals[t]=0;const r=zn((()=>ks(this.totals[t],Is(s,e))));this.totals[t]=r,null!=n&&n.dispose()}}}))}onEpochEnd(e,n){return t(this,null,(function*(){if(null!=n)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?n[e]=this.totals[e]/this.seen:zn((()=>{const t=Is(ws(1,this.seen),this.totals[e]);n[e]=t,this.totals[e].dispose(),Bn(n[e])})))}))}}class Kp extends Hp{onTrainBegin(e){return t(this,null,(function*(){this.epoch=[],this.history={}}))}onEpochEnd(e,n){return t(this,null,(function*(){null==n&&(n={}),this.epoch.push(e);for(const e in n)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(n[e])}))}syncData(){return t(this,null,(function*(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const s=yield Promise.all(e);for(let r=0;r<s.length;++r){this.history[t[r]][n[r]].dispose(),this.history[t[r]][n[r]]=s[r][0]}}))}}class Xp extends Hp{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Nl,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");A(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():je();return(...a)=>{const i=null!=n?n():je();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}maybeWait(e,n,s){return t(this,null,(function*(){const t=[];null!=this.yield&&(yield Wp(s),t.push(this.yield(e,n,s))),t.push(this.nextFrameFunc()),yield Promise.all(t)}))}onEpochBegin(e,n){return t(this,null,(function*(){this.currentEpoch=e,null!=this.epochBegin&&(yield Wp(n),yield this.epochBegin(e,n))}))}onEpochEnd(e,n){return t(this,null,(function*(){const t=[];null!=this.epochEnd&&(yield Wp(n),t.push(this.epochEnd(e,n))),"epoch"===this.yieldEvery&&t.push(this.nextFrameFunc()),yield Promise.all(t)}))}onBatchBegin(e,n){return t(this,null,(function*(){null!=this.batchBegin&&(yield Wp(n),yield this.batchBegin(e,n))}))}onBatchEnd(e,n){return t(this,null,(function*(){const t=[];null!=this.batchEnd&&(yield Wp(n),t.push(this.batchEnd(e,n))),"batch"===this.yieldEvery?t.push(this.nextFrameFunc()):A(this.yieldEvery)&&t.push(this.maybeWait(this.currentEpoch,e,n)),yield Promise.all(t)}))}onTrainBegin(e){return t(this,null,(function*(){null!=this.trainBegin&&(yield Wp(e),yield this.trainBegin(e))}))}onTrainEnd(e){return t(this,null,(function*(){null!=this.trainEnd&&(yield Wp(e),yield this.trainEnd(e))}))}}function Yp(e,t){if(null==e&&(e={}),e instanceof Hp)return[e];if(Array.isArray(e)&&e[0]instanceof Hp)return e;return zc(e).map((e=>new Xp(e,t)))}class Zp{constructor(){}static registerCallbackConstructor(e,t){h(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Zp.checkForDuplicate(t),null==Zp.constructors[e]&&(Zp.constructors[e]=[]),Zp.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Zp.constructors){Zp.constructors[+t].forEach((t=>{if(t===e)throw new Ac("Duplicate callback constructor.")}))}}static clear(){Zp.constructors={}}static createCallbacks(e){const t=[];for(const n in Zp.constructors){const s=+n;e>=s&&t.push(...Zp.constructors[s])}return t.map((e=>new e))}}function Jp(e,t,n,s,r,a,i,o,l){const u=new Kp,c=[new qp,...Zp.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new jp(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Qp(e,t={},n=!1){return Gc(e,bs.getMap().classNameMap,t,"layer",n)}function ed(e,t){return zn((()=>{"float32"!==e.dtype&&(e=Nn(e,"float32"));const n=ta(Oh(e),t,!0),s=ca(n.shape,Ih()),r=Qr(Ba(n,s));return ws(e,r)}))}function td(e,t){return zn((()=>Wa(Oh(Ca(t,e)),-1)))}function nd(e,t){return zn((()=>Wa(Ns(Ca(t,e)),-1)))}function sd(e,t){return zn((()=>{const n=Ca(e,t),s=dr(Ns(e),Ih(),Number.MAX_VALUE),r=Ns(ws(n,s));return Is(100,Wa(r,-1))}))}function rd(e,t,n=!1){return zn((()=>{if(n)t=Pi(t);else{const e=ta(t,t.shape.length-1,!0);t=ws(t,e)}return t=dr(t,Ih(),1-Ih()),Un(ta(Is(Nn(e,"float32"),Ia(t)),t.shape.length-1))}))}function ad(e,t,n=!1){return zn((()=>{const s=Nn(ha(function(e){const t=[bh(e.shape)];return Zs(e,t)}(e)),"int32"),r=(t=dr(t,Ih(),1-Ih())).shape;return rd(Zs(On(s,r[r.length-1]),r),t,n)}))}function id(e,t){return zn((()=>{let n;return n=dr(t,Ih(),1-Ih()),n=Ia(ws(n,Ca(1,n))),Wa(function(e,t){if(!g(e.shape,t.shape))throw new Ac(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return zn((()=>{const n=Ni(t),s=Un(Ns(t));return ks(Ca(n,Is(t,e)),Na(aa(s)))}))}(e,n),-1)}))}function od(e,t){return zn((()=>{const n=ed(e,-1),s=ed(t,-1),r=Is(n,s);return Un(ta(r,-1))}))}Zp.constructors={};const ld={meanSquaredError:td,meanAbsoluteError:nd,meanAbsolutePercentageError:sd,meanSquaredLogarithmicError:function(e,t){return zn((()=>{const n=dr(t,Ih(),Number.MAX_VALUE),s=Ia(ks(1,n)),r=dr(e,Ih(),Number.MAX_VALUE),a=Ia(ks(1,r));return Wa(Oh(Ca(s,a)),-1)}))},squaredHinge:function(e,t){return zn((()=>{const n=Ba(0,Ca(1,Is(e,t)));return Wa(Oh(n),-1)}))},hinge:function(e,t){return zn((()=>{const n=Ba(0,Ca(1,Is(e,t)));return Wa(n,-1)}))},categoricalHinge:function(e,t){return zn((()=>{const n=ta(Is(e,t),-1),s=Xr(Is(Ca(1,e),t),-1);return Ba(0,ks(1,Ca(s,n)))}))},logcosh:function(e,t){return zn((()=>{const n=Math.log(2),s=Ca(t,e),r=Ca(ks(s,Ta(Is(-2,s))),n);return Wa(r,-1)}))},categoricalCrossentropy:rd,sparseCategoricalCrossentropy:ad,binaryCrossentropy:id,kullbackLeiblerDivergence:function(e,t){return zn((()=>{const n=dr(e,Ih(),1),s=dr(t,Ih(),1);return ta(Is(e,Ia(ws(n,s))),-1)}))},poisson:function(e,t){return zn((()=>{const n=Ia(ks(Ih(),t));return Wa(Ca(t,Is(e,n)),-1)}))},cosineProximity:od};function ud(e){if("string"==typeof e){if(e in ld)return ld[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Ac(t)}return e}function cd(e,t){return zn((()=>{const n=Is(.5,Ya(t)),s=Nh(da(t,n),e.dtype);return Wa(Fr(e,s),-1)}))}function hd(e,t){return zn((()=>Nh(Fr(As(e,-1),As(t,-1)),"float32")))}function pd(e,t){return id(e,t)}function dd(e,t){return e.rank===t.rank&&(e=ji(e,[e.rank-1])),(t=As(t,-1)).dtype!==e.dtype&&(t=Nn(t,e.dtype)),Nn(Fr(e,t),"float32")}const fd=rd,md=ad,gd={binaryAccuracy:cd,categoricalAccuracy:hd,precision:function(e,t){return zn((()=>{const n=function(e,t){return zn((()=>Nn(ta(Ra(Fr(e,1),Fr(t,1))),"float32")))}(e,t),s=function(e,t){return zn((()=>Nn(ta(Ra(Fr(e,0),Fr(t,1))),"float32")))}(e,t),r=ks(n,s);return Nn(Dr(da(r,0),ws(n,r),0),"float32")}))},categoricalCrossentropy:fd,sparseCategoricalCrossentropy:md,mse:td,MSE:td,mae:nd,MAE:nd,mape:sd,MAPE:sd,cosine:od};function yd(e){if("string"==typeof e&&e in gd)return gd[e];if("string"!=typeof e&&null!=e)return e;throw new Ac(`Unknown metric ${e}`)}function bd(e){if(Oc(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(ld))if(ld[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(gd))if(gd[n]===e){t=n;break}return void 0!==t?t:e.name}}function xd(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!kd(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function kd(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!kd(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!kd(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function vd(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const r in e.nodesByDepth)n.push(e.nodesByDepth[r]);for(const r of n){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of e.layers){let e=!1;for(const n of r.inboundNodes)if(-1!==s.indexOf(n)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),wd(a,n,s),s("=".repeat(t));const o=e.layers;for(let c=0;c<o.length;++c)r?Id(o[c],n,s):Nd(o[c],n,i,s),s((c===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?pp(e.collectedTrainableWeights):pp(e.trainableWeights);return t}(e),u=pp(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function wd(e,t,n=console.log){let s="";for(let r=0;r<e.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=e[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);n(s)}function Id(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(hR){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(hR){s="multiple"}wd([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function Nd(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(hR){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(hR){r="multiple"}const i=[];for(const c of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(c)))for(let e=0;e<c.inboundLayers.length;++e){const t=c.inboundLayers[e].name,n=c.nodeIndices[e],s=c.tensorIndices[e];i.push(`${t}[${n}][${s}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];wd([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let c=1;c<i.length;++c)wd(["","","","",i[c]],t,s)}function Sd(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Td(e,t){if(null===e)return null;if("string"==typeof e)return Bc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Sd(t,r,s)?n.push(s):n.push(Td(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Bc(n);t[e]=Td(s,e)}}return t}}function $d(e,t){if(null==e)return null;if("string"==typeof e)return Pc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Sd(t,r,s)?n.push(s):n.push($d(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=Pc(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?$d(s,n):s}return t}}class Cd extends vp{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=nh(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],jc(this.inputs).length!==this.inputs.length)throw new Ac(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);jc(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const y of this.outputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(t),this.outputLayersTensorIndices.push(n)}for(const y of this.inputs){const e=y.sourceLayer,t=y.nodeIndex,n=y.tensorIndex;Oc(0===t,"input layer has >1 nodes"),Oc(0===n,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(t),this.inputLayersTensorIndices.push(n)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let y=0;y<this.inputLayers.length;y++){const t=this.inputLayers[y];if(!(t instanceof Ip))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${y} (0-based) originates from layer type ${t.getClassName()}.`);this.inputNames.push(t.name),this.feedInputShapes.push(t.batchInputShape),this.feedInputNames.push(t.name)}for(const y of this.outputLayers)this.outputNames.push(y.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Ec(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Cd.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let a=0;a<c;a++){const e=u.inputTensors[a],s=u.inboundLayers[a],r=u.nodeIndices[a],i=u.tensorIndices[a];o(e,t,n,s,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const y of this.outputs)o(y,l,u);const c=i.slice().reverse();for(const y of c){n[y.id]=y,y.id in t||(t[y.id]=0);let e=t[y.id];const a=null==s[y.outboundLayer.id]?0:s[y.outboundLayer.id];e=Math.max(e,a),s[y.outboundLayer.id]=e,r[y.outboundLayer.id]=y.outboundLayer,t[y.id]=e;for(let s=0;s<y.inboundLayers.length;s++){const r=y.inboundLayers[s],a=y.nodeIndices[s],i=r.inboundNodes[a],o=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(e+1,o),n[i.id]=i}}const h={};for(const y in t){const e=t[y];e in h||(h[e]=[]),h[e].push(n[y])}const p={};for(const y in s){const e=s[y];e in p||(p[e]=[]),p[e].push(r[y])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Hc);this.layers=[];for(const y of d){const e=p[y];e.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const t of e)t instanceof Cd&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Hc);const f=this.inputs.slice(),m=[];for(const y of d)for(const e of h[y]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Ec(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const y of g){const e=g.filter((e=>e===y)).length;if(1!==e)throw new Ec(`The name "${y}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new xp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Ac("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const a of this.layers)for(const e of a.weights){if(null!=n[e.originalName])throw new Ac(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,s++}const r=[];for(const a in e){let s=a;if(null==n[a]){const e=a.split("/");s=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[s])r.push([n[s],e[a]]);else if(t)throw new Ac(`Provided weight data has no target variable: ${a}`);delete n[s]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Ac(`${e.length} of ${s} weights are not set: ${e}`)}mp(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.18.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=$d(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return zn((()=>{e=zc(e);const n=new Np;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return $p(this.outputs,n,t)}))}computeMask(e,t){return zn((()=>{let n;return e=zc(e),n=null==t?Dc(null,e.length):zc(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=up(e);if(t.length!==this.inputLayers.length)throw new Ac(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let i=0;i<t.length;i++){const e=this.inputLayers[i],s=t[i];n[e.name+"_0_0"]=s}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Hc);if(s.length>1)for(const i of s){const e=this.nodesByDepth[i];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(e.id))continue;const s=[];for(let i=0;i<t.inboundLayers.length;i++){const e=t.inboundLayers[i],r=t.nodeIndices[i],a=t.tensorIndices[i],o=n[`${e.name}_${r}_${a}`];s.push(o)}const r=up(e.computeOutputShape(Lc(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++){n[`${e.name}_${a}_${t}`]=r[t]}}}const r=[],a=[];for(let i=0;i<this.outputLayers.length;i++){const e=this.outputLayers[i],t=this.outputLayersNodeIndices[i],n=this.outputLayersTensorIndices[i],s=`${e.name}_${t}_${n}`;a.push(s)}for(let i=0;i<a.length;i++){const e=a[i];Oc(e in n),r.push(n[e])}return Lc(r)}runInternalGraph(e,t){null==t&&(t=Dc(null,e.length));const n={};for(let o=0;o<this.inputs.length;++o){const s=this.inputs[o],r=e[o],a=t[o];n[s.id]=[r,a]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Hc);for(const o of s){const e=this.nodesByDepth[o];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=zc(e.call(t,u)),l=zc(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=zc(e.call(s,u)),l=zc(e.computeMask(s,i));if(e.activityRegularizer)throw new Rc("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const o of this.outputs){Oc(o.id in n,`Could not compute output ${o.name} : ${o.id}`);const[e,t]=n[o.id];i.push(e.shape),r.push(e),a.push(t)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const s of this.layers){n=s instanceof Cd?1:0;for(let e=0;e<s.inboundNodes.length;e++){const r=Cd.nodeKey(s,e);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Ac(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Ac("Provide either a layer name or layer index");for(const n of this.layers)if(n.name===e)return n;throw new Ac(`No such layer: ${e}`)}calculateLosses(){return zn((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Cd.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const a of this.layers){const e=a.getClassName(),s=a.getConfig(),r=[];for(let n=0;n<a.inboundNodes.length;n++){const e=a.inboundNodes[n],s=Cd.nodeKey(a,n);let i={};if(this.containerNodes.has(s)){if(e.callArgs)try{JSON.stringify(e.callArgs),i=e.callArgs}catch(hR){console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${e.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(e.inboundLayers.length>0){const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],a=e.nodeIndices[s],o=e.tensorIndices[s];let l=t[Cd.nodeKey(r,a)];null==l&&(l=0),n.push([r.name,l,o,i])}r.push(n)}}}const i={};i.name=a.name,i.className=e,i.config=s,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let a=0;a<this.inputLayers.length;a++){const e=this.inputLayers[a],n=this.inputLayersNodeIndices[a],r=Cd.nodeKey(e,n);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[a];s.push([e.name,i,o])}e.inputLayers=s;const r=[];for(let a=0;a<this.outputLayers.length;a++){const e=this.outputLayers[a],n=this.outputLayersNodeIndices[a],s=Cd.nodeKey(e,n);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);const o=this.outputLayersTensorIndices[a];r.push([e.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Lc(n),s)}function l(e){const n=e.name,a=Qp(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Ac(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const m of c)l(m);for(;!qc(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const m of d){const e=m[0],t=m[1],n=m[2];Oc(e in r);const s=r[e].inboundNodes[t].outputTensors;h.push(s[n])}const f=t.outputLayers;for(const m of f){const e=m[0],t=m[1],n=m[2];Oc(e in r);const s=r[e].inboundNodes[t].outputTensors;p.push(s[n])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Ac("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){zn((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Ed(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}function Ad(e,n,s,r){return t(this,null,(function*(){if(null!=n||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=s){const t=zn((()=>{if(1===e.shape.length)return Sn(e);if(2===e.shape.length){if(e.shape[1]>1){return As(e,1)}if(1===e.shape[1])return Zs(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),n=Array.from(yield t.data());Pn(t);const r=[];return n.forEach((e=>{if(null==s[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(s[e])})),Zi(r,"float32")}return null}))}function Rd(e,t){return Is(e,t)}function _d(e,t){let n,s;const r=t;n=r.xs,s=r.ys,h(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Fd("input",e.inputNames,n),i=Fd("output",e.outputNames,s),o=a[0].shape[0];h(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),h(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let l=0;l<a.length;l++)h(a[l].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[l]} has ${a[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let l=0;l<i.length;l++)h(i[l].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[l]} has ${i[l].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Fd(e,t,n){if(n instanceof it)return[n];if(Array.isArray(n))return h(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Ac(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function Dd(e,n,s){return t(this,null,(function*(){const t=null!=s.batchesPerEpoch;if(h(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),h(null!=s,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),h(null!=s.epochs&&s.epochs>0&&Number.isInteger(s.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${s.epochs}`)),h(!t||s.batchesPerEpoch>0&&Number.isInteger(s.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${s.batchesPerEpoch}`)),h(null==s.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=s.validationData;let a,i;if(r)if(Od(s.validationData))h(null==s.validationBatches||s.validationBatches>0&&Number.isInteger(s.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${s.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Rc("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(s.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=Yp(s.callbacks,s.yieldEvery),p=null==s.verbose?1:s.verbose,{callbackList:d,history:f}=Jp(c,p,s.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(n,s),null,r,u);d.setModel(e),e.history=f,yield d.onTrainBegin(),e.stopTraining_=!1;let m=null==s.initialEpoch?0:s.initialEpoch,g=yield n.iterator();for(;m<s.epochs;){const u={};yield d.onEpochBegin(m);let c=0,h=0;for(t||(g=yield n.iterator());!t||c<s.batchesPerEpoch;){const n=yield g.next();if(t&&n.done){console.warn(`You provided \`batchesPerEpoch\` as ${s.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${s.batchesPerEpoch*s.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=n.value){const{xs:t,ys:r}=_d(e,n.value),a={};a.batch=h,a.size=t[0].shape[0],yield d.onBatchBegin(h,a);const i=[];if(null!=s.classWeight){const t=Ed(s.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(yield Ad(r[e],null,t[e]))}const u=t.concat(r).concat(i),p=o(u);Pn(u);for(let e=0;e<l.length;++e){const t=l[e],n=p[e];a[t]=n,Bn(n)}yield d.onBatchEnd(h,a),Vp(a),h++,c++}if(t?c>=s.batchesPerEpoch:n.done){if(r){let t;t=Od(s.validationData)?zc(yield e.evaluateDataset(s.validationData,{batches:s.validationBatches})):zc(e.evaluate(a,i,{batchSize:null==s.validationBatchSize?32:s.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(yield d.onEpochEnd(m,u),m++,e.stopTraining_)break}return yield d.onTrainEnd(),yield e.history.syncData(),e.history}finally{e.isTraining=!1}}))}function Od(e){return"function"==typeof e.iterator}function Md(e){h(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Ld(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Th(e,t,n-t))):Th(e,t,n-t)}function zd(e,t){return zn((()=>null==e?null:Array.isArray(e)?e.map((e=>zd(e,t))):Dh(e,"int32"===t.dtype?t:Nn(t,"int32"))))}function Pd(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Bd(e,n,s,r,a,i,l,u,c,h,p,d,f,m,g){return t(this,null,(function*(){null==a&&(a=32),null==i&&(i=1),null==p&&(p=!0),null==f&&(f=0);let t=!1;if(null!=c&&null!=h&&(t=!0),null!=g&&(t=!0,null==m))throw new Ac("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=e.checkNumSamples(s,a,m,"steps_per_epoch");let b;null!=y&&(b=vh(0,y)),null==l&&(l=1);const{callbackList:x,history:k}=Jp(u,l,i,f,y,m,a,t,d);x.setModel(e),e.history=k,yield x.onTrainBegin(),e.stopTraining_=!1;for(let l=f;l<i;++l){yield x.onEpochBegin(l);const i={};if(null!=m)throw new Rc("stepsPerEpoch mode is not implemented yet.");{if("batch"===p)throw new Rc("batch shuffling is not implemneted yet");p&&o(b);const l=Zi(b),u=Pd(y,a);for(let o=0;o<u.length;++o){const p={};if(yield x.onBatchBegin(o,p),zn((()=>{const d=u[o][0],f=u[o][1],m=Th(l,d,f-d);p.batch=o,p.size=f-d;const g=zd(s,m),y=n(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];p[t]=n,Bn(n)}if(o===u.length-1&&t){const t=e.testLoop(c,h,a);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];Bn(s),i["val_"+n]=s}}})),yield x.onBatchEnd(o,p),Vp(p),e.stopTraining_)break}l.dispose()}if(yield x.onEpochEnd(l,i),e.stopTraining_)break}return yield x.onTrainEnd(),yield e.history.syncData(),e.history}))}function Wd(e){const t=[];e instanceof it&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Sh(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Vd(e,t){if(null==e)return;const n=[];if(t instanceof it)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const r in t){const e=t[r];n.push(e.id)}const s=[];if(e instanceof it)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const r in e){const t=e[r];-1===n.indexOf(t.id)&&s.push(t)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function Ud(e){return Array.isArray(e)}function Gd(e){return!function(e){return e instanceof it}(e)&&!Ud(e)}function Hd(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Ud(e)&&e.length>0)t=!0;else if(Gd(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Ac(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Gd(e)){a=[];for(const n of t){if(null==e[n])throw new Ac(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Ud(e)){if(e.length!==t.length)throw new Ac(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new Ac(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Wd(a),null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Ac(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s). but got array with shape ${e.shape}`);for(let t=0;t<n[i].length;++t){if(0===t&&!s)continue;const a=e.shape[t],o=n[i][t];if(null!=o&&o>=0&&a!==o)throw new Ac(`${r} expected a batch of elements where each example has shape [${n[i].slice(1,n[i].length)}] (i.e.,tensor shape [*,${n[i].slice(1,n[i].length)}]) but the ${r} received an input with ${e.shape[0]} examples, each with shape [${e.shape.slice(1,e.shape.length)}] (tensor shape [${e.shape}])`)}}return a}function jd(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Ac(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Ac(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let i=0;i<t.length;++i){if(null==n[i])continue;const e=a[i];if(e.shape.length!==n[i].length)throw new Ac(`Error when checking ${r}: expected ${t[i]} to have ${n[i].length} dimension(s), but got array with shape ${JSON.stringify(e.shape)}`);for(let a=0;a<n[i].length;++a){if(0===a&&!s)continue;const o=e.shape[a],l=n[i][a];if(null!=l&&l!==o)throw new Ac(`Error when checking ${r}: expected ${t[i]} to have shape ${JSON.stringify(n[i])} but got array with shape ${JSON.stringify(e.shape)}.`)}}}class qd extends Cd{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Ac("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");vd(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>wl.adagrad(.01),Adadelta:()=>wl.adadelta(1,.95,Ih()),Adam:()=>wl.adam(.001,.9,.999,Ih()),Adamax:()=>wl.adamax(.002,.9,.999,Ih(),0),RMSProp:()=>wl.rmsprop(.001,.9,0,Ih()),SGD:()=>wl.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Ac(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof dl))throw new Ac("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Ac(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>ud(e)))}else{const n=ud(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Ac(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(ud(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let a=0;a<this.outputs.length;++a){const e=this.internalOutputShapes[a],t=this.outputNames[a];this.feedOutputNames.push(t),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[a])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],dh("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};dh("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===id?-1!==["accuracy","acc"].indexOf(i)?s=cd:-1!==["crossentropy","ce"].indexOf(i)&&(s=pd):this.lossFunctions[e]===ad?-1!==["accuracy","acc"].indexOf(i)?s=dd:-1!==["crossentropy","ce"].indexOf(i)&&(s=md):-1!==["accuracy","acc"].indexOf(i)?s=hd:-1!==["crossentropy","ce"].indexOf(i)&&(s=fd),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=yd(i);a=e,n=""+bd(i)}let t;dh(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Md(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return Lc(this.testLoop(i,a,s,n.verbose,n.steps))}finally{Vd(r[0],e),Vd(r[1],t)}}evaluateDataset(e,n){return t(this,null,(function*(){return this.makeTestFunction(),function(e,n,s){return t(this,null,(function*(){const t=null!=(s=s||{}).batches,r=e.testFunction;let a=[];if(s.verbose>0)throw new Rc("Verbose mode is not implemented yet.");h(!t||s.batches>0&&Number.isInteger(s.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(s.batches)}`));const i="function"==typeof n.next?n:yield n.iterator();let o=0,l=0;for(;!t||l<s.batches;){const n=yield i.next();if(a=zn((()=>{if(n.value){const{xs:t,ys:s}=_d(e,n.value),i=t.concat(s),u=zn((()=>r(i)));if(Pn(i),0===l)for(let e=0;e<u.length;++e)a.push(Jr(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=zn((()=>ks(a[e],Is(c,t)))),l>0&&Pn(n)}Pn(u),o+=c,++l}return a})),n.done){t&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${s.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=ws(a[e],o),Pn(t)}return Lc(a)}))}(this,e,n)}))}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Ac(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Ac(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Ac("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Np;if(e instanceof it&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Ac(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const o of this.inputs){const t=e[o.name];if(null==t)throw new Ac(`No value is provided for the model's input ${o.name}`);a.add(o,t)}const i=$p(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Dc(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Ac(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return zn((()=>{const s=this.checkNumSamples(e);if(n)throw new Rc("Verbose predictLoop() is not implemented yet.");const r=Pd(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){zn((()=>{const n=r[t][0],s=r[t][1],a=Ld(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Np(i);return $p(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return Lc(a.map((e=>er(e,0))))}))}predict(e,t={}){const n=Wd(e);jd(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Md(s),this.predictLoop(n,s)}finally{Vd(n,e)}}predictOnBatch(e){jd(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Ec("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let a=0;a<this.feedOutputShapes.length;++a){const e=this.feedOutputShapes[a];this.feedLossFns[a]===ad?r.push(e.slice(0,e.length-1).concat([1])):r.push(e)}if(function(e,t,n){const s=jc(e.map((e=>e.shape[0])));s.sort();const r=jc(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Ac(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Ac(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!g(s,r))throw new Ac(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Hd(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Hd(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[td,id,rd];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===rd&&1===a.shape[a.shape.length-1])throw new Ac(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Ac(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Ac(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}standardizeUserData(e,n,s,r,a=!0,i){return t(this,null,(function*(){const[t,o]=this.standardizeUserDataXY(e,n,a,i);if(null!=s)throw new Error("sample weight is not supported yet.");let l=null;if(null!=r){const e=Ed(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(yield Ad(o[t],null,e[t]))}return[t,o,l]}))}testLoop(e,t,n,s=0,r){return zn((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Rc("Verbose mode is not implemented yet.");if(null!=r)throw new Rc("steps mode in testLoop() is not implemented yet");{const s=Pd(a,n),r=Zi(vh(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Th(r,a,o-a),u=zd(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Jr(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=ks(i[e],Is(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=ws(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(Mc(e,s)>1){r+=`_${Mc(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Np(e),o=$p(this.outputs,i,{training:!0});let l;for(let n=0;n<this.lossFunctions.length;++n){let e=(0,this.lossFunctions[n])(s[n],o[n]);null!=r[n]&&(e=Rd(e,r[n]));const a=Wa(e);t.push(a),l=0===n?e:ks(l,e)}for(let n=0;n<this.metricsTensors.length;++n){let e;if(this.outputs.length>1&&n<this.outputs.length)e=t[n];else{const t=this.metricsTensors[n][0],r=this.metricsTensors[n][1];e=Wa(t(s[r],o[r]))}Bn(e),a.push(e)}return l=Wa(l),this.calculateLosses().forEach((e=>{l=ks(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>zn((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Np(a),o=$p(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Wa(s(r[e],o[e]));n=0===e?a:ks(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Wa(n(r[s],o[s]));t.push(a)}return t}))}fit(e,n){return t(this,arguments,(function*(e,n,s={}){return function(e,n,s){return t(this,arguments,(function*(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c,h,p;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;Md(d);const f=!1,m=yield e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,f,d);r=m[0],a=m[1],p=m[2];let g,y=!1;if(null!=s.validationData&&s.validationData.length>0){if(y=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Rc("validationData including sample weights is not supported yet."):new Ac(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);l=s.validationData[0],u=s.validationData[1];const t=!0,n=yield e.standardizeUserData(l,u,null,null,t,d);c=n[0],h=n[1],g=c.concat(h)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){y=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];c=Ld(r,e,t),i=r,r=Ld(r,0,e),h=Ld(a,e,t),o=a,a=Ld(a,0,e),g=c.concat(h)}else null!=s.validationSteps&&(y=!0);const b=r.concat(a).concat(p);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),k=e.getDedupedMetricsNames();let v,w;y?(e.makeTestFunction(),v=e.testFunction,w=k.slice().concat(k.map((e=>"val_"+e)))):(v=null,g=[],w=k.slice());const I=Yp(s.callbacks,s.yieldEvery);return yield Bd(e,x,b,k,d,s.epochs,s.verbose,I,v,g,s.shuffle,w,s.initialEpoch,null,null)}finally{e.isTraining=!1,Vd(r,t),Vd(a,n),Vd(i,t),Vd(o,n),Vd(c,l),Vd(h,u),null!=p&&Pn(p)}}))}(this,e,n,s)}))}fitDataset(e,n){return t(this,null,(function*(){return Dd(this,e,n)}))}trainOnBatch(e,n){return t(this,null,(function*(){const t=yield this.standardizeUserData(e,n),s=t[0],r=t[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=yield e.data();i.push(t[0])}return Pn(a),Vd(t[0],e),Vd(t[1],n),Lc(i)}))}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let a=0;a<s.length;++a)n&&!s[a].trainable||t.push({name:s[a].originalName,tensor:r[a]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Ln().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Ln().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Pc(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Pc(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Pc(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Pc(bd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Pc(bd(e))));{const e={};for(const t in this.metrics)e[t]=Pc(bd(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Qp(Td(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Bc(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Bc(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Bc(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>Bc(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Bc(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}save(e,n){return t(this,null,(function*(){if("string"==typeof e){const t=Qt(e);if(0===t.length)throw new Ac(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Ac(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Ac("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const t=yield Gt(this.getNamedWeights(n)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.18.0",convertedBy:null};if(null!=n&&n.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:n,specs:r}=yield Gt(yield this.optimizer.getWeights(),e);t.specs.push(...r),t.data=Kt([t.data,n])}if(null!=this.userDefinedMetadata){const e=!0;xd(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=t.data,s.weightSpecs=t.specs,e.save(s)}))}setUserDefinedMetadata(e){xd(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}qd.className="Model",xs(qd);class Kd extends qd{}Kd.className="Functional",xs(Kd);class Xd extends qd{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:nh("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Ac(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Xd||e instanceof qd;let n;if(t){if(n=e,1!==n.outputs.length)throw new Ac("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Ac("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Ac("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Ac("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Ip({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Ac(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Ac("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=wp(this.outputs[0])}this.inboundNodes=[],new xp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Dc(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(hp(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new qd({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Ec("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}evaluateDataset(e,n){return t(this,null,(function*(){if(!this.built)throw new Ec("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,n)}))}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,n){return t(this,arguments,(function*(e,t,n={}){if(!this.built)throw new Ec("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}))}fitDataset(e,n){return t(this,null,(function*(){if(!this.built)throw new Ec("The model needs to be compiled before being used.");return this.model.fitDataset(e,n)}))}trainOnBatch(e,n){return t(this,null,(function*(){return this.model.trainOnBatch(e,n)}))}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Ac("Legacy serialization format not supported yet.");r=t}else h(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Xd))throw new Rc(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const o of r){const e=Qp(o,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(e){if(null==this.model)throw new Ac("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Ac("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Xd.className="Sequential",xs(Xd);class Yd extends ys{getConfig(){return{}}}class Zd extends Yd{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Rc(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Pr(e)}(e,t)}}Zd.className="elu",xs(Zd);class Jd extends Yd{apply(e){return Ei(e)}}Jd.className="selu",xs(Jd);class Qd extends Yd{apply(e){return Ni(e)}}Qd.className="relu",xs(Qd);class ef extends Yd{apply(e){return zn((()=>Ga(6,Ni(e))))}}ef.className="relu6",xs(ef);class tf extends Yd{apply(e){return e}}tf.className="linear",xs(tf);class nf extends Yd{apply(e){return tr(e)}}nf.className="sigmoid",xs(nf);class sf extends Yd{apply(e){return function(e){return zn((()=>{const t=ks(.5,Is(.2,e));return dr(t,0,1)}))}(e)}}sf.className="hardSigmoid",xs(sf);class rf extends Yd{apply(e){return Ta(e)}}rf.className="softplus",xs(rf);class af extends Yd{apply(e){return function(e){return zn((()=>ws(e,ks(Ns(e),1))))}(e)}}af.className="softsign",xs(af);class of extends Yd{apply(e){return sr(e)}}of.className="tanh",xs(of);class lf extends Yd{apply(e,t=-1){return Pi(e,t)}}lf.className="softmax",xs(lf);class uf extends Yd{apply(e,t=-1){return Ea(e,t)}}uf.className="logSoftmax",xs(uf);class cf extends Yd{apply(e,t=1){return zn((()=>Is(tr(Is(e,t)),e)))}}cf.className="swish",xs(cf);class hf extends Yd{apply(e){return zn((()=>Is(e,sr(Ta(e)))))}}function pf(e){return e.getClassName()}function df(e,t={}){return Gc(e,bs.getMap().classNameMap,t,"activation")}function ff(e){if(null==e){const e={className:"linear",config:{}};return df(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},df(t)}return e instanceof Yd?e:df(e)}hf.className="mish",xs(hf);class mf extends ys{}class gf extends mf{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return zn((()=>{let t=Va([1]);return this.hasL1&&(t=ks(t,ta(Is(this.l1,Ns(e))))),this.hasL2&&(t=ks(t,ta(Is(this.l2,Oh(e))))),Zs(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}gf.className="L1L2",xs(gf);const yf={l1l2:"L1L2"};function bf(e){return Vc(e)}function xf(e,t={}){return Gc(e,bs.getMap().classNameMap,t,"regularizer")}function kf(e){if(null==e)return null;if("string"==typeof e){return xf({className:e in yf?yf[e]:e,config:{}})}return e instanceof mf?e:xf(e)}class vf extends vp{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=cp(e);let n=Ni(e);return null!=this.maxValue&&(n=dr(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}vf.className="ReLU",xs(vf);class wf extends vp{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=cp(e);return ba(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}wf.className="LeakyReLU",xs(wf);class If extends vp{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=op(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=kf(e.alphaRegularizer),this.alphaConstraint=Bp(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Ac(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=hp(e)).slice(1);if(null!=this.sharedAxes)for(const s of this.sharedAxes)t[s-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let s=1;s<e.length;++s)n[s]=e[s];this.inputSpec=[new gp({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=cp(e),ei(e,this.alpha.read())}getConfig(){const e={alphaInitializer:ip(this.alphaInitializer),alphaRegularizer:bf(this.alphaRegularizer),alphaConstraint:zp(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}If.className="PReLU",xs(If);class Nf extends vp{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Rc(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=cp(e);return Pr(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Nf.className="ELU",xs(Nf);class Sf extends vp{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=cp(e);return Is(n,Nn(da(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Sf.className="ThresholdedReLU",xs(Sf);class Tf extends vp{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new lf).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=cp(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function $f(e,t,n){if("number"==typeof e)return Dc(e,t);if(e.length!==t)throw new Ac(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Ac(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Cf(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Ef(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+kh([n-t,0]);else{if("same"!==s)throw new Ac(`Unsupport padding mode: ${s}.`);e*=t}return e}function Af(e,t){return zn((()=>(uh(t),"channelsFirst"===t?Hn(e,[0,2,3,1]):e)))}function Rf(e,t){return zn((()=>(uh(t),"channelsFirst"===t?Hn(e,[0,2,3,4,1]):e)))}function _f(e,t,n,s=[1,1],r="valid",a,i,o=null){return zn((()=>{if(null==a&&(a="channelsLast"),uh(a),3!==e.rank&&4!==e.rank)throw new Ac(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Ac(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Af(e,a);if("causal"===r)throw new Rc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=bo({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Hn(l,[0,3,1,2])),l}))}Tf.className="Softmax",xs(Tf);class Ff extends vp{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Ff.verifyArgs(t),this.rank=e,Yc(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Rc(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=$f(t.kernelSize,e,"kernelSize"),this.strides=$f(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,ch(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,uh(this.dataFormat),this.activation=ff(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=op(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Bp(t.biasConstraint),this.biasRegularizer=kf(t.biasRegularizer),this.activityRegularizer=kf(t.activityRegularizer),this.dilationRate=$f(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Ac(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Ac(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Ac(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Oc("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Xc(e.kernelSize,"number",1,3))throw new Ac(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:pf(this.activation),useBias:this.useBias,biasInitializer:ip(this.biasInitializer),biasRegularizer:bf(this.biasRegularizer),activityRegularizer:bf(this.activityRegularizer),biasConstraint:zp(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Df extends Ff{constructor(e,t){super(e,t),this.kernel=null,Df.verifyArgs(t),this.filters=t.filters,Yc(this.filters,"filters"),this.kernelInitializer=op(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Bp(t.kernelConstraint),this.kernelRegularizer=kf(t.kernelRegularizer)}build(e){e=hp(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ac(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return zn((()=>{let t;e=cp(e);const n=null==this.bias?null:this.bias.read(),s=Jc(this.activation.getClassName());if(null!=s&&2===this.rank)t=_f(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return zn((()=>{if(null==a&&(a="channelsLast"),uh(a),3!==e.shape.length)throw new Ac(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Ac(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Ac(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=Hn(e,[0,2,1])),"causal"===r)throw new Rc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=xr(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Lh(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=_f(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Rc("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return zn((()=>{if(null==a&&(a="channelsLast"),uh(a),4!==e.rank&&5!==e.rank)throw new Ac(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Ac(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Rf(e,a);if("causal"===r)throw new Rc("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=wr(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Lh(o,n)),"channelsFirst"===a&&(o=Hn(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=hp(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let r=0;r<n.length;++r){const e=Cf(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);t.push(e)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:ip(this.kernelInitializer),kernelRegularizer:bf(this.kernelRegularizer),kernelConstraint:zp(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Ac(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Of extends Df{constructor(e){super(2,e),Of.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Xc(e.kernelSize,"number",1,2))throw new Ac(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Of.className="Conv2D",xs(Of);class Mf extends Df{constructor(e){super(3,e),Mf.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Ac(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Mf.className="Conv3D",xs(Mf);class Lf extends Of{constructor(e){if(super(e),this.inputSpec=[new gp({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Ac(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=hp(e)).length)throw new Ac("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ac("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new gp({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return zn((()=>{let t=cp(e);if(4!==t.shape.length)throw new Ac(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Ef(i,c,l,this.padding),Ef(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Hn(t,[0,2,3,1]));let d=vr(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Hn(d,[0,3,1,2])),null!=this.bias&&(d=Lh(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=hp(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Ef(t[s],o,a,this.padding),t[r]=Ef(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Lf.className="Conv2DTranspose",xs(Lf);class zf extends Mf{constructor(e){if(super(e),this.inputSpec=[new gp({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Ac(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=hp(e)).length)throw new Ac("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ac("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new gp({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return zn((()=>{let t=cp(e);if(5!==t.shape.length)throw new Ac(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,Ef(o,d,c,this.padding),Ef(l,f,h,this.padding),Ef(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Hn(t,[0,2,3,4,1]));let y=Nr(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Hn(y,[0,4,1,2,3])),null!==this.bias&&(y=Lh(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=hp(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Ef(t[s],u,i,this.padding),t[r]=Ef(t[r],c,o,this.padding),t[a]=Ef(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}zf.className="Conv3DTranspose",xs(zf);class Pf extends Df{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Ac("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Ac("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Ac(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=op(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=kf(t.depthwiseRegularizer),this.depthwiseConstraint=Bp(t.depthwiseConstraint),this.pointwiseInitializer=op(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=kf(t.pointwiseRegularizer),this.pointwiseConstraint=Bp(t.pointwiseConstraint)}build(e){if((e=hp(e)).length<this.rank+2)throw new Ac(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Ac(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let i=0;i<this.rank;++i)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new gp({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return zn((()=>{let t;if(e=cp(e),1===this.rank)throw new Rc("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Hn(e,[0,2,3,1])),t=Ai(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Lh(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Hn(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=ip(this.depthwiseInitializer),e.pointwiseInitializer=ip(this.pointwiseInitializer),e.depthwiseRegularizer=bf(this.depthwiseRegularizer),e.pointwiseRegularizer=bf(this.pointwiseRegularizer),e.depthwiseConstraint=zp(this.depthwiseConstraint),e.pointwiseConstraint=zp(this.pointwiseConstraint),e}}Pf.className="SeparableConv";class Bf extends Pf{constructor(e){super(2,e)}}Bf.className="SeparableConv2D",xs(Bf);class Wf extends Df{constructor(e){super(1,e),Wf.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Xc(e.kernelSize,"number",1,1))throw new Ac(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Wf.className="Conv1D",xs(Wf);class Vf extends vp{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return zn((()=>{if(e=cp(e),"channelsLast"===this.dataFormat){const t=Ch(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Ch(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Ch(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Ch(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Vf.className="Cropping2D",xs(Vf);class Uf extends vp{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,uh(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Kc(rh,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return zn((()=>{let t=cp(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Hn(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?ul.resizeNearestNeighbor(t,[e,s]):ul.resizeBilinear(t,[e,s]);return Hn(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?ul.resizeNearestNeighbor(t,[e,s]):ul.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Uf.className="UpSampling2D",xs(Uf);class Gf extends Ff{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=op(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Bp(e.depthwiseConstraint),this.depthwiseRegularizer=kf(e.depthwiseRegularizer)}build(e){if((e=hp(e)).length<4)throw new Ac(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Ac(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return zn((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return zn((()=>{null==r&&(r="channelsLast"),uh(r);let i=Af(e,r);if(4!==e.rank)throw new Ac(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Ac(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Rr(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Hn(i,[0,3,1,2])),i}))}(e=cp(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Lh(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=hp(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Cf(t,this.kernelSize[0],this.padding,this.strides[0]),a=Cf(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=ip(this.depthwiseInitializer),e.depthwiseRegularizer=bf(this.depthwiseRegularizer),e.depthwiseConstraint=zp(this.depthwiseRegularizer),e}}function Hf(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Ac("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function jf(e,t,n,s=!1,r,a,i=!1,o=!1){return zn((()=>{const l=t.shape.length;if(l<3)throw new Ac(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(vh(2,l));if(t=Hn(t,u),null!=a)throw new Rc("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=Nn(Nn(r,"bool"),"float32")).rank===l-1&&(r=ia(r,-1)),r=Hn(r,u)),s&&(t=Ti(t,0),null!=r&&(r=Ti(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=so(t);let m,g;null!=r&&(m=so(r));for(let t=0;t<d;++t){const n=f[t],s=zn((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=zn((()=>{const e=m[t],n=Ca(Ya(e),e);return{output:ks(Is(s[0],e),Is(p[0],n)),newStates:p.map(((t,r)=>ks(Is(s[1][r],e),Is(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=qi(c,1)}return[h,g,p]}))}Gf.className="DepthwiseConv2D",xs(Gf);class qf extends vp{constructor(e){let t;if(super(e),null==e.cell)throw new Ac("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new tm({cells:e.cell}):e.cell,null==t.stateSize)throw new Ac("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new gp({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return vh(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){lp(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return zn((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Rc("Constants support is not implemented in RNN yet.");lp(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new gp({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!g(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Ac(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new gp({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){zn((()=>{if(!this.stateful)throw new Cc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Ac("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Va([n,e]))):this.states_=[Va([n,this.cell.stateSize])];else if(null==e)Pn(this.states_),null!=this.keptStates&&(Pn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Va([n,e]))):this.states_[0]=Va([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ac(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Pn(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!g(s.shape,a))throw new Ac(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>Bn(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Hf(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new gp({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof yp){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return zn((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=cp(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Ac(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=jf(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return zn((()=>{let t=Va(e.shape);return t=ta(t,[1,2]),t=Sh(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Rh(t,[1,e]):t)):this.cell.stateSize>1?[Rh(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===qf.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=Qp(t.cell,n);return new e(Object.assign(t,{cell:s}))}}qf.className="RNN",xs(qf);class Kf extends vp{}class Xf extends Kf{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Yc(this.units,"units"),this.activation=ff(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=op(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=op(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=op(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kf(e.kernelRegularizer),this.recurrentRegularizer=kf(e.recurrentRegularizer),this.biasRegularizer=kf(e.biasRegularizer),this.kernelConstraint=Bp(e.kernelConstraint),this.recurrentConstraint=Bp(e.recurrentConstraint),this.biasConstraint=Bp(e.biasConstraint),this.dropout=xh([1,kh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xh([1,kh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=hp(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return zn((()=>{if(2!==e.length)throw new Ac(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nm({ones:()=>Ya(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nm({ones:()=>Ya(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Fh(null!=a?Is(e,a):e,this.kernel.read()),null!=this.bias&&(r=Lh(r,this.bias.read())),null!=i&&(n=Is(n,i));let o=ks(r,Fh(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pf(this.activation),useBias:this.useBias,kernelInitializer:ip(this.kernelInitializer),recurrentInitializer:ip(this.recurrentInitializer),biasInitializer:ip(this.biasInitializer),kernelRegularizer:bf(this.kernelRegularizer),recurrentRegularizer:bf(this.recurrentRegularizer),biasRegularizer:bf(this.biasRegularizer),activityRegularizer:bf(this.activityRegularizer),kernelConstraint:zp(this.kernelConstraint),recurrentConstraint:zp(this.recurrentConstraint),biasConstraint:zp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Xf.className="SimpleRNNCell",xs(Xf);class Yf extends qf{constructor(e){e.cell=new Xf(e),super(e)}call(e,t){return zn((()=>{null!=this.cell.dropoutMask&&(Pn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Yf.className="SimpleRNN",xs(Yf);class Zf extends Kf{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Ac("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Yc(this.units,"units"),this.activation=ff(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ff(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=op(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=op(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=op(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=kf(e.kernelRegularizer),this.recurrentRegularizer=kf(e.recurrentRegularizer),this.biasRegularizer=kf(e.biasRegularizer),this.kernelConstraint=Bp(e.kernelConstraint),this.recurrentConstraint=Bp(e.recurrentConstraint),this.biasConstraint=Bp(e.biasConstraint),this.dropout=xh([1,kh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xh([1,kh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=hp(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return zn((()=>{if(2!==e.length)throw new Ac(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nm({ones:()=>Ya(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nm({ones:()=>Ya(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Is(e,r[0]));let u=Fh(e,this.kernel.read());this.useBias&&(u=Lh(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Is(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Ui(c,[2*this.units,this.units],c.rank-1),d=Fh(s,h),[f,m,g]=Ui(u,3,u.rank-1),[y,b]=Ui(d,2,d.rank-1);i=this.recurrentActivation.apply(ks(f,y)),o=this.recurrentActivation.apply(ks(m,b));const x=Fh(Is(o,s),p);l=this.activation.apply(ks(g,x));const k=ks(Is(i,s),Is(ks(1,Un(i)),l));return[k,k]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pf(this.activation),recurrentActivation:pf(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ip(this.kernelInitializer),recurrentInitializer:ip(this.recurrentInitializer),biasInitializer:ip(this.biasInitializer),kernelRegularizer:bf(this.kernelRegularizer),recurrentRegularizer:bf(this.recurrentRegularizer),biasRegularizer:bf(this.biasRegularizer),activityRegularizer:bf(this.activityRegularizer),kernelConstraint:zp(this.kernelConstraint),recurrentConstraint:zp(this.recurrentConstraint),biasConstraint:zp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Zf.className="GRUCell",xs(Zf);class Jf extends qf{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Zf(e),super(e)}call(e,t){return zn((()=>{null!=this.cell.dropoutMask&&(Pn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Jf.className="GRU",xs(Jf);class Qf extends Kf{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Yc(this.units,"units"),this.activation=ff(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=ff(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=op(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=op(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=op(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=kf(e.kernelRegularizer),this.recurrentRegularizer=kf(e.recurrentRegularizer),this.biasRegularizer=kf(e.biasRegularizer),this.kernelConstraint=Bp(e.kernelConstraint),this.recurrentConstraint=Bp(e.recurrentConstraint),this.biasConstraint=Bp(e.biasConstraint),this.dropout=xh([1,kh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=xh([1,kh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=hp(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Vh{apply(t,s){const r=e.apply([n]),a=(new Gh).apply([n]),i=e.apply([2*n]);return Ah(Ah(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return zn((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Ac(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nm({ones:()=>Ya(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nm({ones:()=>Ya(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Is(e,a[0]));let h=Fh(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Is(s,i[0])),h=ks(h,Fh(s,this.recurrentKernel.read())),this.useBias&&(h=Lh(h,this.bias.read()));const[p,d,f,m]=Ui(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=ks(Is(l,r),Is(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Is(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:pf(this.activation),recurrentActivation:pf(this.recurrentActivation),useBias:this.useBias,kernelInitializer:ip(this.kernelInitializer),recurrentInitializer:ip(this.recurrentInitializer),biasInitializer:ip(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:bf(this.kernelRegularizer),recurrentRegularizer:bf(this.recurrentRegularizer),biasRegularizer:bf(this.biasRegularizer),activityRegularizer:bf(this.activityRegularizer),kernelConstraint:zp(this.kernelConstraint),recurrentConstraint:zp(this.recurrentConstraint),biasConstraint:zp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Qf.className="LSTMCell",xs(Qf);class em extends qf{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Qf(e),super(e)}call(e,t){return zn((()=>{null!=this.cell.dropoutMask&&(Pn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}em.className="LSTM",xs(em);class tm extends Kf{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return zn((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;lp(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{dh(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const r of t.cells)s.push(Qp(r,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return fp(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}mp(t)}}function nm(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):zh(t(),n),o=()=>Ph(i,t,s);if(!r||r<=1)return Bn(o().clone());return Array(r).fill(void 0).map(o).map((e=>Bn(e.clone())))}tm.className="StackedRNNCells",xs(tm);var sm=globalThis&&globalThis.__rest||function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class rm extends qf{constructor(e){if(e.unroll)throw new Rc("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Rc("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new gp({ndim:5})]}call(e,t){return zn((()=>{if(null!=this.cell.dropoutMask&&(Pn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Pn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Ac("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return zn((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=Va([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){zn((()=>{if(!this.stateful)throw new Cc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Ac("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Va(r))):this.states_=[Va(r)];else if(null==e)Pn(this.states_),null!=this.keptStates&&(Pn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Va(r))):this.states_[0]=Va(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ac(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Pn(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!g(n.shape,s))throw new Ac(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>Bn(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Cf(l,s[0],r,a[0],i[0]),h=Cf(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}rm.className="ConvRNN2D";class am extends Qf{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Yc(this.filters,"filters"),this.kernelSize=$f(n,2,"kernelSize"),this.kernelSize.forEach((e=>Yc(e,"kernelSize"))),this.strides=$f(s||1,2,"strides"),this.strides.forEach((e=>Yc(e,"strides"))),this.padding=r||"valid",ch(this.padding),this.dataFormat=a||"channelsLast",uh(this.dataFormat),this.dilationRate=$f(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Yc(e,"dilationRate")))}build(e){var t;e=hp(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Ac(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Vh{apply(e,t){return Eh([n.apply([s]),Ua([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return zn((()=>{if(3!==e.length)throw new Ac(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=nm({ones:()=>Ya(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Is(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=nm({ones:()=>Ya(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,k]=Ui(this.kernel.read(),4,3),[v,w,I,N]=this.useBias?Ui(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,w,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,k,N,this.padding);const[S,T,$,C]=Ui(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,T),m=this.recurrentConv(m,$),g=this.recurrentConv(g,C);const E=this.recurrentActivation.apply(ks(l,d)),A=this.recurrentActivation.apply(ks(u,f)),R=ks(Is(A,a),Is(E,this.activation.apply(ks(c,m)))),_=Is(this.recurrentActivation.apply(ks(h,g)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),t=sm(e,["units"]),n={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},t,n)}inputConv(e,t,n,s){const r=br(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Lh(r,n,this.dataFormat):r}recurrentConv(e,t){return br(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}am.className="ConvLSTM2DCell",xs(am);class im extends rm{constructor(e){const t=new am(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}im.className="ConvLSTM2D",xs(im);class om extends vp{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let s=0;s<this.noiseShape.length;++s)n.push(null==this.noiseShape[s]?t[s]:this.noiseShape[s]);return n}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Ph((()=>zh(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}om.className="Dropout",xs(om);class lm extends om{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}lm.className="SpatialDropout1D",xs(lm);class um extends vp{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Yc(this.units,"units"),this.activation=ff(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=op(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=op(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Bp(e.kernelConstraint),this.biasConstraint=Bp(e.biasConstraint),this.kernelRegularizer=kf(e.kernelRegularizer),this.biasRegularizer=kf(e.biasRegularizer),this.activityRegularizer=kf(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=hp(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=hp(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e),s=Jc(this.activation.getClassName());let r;return null!=s?r=Fh(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Fh(n,this.kernel.read()),null!=this.bias&&(r=Lh(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:pf(this.activation),useBias:this.useBias,kernelInitializer:ip(this.kernelInitializer),biasInitializer:ip(this.biasInitializer),kernelRegularizer:bf(this.kernelRegularizer),biasRegularizer:bf(this.biasRegularizer),activityRegularizer:bf(this.activityRegularizer),kernelConstraint:zp(this.kernelConstraint),biasConstraint:zp(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}um.className="Dense",xs(um);class cm extends vp{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=hp(e);for(const t of e.slice(1))if(null==t)throw new Ac(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],bh(e,1)]}call(e,t){return zn((()=>{this.invokeCallHook(e,t);let n=cp(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Hn(n,e)}return function(e){if(e.rank<=1)throw new Ac(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],bh(e.shape,1)];return Zs(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}cm.className="Flatten",xs(cm);class hm extends vp{constructor(e){super(e),this.supportsMasking=!0,this.activation=ff(e.activation)}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e);return this.activation.apply(n)}))}getConfig(){const e={activation:pf(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}hm.className="Activation",xs(hm);class pm extends vp{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return zn((()=>{return e=cp(e),t=e,n=this.n,zn((()=>{if(2!==t.shape.length)throw new Ac(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Rh(Sh(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}pm.className="RepeatVector",xs(pm);class dm extends vp{constructor(e){super(e),this.targetShape=e.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let o=0;o<s.length;++o){const e=s[o];if(this.isUnknown(e)){if(null!==a)throw new Ac("Can only specifiy one unknown dimension.");a=o}else r*=e}const i=bh(e);if(null!==a){if(0===r||i%r!=0)throw new Ac(n);s[a]=i/r}else if(i!==r)throw new Ac(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return Zs(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}dm.className="Reshape",xs(dm);class fm extends vp{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=vh(1,e.dims.length+1);if(!g(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new gp({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=hp(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Hn(cp(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}fm.className="Permute",xs(fm);class mm extends vp{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=cp(e);return Es(Xa(n,this.maskValue),-1)}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e),s=Es(Xa(n,this.maskValue),-1,!0);return Is(n,Nn(s,n.dtype))}))}}mm.className="Masking",xs(mm);class gm extends vp{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(zc(e.inputLength))}this.inputDim=e.inputDim,Yc(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Yc(this.outputDim,"outputDim"),this.embeddingsInitializer=op(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=kf(e.embeddingsRegularizer),this.activityRegularizer=kf(e.activityRegularizer),this.embeddingsConstraint=Bp(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return zn((()=>this.maskZero?(e=cp(e),Xa(e,Or(e))):null))}computeOutputShape(e){if(e=hp(e),null==this.inputLength)return[...e,this.outputDim];const t=zc(this.inputLength);if(t.length!==e.length-1)throw new Ac(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Ac(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return zn((()=>{this.invokeCallHook(e,t);let n=cp(e);"int32"!==n.dtype&&(n=Nh(n,"int32"));const s=Dh(this.embeddings.read(),Zs(n,[n.size]));return Zs(s,hp(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:ip(this.embeddingsInitializer),embeddingsRegularizer:bf(this.embeddingsRegularizer),activityRegularizer:bf(this.activityRegularizer),embeddingsConstraint:zp(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}gm.className="Embedding",xs(gm);class ym extends vp{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Rc}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Ac("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[hp(e)]),e.length<2)throw new Ac(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const r of e)null!=r&&null!==r[0]&&t.push(r[0]);if(t=jc(t),t.length>1)throw new Ac(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let r=1;r<e.length;++r){const t=null==e[r]?null:e[r].slice(1);n=this.computeElementwiseOpOutputShape(n,t)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===jc(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return zn((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=kh(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Sh(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const a of e){const e=a.rank;if(null==e){const e=a.shape,s=e[0],r=e.slice(1).concat([s]);let i=Zs(a,[s].concat(bh(e.slice(1))));i=Hn(i,[1,0]),i=Zs(i,r),t.push(i),n=!0}else if(e>1){const s=vh(1,e).concat([0]);t.push(Hn(a,s)),n=!0}else t.push(a)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Zs(Hn(Zs(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(vh(0,r-1));s=Hn(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let s=1;s<e.length;++s){const n=null==e[s]?null:e[s].slice(1);t=this.computeElementwiseOpOutputShape(t,n)}let n=[];for(const s of e)null!=s&&null!==s[0]&&n.push(s[0]);return n=jc(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return zn((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Ac("`mask` should be an Array");if(!Array.isArray(e))throw new Ac("`inputs` should be an Array");if(t.length!==e.length)throw new Ac(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:ia(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Ra(n,t[e]);return n}))}}class bm extends ym{constructor(e){super(e)}mergeFunction(e){return zn((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ks(t,e[n]);return t}))}}bm.className="Add",xs(bm);class xm extends ym{constructor(e){super(e)}mergeFunction(e){return zn((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Is(t,e[n]);return t}))}}xm.className="Multiply",xs(xm);class km extends ym{constructor(e){super(e)}mergeFunction(e){return zn((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=ks(t,e[n]);return Is(1/e.length,t)}))}}km.className="Average",xs(km);class vm extends ym{constructor(e){super(e)}mergeFunction(e){return zn((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Ba(t,e[n]);return t}))}}vm.className="Maximum",xs(vm);class wm extends ym{constructor(e){super(e)}mergeFunction(e){return zn((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Ga(t,e[n]);return t}))}}wm.className="Minimum",xs(wm);class Im extends ym{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Ac("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const s of e)if(null!=s){t=!1;break}if(t)return;const n=[];for(let s=0;s<e.length;++s){const t=e[s].slice();t.splice(this.axis,1);let r=!1;for(const e of n)if(g(e,t)){r=!0;break}r||n.push(t)}if(n.length>1)throw new Ac("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return zn((()=>Eh(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Ac("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const r of t.slice(1)){if(null==n[s]||null==r[s]){n[s]=null;break}n[s]+=r[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Ac("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Ac("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Ac(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return zn((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let a=0;a<e.length;++a)null==t[a]?s.push(Nn(Ya(e[a]),"bool")):t[a].rank<e[a].rank?s.push(ia(t[a],-1)):s.push(t[a]);const r=er(s,this.axis);return Cs(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Nm(e,t){for(;e<0;)e+=t;return e}Im.className="Concatenate",xs(Im);class Sm extends ym{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){h(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Rc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Ac(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Ac(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Nm(t,e[n].shape.length))):[Nm(this.axes,n.shape.length),Nm(this.axes,s.shape.length)],this.normalize&&(n=ed(n,t[0]),s=ed(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Rc("batchDot is not implemented for tensors of 4D or higher rank yet");if(h(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),h(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Rc("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return zn((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=Zs(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=Zs(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?ta(Is(e,t),a[0]):ta(Is(Hn(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=Dn(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=ji(i,t)}return 1===i.shape.length&&(i=ia(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Nm(this.axes,e.length),Nm(this.axes,t.length)],n}computeOutputShape(e){h(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Rc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Sm.className="Dot",xs(Sm);class Tm extends vp{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e);return Ph((()=>ks(_h(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Tm.className="GaussianNoise",xs(Tm);class $m extends vp{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return zn((()=>{this.invokeCallHook(e,t);const n=cp(e);if(this.rate>0&&this.rate<1){return Ph((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Is(n,_h(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}$m.className="GaussianDropout",xs($m);class Cm extends vp{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||cp(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(t,n){return zn((()=>{if(this.rate<1&&this.rate>0){const s=this._getNoiseShape(t);return Ph((()=>{const n=cp(t),r=-1.7580993408473766;let a=fa(vi(s),this.rate);a=Nh(a,"float32");const i=e((1-this.rate)*(1+this.rate*e(r,2)),-.5),o=-i*r*this.rate,l=ks(Is(n,a),Is(ks(a,-1),r));return ks(Is(l,i),o)}),(()=>cp(t)),n.training||!1)}return t}))}}function Em(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=ir(e,t,n,s,r,a);else if(3===e.rank)i=or(e,t,n,s,r,a);else{if(4!==e.rank)throw new Rc(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=lr(e,t,n,s,r,a)}return i}function Am(e,t,n,s,r=.001){return g(s.slice().sort(),vh(0,e.rank-1))?function(e,t,n,s,r=.001){return zn((()=>{const a=qa(e,s),i=a.mean,o=a.variance;return[Em(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return zn((()=>{const a=qa(e,s),i=a.mean,o=a.variance,l=[];for(const t of vh(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Zs(i,l),c=Zs(o,l),h=null==t?null:Zs(t,l),p=null==n?null:Zs(n,l);return[Em(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}Cm.className="AlphaDropout",xs(Cm);class Rm extends vp{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=op(e.betaInitializer||"zeros"),this.gammaInitializer=op(e.gammaInitializer||"ones"),this.movingMeanInitializer=op(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=op(e.movingVarianceInitializer||"ones"),this.betaConstraint=Bp(e.betaConstraint),this.gammaConstraint=Bp(e.gammaConstraint),this.betaRegularizer=kf(e.betaRegularizer),this.gammaRegularizer=kf(e.gammaRegularizer)}build(e){e=hp(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Ac(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new gp({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return zn((()=>{const n=null!=t.training&&t.training,s=cp(e),r=s.shape,a=r.length,i=vh(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Dc(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!g(u,vh(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Zs(this.movingMean.read(),l),t=Zs(this.movingVariance.read(),l),n=this.center?Zs(this.beta.read(),l):null,r=this.scale?Zs(this.gamma.read(),l):null;return Em(s,e,t,n,r,this.epsilon)}return Em(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=Am(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{zn((()=>{const s=1-n,r=e.read(),a=Is(Ca(r,t),s);e.write(Ca(r,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ip(this.betaInitializer),gammaInitializer:ip(this.gammaInitializer),movingMeanInitializer:ip(this.movingMeanInitializer),movingVarianceInitializer:ip(this.movingVarianceInitializer),betaRegularizer:bf(this.betaRegularizer),gammaRegularizer:bf(this.gammaRegularizer),betaConstraint:zp(this.betaConstraint),gammaConstraint:zp(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Rm.className="BatchNormalization",xs(Rm);class _m extends vp{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=op(e.betaInitializer||"zeros"),this.gammaInitializer=op(e.gammaInitializer||"ones"),this.betaRegularizer=kf(e.betaRegularizer),this.gammaRegularizer=kf(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=hp(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let s=0;s<this.axis.length;++s)this.axis[s]<0&&(this.axis[s]+=t);for(const s of this.axis)if(s<0||s>=t)throw new Error(`Invalid axis: ${s}`);if(this.axis.length!==jc(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=cp(e),s=n.shape,r=s.length;return zn((()=>{let{mean:e,variance:t}=qa(n,this.axis,!0);const a=Dc(1,r);for(const n of this.axis)a[n]=s[n];const i=e=>null!=e&&e.shape.length!==r?Zs(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let n=0;n<r;++n)-1!==this.axis.indexOf(n)?(u.push(s[n]),c.push(1)):(u.push(1),c.push(s[n]));return e=la(e,u),t=la(t,u),null!=o&&(o=la(o,c)),null!=l&&(l=la(l,c)),Em(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:ip(this.betaInitializer),gammaInitializer:ip(this.gammaInitializer),betaRegularizer:bf(this.betaRegularizer),gammaRegularizer:bf(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}_m.className="LayerNormalization",xs(_m);class Fm extends vp{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Ac(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Ac(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Ac(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new gp({ndim:4})]}computeOutputShape(e){let t,n;return e=hp(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return zn((()=>{return t=cp(e),n=this.padding,s=this.dataFormat,zn((()=>{if(4!==t.rank)throw new Ac(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Ac("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Ac(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Za(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Dm(e,t,n,s,r,a){return zn((()=>{let i;uh(r),hh(a),ch(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Af(e,r);const o="same"===s?"same":"valid";return i="max"===a?La(e,t,n,o):Js(e,t,n,o),"channelsFirst"===r&&(i=Hn(i,[0,3,1,2])),i}))}function Om(e,t,n,s,r,a){return zn((()=>{let i;uh(r),hh(a),ch(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Rf(e,r);const o="same"===s?"same":"valid";return i="max"===a?za(e,t,n,o):Qs(e,t,n,o),"channelsFirst"===r&&(i=Hn(i,[0,4,1,2,3])),i}))}Fm.className="ZeroPadding2D",xs(Fm);class Mm extends vp{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Ac(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Yc(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Ac(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Yc(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,ch(this.padding),this.inputSpec=[new gp({ndim:3})]}computeOutputShape(e){const t=Cf((e=hp(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return zn((()=>{this.invokeCallHook(e,t),e=Sh(cp(e),2);const n=this.poolingFunction(cp(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ji(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Lm extends Mm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Dm(e,t,n,s,r,"max")}}Lm.className="MaxPooling1D",xs(Lm);class zm extends Mm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Dm(e,t,n,s,r,"avg")}}zm.className="AveragePooling1D",xs(zm);class Pm extends vp{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Ac(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Yc(this.poolSize,"poolSize"),Yc(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,uh(this.dataFormat),ch(this.padding),this.inputSpec=[new gp({ndim:4})]}computeOutputShape(e){e=hp(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Cf(t,this.poolSize[0],this.padding,this.strides[0]),n=Cf(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return zn((()=>(this.invokeCallHook(e,t),this.poolingFunction(cp(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Bm extends Pm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Dm(e,t,n,s,r,"max")}}Bm.className="MaxPooling2D",xs(Bm);class Wm extends Pm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Dm(e,t,n,s,r,"avg")}}Wm.className="AveragePooling2D",xs(Wm);class Vm extends vp{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Ac(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Yc(this.poolSize,"poolSize"),Yc(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,uh(this.dataFormat),ch(this.padding),this.inputSpec=[new gp({ndim:5})]}computeOutputShape(e){e=hp(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Cf(t,this.poolSize[0],this.padding,this.strides[0]),n=Cf(n,this.poolSize[1],this.padding,this.strides[1]),s=Cf(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return zn((()=>(this.invokeCallHook(e,t),this.poolingFunction(cp(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Um extends Vm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Om(e,t,n,s,r,"max")}}Um.className="MaxPooling3D",xs(Um);class Gm extends Vm{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return uh(r),ch(s),Om(e,t,n,s,r,"avg")}}Gm.className="AveragePooling3D",xs(Gm);class Hm extends vp{constructor(e){super(e),this.inputSpec=[new gp({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Rc}}class jm extends Hm{constructor(e){super(e||{})}call(e,t){return zn((()=>{const t=cp(e);return Wa(t,1)}))}}jm.className="GlobalAveragePooling1D",xs(jm);class qm extends Hm{constructor(e){super(e||{})}call(e,t){return zn((()=>{const t=cp(e);return Xr(t,1)}))}}qm.className="GlobalMaxPooling1D",xs(qm);class Km extends vp{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,uh(this.dataFormat),this.inputSpec=[new gp({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Rc}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Xm extends Km{call(e,t){return zn((()=>{const t=cp(e);return"channelsLast"===this.dataFormat?Wa(t,[1,2]):Wa(t,[2,3])}))}}Xm.className="GlobalAveragePooling2D",xs(Xm);class Ym extends Km{call(e,t){return zn((()=>{const t=cp(e);return"channelsLast"===this.dataFormat?Xr(t,[1,2]):Xr(t,[2,3])}))}}Ym.className="GlobalMaxPooling2D",xs(Ym);class Zm extends vp{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=Qp(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Jm extends Zm{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=hp(e)).length<3)throw new Ac(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=hp(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return zn((()=>jf(((e,n)=>[cp(this.layer.call(e,t)),[]]),e=cp(e),[],!1,null,null,!1,!0)[1]))}}Jm.className="TimeDistributed",xs(Jm);class Qm extends Zm{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Qp(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=Qp(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,Kc(oh,"BidirectionalMergeMode",r),e.weights)throw new Rc("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Lc(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Hf(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Ac("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new gp({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Rc("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof yp;for(const l of a)if(l instanceof yp!==o)throw new Ac("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return zn((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Ti(r,1)),"concat"===this.mergeMode?i=Eh([s,r]):"sum"===this.mergeMode?i=ks(s,r):"ave"===this.mergeMode?i=Is(.5,ks(s,r)):"mul"===this.mergeMode?i=Is(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){dh(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),dh(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Qp(t.layer);if(delete t.layer,null!=t.numConstants)throw new Rc("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}Qm.className="Bidirectional",xs(Qm);var eg,tg,ng,sg,rg;j().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),(tg=eg||(eg={}))[tg.DT_INVALID=0]="DT_INVALID",tg[tg.DT_FLOAT=1]="DT_FLOAT",tg[tg.DT_DOUBLE=2]="DT_DOUBLE",tg[tg.DT_INT32=3]="DT_INT32",tg[tg.DT_UINT8=4]="DT_UINT8",tg[tg.DT_INT16=5]="DT_INT16",tg[tg.DT_INT8=6]="DT_INT8",tg[tg.DT_STRING=7]="DT_STRING",tg[tg.DT_COMPLEX64=8]="DT_COMPLEX64",tg[tg.DT_INT64=9]="DT_INT64",tg[tg.DT_BOOL=10]="DT_BOOL",tg[tg.DT_QINT8=11]="DT_QINT8",tg[tg.DT_QUINT8=12]="DT_QUINT8",tg[tg.DT_QINT32=13]="DT_QINT32",tg[tg.DT_BFLOAT16=14]="DT_BFLOAT16",tg[tg.DT_QINT16=15]="DT_QINT16",tg[tg.DT_QUINT16=16]="DT_QUINT16",tg[tg.DT_UINT16=17]="DT_UINT16",tg[tg.DT_COMPLEX128=18]="DT_COMPLEX128",tg[tg.DT_HALF=19]="DT_HALF",tg[tg.DT_RESOURCE=20]="DT_RESOURCE",tg[tg.DT_VARIANT=21]="DT_VARIANT",tg[tg.DT_UINT32=22]="DT_UINT32",tg[tg.DT_UINT64=23]="DT_UINT64",tg[tg.DT_FLOAT_REF=101]="DT_FLOAT_REF",tg[tg.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",tg[tg.DT_INT32_REF=103]="DT_INT32_REF",tg[tg.DT_UINT8_REF=104]="DT_UINT8_REF",tg[tg.DT_INT16_REF=105]="DT_INT16_REF",tg[tg.DT_INT8_REF=106]="DT_INT8_REF",tg[tg.DT_STRING_REF=107]="DT_STRING_REF",tg[tg.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",tg[tg.DT_INT64_REF=109]="DT_INT64_REF",tg[tg.DT_BOOL_REF=110]="DT_BOOL_REF",tg[tg.DT_QINT8_REF=111]="DT_QINT8_REF",tg[tg.DT_QUINT8_REF=112]="DT_QUINT8_REF",tg[tg.DT_QINT32_REF=113]="DT_QINT32_REF",tg[tg.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",tg[tg.DT_QINT16_REF=115]="DT_QINT16_REF",tg[tg.DT_QUINT16_REF=116]="DT_QUINT16_REF",tg[tg.DT_UINT16_REF=117]="DT_UINT16_REF",tg[tg.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",tg[tg.DT_HALF_REF=119]="DT_HALF_REF",tg[tg.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",tg[tg.DT_VARIANT_REF=121]="DT_VARIANT_REF",tg[tg.DT_UINT32_REF=122]="DT_UINT32_REF",tg[tg.DT_UINT64_REF=123]="DT_UINT64_REF",sg=ng||(ng={}),(rg=sg.CheckpointFormatVersion||(sg.CheckpointFormatVersion={}))[rg.LEGACY=0]="LEGACY",rg[rg.V1=1]="V1",rg[rg.V2=2]="V2";const ag={};function ig(e){return ag[e]}function og(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return lg(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>lg(e,n,s,r)))}const o=lg(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:M(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function lg(e,t,n,s){const[r,a]=hg(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[cg(r,e)]));return void 0!==i?t[cg(r,i)][a]:void 0}function ug(e,t){const[n,s,r]=hg(e);return[cg(n,t&&t.currentContextId),s,r]}function cg(e,t){return t?`${e}-${t}`:e}function hg(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function pg(e,t,n){let s=og("pad",e,t,n);if("explicit"===s){s=og("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function dg(e){return e.kept?e:Sn(e)}var fg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var mg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var gg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}]},Symbol.toStringTag,{value:"Module"}));var yg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},Symbol.toStringTag,{value:"Module"}));var bg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},Symbol.toStringTag,{value:"Module"}));var xg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var kg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},Symbol.toStringTag,{value:"Module"}));var vg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},Symbol.toStringTag,{value:"Module"}));var wg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"}));var Ig=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]},Symbol.toStringTag,{value:"Module"}));var Ng=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var Sg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]},Symbol.toStringTag,{value:"Module"}));var Tg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var $g=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},Symbol.toStringTag,{value:"Module"}));var Cg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var Eg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},Symbol.toStringTag,{value:"Module"}));var Ag=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},Symbol.toStringTag,{value:"Module"}));var Rg=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},Symbol.toStringTag,{value:"Module"}));var _g=Object.freeze(Object.defineProperty({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},Symbol.toStringTag,{value:"Module"}));class Fg{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[fg,mg,gg,yg,bg,xg,kg,vg,wg,Ig,Ng,Sg,Tg,$g,Cg,Eg,Ag,Rg,_g].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=ug(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=ug(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=ug(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=ig(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=Og(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Og(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Hg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Hg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Lg(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Lg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Gg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Gg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Mg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Mg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=qg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=qg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Ug(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ug(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=jg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Bg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Bg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Wg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Wg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Pg(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Pg(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=ug(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:zg(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=ug(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=ug(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Dg(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=j().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Og(e,t,n,s=!1){const r=e[t];return null!=r?Dg(r.s,s):n}function Mg(e,t,n){const s=e[t];return s?s.b:n}function Lg(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function zg(e){switch("string"==typeof e&&(e=eg[e]),e){case eg.DT_FLOAT:case eg.DT_HALF:return"float32";case eg.DT_INT32:case eg.DT_INT64:case eg.DT_INT8:case eg.DT_UINT8:return"int32";case eg.DT_BOOL:return"bool";case eg.DT_DOUBLE:return"float32";case eg.DT_STRING:return"string";default:return null}}function Pg(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Bg(e,t,n){const s=e[t];return s&&s.type?zg(s.type):n}function Wg(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>zg(e))):n}function Vg(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Ug(e,t,n){const s=e[t];return s&&s.shape?Vg(s.shape):n}function Gg(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Hg(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>Dg(e,s))):n}function jg(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Vg(e))):n}function qg(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class Kg{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return lg(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return lg(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Lg(this.node.rawAttrs,e,t);if(null!=n.s)return Og(this.node.rawAttrs,e,t);if(null!=n.b)return Mg(this.node.rawAttrs,e,t);if(null!=n.shape)return Ug(this.node.rawAttrs,e,t);if(null!=n.type)return Bg(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Gg(this.node.rawAttrs,e,t);if(null!=n.list.s)return Hg(this.node.rawAttrs,e,t);if(null!=n.list.shape)return jg(this.node.rawAttrs,e,t);if(null!=n.list.b)return qg(this.node.rawAttrs,e,t);if(null!=n.list.type)return Wg(this.node.rawAttrs,e,t)}return t}}function Xg(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){h(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];h(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Yg(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Zg(e,t,n){let s=Jg(e,n);const r=!Yg(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Jg(e.shape,s)})),!Yg(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Jg(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Qg{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Jr(0),Bn(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Xg(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Bn(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Vt([],[0].concat(this.elementShape));const n=this.readMany(e);return Xg(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),qi(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Vt([],[0].concat(this.elementShape));const t=[];for(let s=0;s<this.size();s++)t.push(s);const n=this.readMany(t);return Xg(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),er(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,so(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];zn((()=>{t=Zs(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=Zs(nr(t,i,o),this.elementShape)}return a}));const i=[];for(let o=0;o<e.length;o++)i[o]=o;this.writeMany(i,a)}}class ey{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Xg(t,e.shape,"TensorList shape mismatch: "),Bn(e)})),this.idTensor=Jr(0),this.maxNumElements=s,Bn(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ey([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Xg(e,this.elementShape,"TensorList shape mismatch: ");const s=Zg(this.elementShape,this.tensors,e);return zn((()=>{const e=this.tensors.map((e=>Zs(e,s)));return qi(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Zg(this.elementShape,this.tensors,e),s=this.tensors.pop();return Xg(s.shape,e,"TensorList shape mismatch: "),Zs(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Xg(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Bn(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new ey([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Xg(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Zg(this.elementShape,this.tensors,t);return Zs(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Xg(this.elementShape,t.shape,"TensorList shape mismatch: "),Bn(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Xg(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Zg(this.elementShape,this.tensors,n);return 0===e.length?Vt([],[0].concat(s)):zn((()=>{const t=e.map((e=>Zs(this.tensors[e],s)));return qi(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Xg(this.elementShape,t,"TensorList shape mismatch: ");const n=Zg(this.elementShape,this.tensors,t);return 0===this.size()?Vt([],[0].concat(n)):zn((()=>{const e=this.tensors.map((e=>Zs(e,n)));return er(e,0)}))}}const ty=(e,n,s)=>t(this,null,(function*(){switch(e.op){case"If":case"StatelessIf":{const t=og("thenBranch",e,n,s),r=og("elseBranch",e,n,s),a=og("cond",e,n,s),i=og("args",e,n,s);return(yield a.data())[0]?s.functionMap[t].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const t=og("body",e,n,s),r=og("cond",e,n,s),a=og("args",e,n,s),i=yield s.functionMap[r].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),o=a.map((e=>e.id));let l=yield i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=yield s.functionMap[t].executeFunctionAsync(u,s.tensorArrayMap,s.tensorListMap);const n=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==n.indexOf(e.id)||e.dispose()}));const a=yield s.functionMap[r].executeFunctionAsync(u,s.tensorArrayMap,s.tensorListMap);l=yield a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==n.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[dg(og("pred",e,n,s))];case"Switch":{const t=og("pred",e,n,s);let r=og("data",e,n,s);return r.kept||(r=dg(r)),(yield t.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const t=e.inputNames.find((e=>void 0!==lg(e,n,s)));if(t){return[dg(lg(t,n,s))]}return}case"Enter":{const t=og("frameName",e,n,s),r=og("tensor",e,n,s);return s.enterFrame(t),[dg(r)]}case"Exit":{const t=og("tensor",e,n,s);return s.exitFrame(),[dg(t)]}case"NextIteration":{const t=og("tensor",e,n,s);return s.nextIteration(),[dg(t)]}case"TensorArrayV3":{const t=og("size",e,n,s),r=og("dtype",e,n,s),a=og("elementShape",e,n,s),i=og("dynamicSize",e,n,s),o=og("clearAfterRead",e,n,s),l=og("identicalElementShapes",e,n,s),u=og("name",e,n,s),c=new Qg(u,r,t,a,l,i,o);return s.addTensorArray(c),[c.idTensor,Jr(1)]}case"TensorArrayWriteV3":{const t=og("tensorArrayId",e,n,s),r=og("index",e,n,s),a=og("tensor",e,n,s),i=s.getTensorArray(t.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const t=og("tensorArrayId",e,n,s),r=og("index",e,n,s);return[s.getTensorArray(t.id).read(r)]}case"TensorArrayGatherV3":{const t=og("tensorArrayId",e,n,s),r=og("indices",e,n,s),a=og("dtype",e,n,s);return[s.getTensorArray(t.id).gather(r,a)]}case"TensorArrayScatterV3":{const t=og("tensorArrayId",e,n,s),r=og("indices",e,n,s),a=og("tensor",e,n,s),i=s.getTensorArray(t.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const t=og("tensorArrayId",e,n,s),r=s.getTensorArray(t.id),a=og("dtype",e,n,s);return[r.concat(a)]}case"TensorArraySplitV3":{const t=og("tensorArrayId",e,n,s),r=og("tensor",e,n,s),a=og("lengths",e,n,s),i=s.getTensorArray(t.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const t=og("tensorArrayId",e,n,s);return[Jr(s.getTensorArray(t.id).size(),"int32")]}case"TensorArrayCloseV3":{const t=og("tensorArrayId",e,n,s),r=s.getTensorArray(t.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const t=og("tensorListId",e,n,s),r=og("index",e,n,s),a=og("tensor",e,n,s),i=s.getTensorList(t.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const t=og("tensorListId",e,n,s),r=og("index",e,n,s),a=og("elementShape",e,n,s),i=og("elementDType",e,n,s);return[s.getTensorList(t.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const t=og("indices",e,n,s),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new ey([],n,e.dtype,s),i=so(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(og("tensor",e,n,s),t,og("elementShape",e,n,s),og("numElements",e,n,s));return s.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const t=og("elementShape",e,n,s),r=og("elementDType",e,n,s);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new ey([],e,t,n)}(t,r,og(a,e,n,s));return s.addTensorList(i),[i.idTensor]}case"TensorListGather":{const t=og("tensorListId",e,n,s),r=og("indices",e,n,s),a=og("elementShape",e,n,s),i=og("elementDType",e,n,s);return[s.getTensorList(t.id).gather(r,i,a)]}case"TensorListStack":{const t=og("tensorListId",e,n,s),r=og("elementShape",e,n,s),a=og("elementDType",e,n,s),i=og("numElements",e,n,s);return[s.getTensorList(t.id).stack(r,a,i)]}case"TensorListFromTensor":{const t=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Xg(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=so(e);return new ey(r,t,s)}(og("tensor",e,n,s),og("elementShape",e,n,s),og("elementDType",e,n,s));return s.addTensorList(t),[t.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const t=og("tensorListId",e,n,s),r=s.getTensorList(t.id),a=og("dtype",e,n,s),i=og("elementShape",e,n,s);return[r.concat(a,i)]}case"TensorListPushBack":{const t=og("tensorListId",e,n,s),r=og("tensor",e,n,s),a=s.getTensorList(t.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const t=og("tensorListId",e,n,s),r=og("elementShape",e,n,s),a=og("elementDType",e,n,s);return[s.getTensorList(t.id).popBack(r,a)]}case"TensorListSplit":{const t=og("tensor",e,n,s),r=og("elementShape",e,n,s),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Jg(e.shape.slice(1),n),i=0===s?0:e.size/s,o=zn((()=>{const n=[];e=Zs(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=Zs(nr(e,o,l),a)}return e.dispose(),n})),l=new ey([],n,e.dtype,t.length);for(let u=0;u<o.length;u++)l.setItem(u,o[u]);return l}(t,og("lengths",e,n,s),r);return s.addTensorList(a),[a.idTensor]}case"TensorListLength":{const t=og("tensorListId",e,n,s);return[Jr(s.getTensorList(t.id).size(),"int32")]}case"TensorListResize":{const t=og("tensorListId",e,n,s),r=og("size",e,n,s),a=s.getTensorList(t.id).resize(r);return s.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}));function ny(e,t,n){const[s,r]=og("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=og("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=og("strides",e,t,n),h=pg(e,t,n),p=og("dataFormat",e,t,n).toUpperCase(),d=og("dilations",e,t,n);let[f,m]=og("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:og("leakyreluAlpha",e,t,n)}}function sy(e,t,n){return{boxes:og("boxes",e,t,n),scores:og("scores",e,t,n),maxOutputSize:og("maxOutputSize",e,t,n),iouThreshold:og("iouThreshold",e,t,n),scoreThreshold:og("scoreThreshold",e,t,n),softNmsSigma:og("softNmsSigma",e,t,n)}}const ry=(e,n,s)=>t(this,null,(function*(){switch(e.op){case"NonMaxSuppressionV5":{const{boxes:t,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=sy(e,n,s),u=yield ul.nonMaxSuppressionWithScoreAsync(t,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:t,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=sy(e,n,s),l=og("padToMaxOutputSize",e,n,s),u=yield ul.nonMaxSuppressionPaddedAsync(t,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:t,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=sy(e,n,s);return[yield ul.nonMaxSuppressionAsync(t,r,a,i,o)]}case"Where":{const t=Nn(og("condition",e,n,s),"bool"),r=[yield io(t)];return t.dispose(),r}case"ListDiff":return Ri(og("x",e,n,s),og("y",e,n,s));default:throw TypeError(`Node type ${e.op} is not implemented`)}}));class ay{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Jr(0),this.tensorMap=new Map,Bn(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Jr(this.size(),"int32")}import(e,n){return t(this,null,(function*(){this.checkKeyAndValueTensor(e,n);const t=yield e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),zn((()=>{const e=so(n),s=t.length,r=e.length;h(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let n=0;n<s;n++){const s=t[n],r=e[n];Bn(r),this.tensorMap.set(s,r)}return this.handle}))}))}find(e,n){return t(this,null,(function*(){this.checkKeyAndValueTensor(e,n);const t=yield e.data();return zn((()=>{const e=[];for(let s=0;s<t.length;s++){const r=t[s],a=this.findWithDefault(r,n);e.push(a)}return qi(e)}))}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const iy=(e,n,s,r)=>t(this,null,(function*(){switch(e.op){case"HashTable":case"HashTableV2":{const t=og("keyDType",e,n,s),a=og("valueDType",e,n,s),i=new ay(t,a);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const t=og("tableHandle",e,n,s,r),a=og("keys",e,n,s),i=og("values",e,n,s),o=r.getHashTableById(t.id);return[yield o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const t=og("tableHandle",e,n,s,r),a=og("keys",e,n,s),i=og("defaultValue",e,n,s),o=r.getHashTableById(t.id);return[yield o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const t=og("tableHandle",e,n,s,r);return[r.getHashTableById(t.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}));function oy(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return zn((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[ks(og("a",e,t,n),og("b",e,t,n))];case"AddN":return[$s(og("tensors",e,t,n))];case"FloorMod":case"Mod":return[ja(og("a",e,t,n),og("b",e,t,n))];case"Mul":return[Is(og("a",e,t,n),og("b",e,t,n))];case"RealDiv":case"Div":return[ws(og("a",e,t,n),og("b",e,t,n))];case"DivNoNan":return[Mr(og("a",e,t,n),og("b",e,t,n))];case"FloorDiv":return[vs(og("a",e,t,n),og("b",e,t,n))];case"Sub":return[Ca(og("a",e,t,n),og("b",e,t,n))];case"Minimum":return[Ga(og("a",e,t,n),og("b",e,t,n))];case"Maximum":return[Ba(og("a",e,t,n),og("b",e,t,n))];case"Pow":return[Zr(og("a",e,t,n),og("b",e,t,n))];case"SquaredDifference":return[Hi(og("a",e,t,n),og("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return zn((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Ns(og("x",e,t,n))];case"Acos":return[Ss(og("x",e,t,n))];case"Acosh":return[Ts(og("x",e,t,n))];case"Asin":return[_s(og("x",e,t,n))];case"Asinh":return[Fs(og("x",e,t,n))];case"Atan":return[Ds(og("x",e,t,n))];case"Atan2":return[Os(og("x",e,t,n),og("y",e,t,n))];case"Atanh":return[Ms(og("x",e,t,n))];case"Ceil":return[pr(og("x",e,t,n))];case"Complex":return[Bt(og("real",e,t,n),og("imag",e,t,n))];case"Cos":return[Sr(og("x",e,t,n))];case"Cosh":return[Tr(og("x",e,t,n))];case"Elu":return[Pr(og("x",e,t,n))];case"Erf":return[Br(og("x",e,t,n))];case"Exp":return[aa(og("x",e,t,n))];case"Expm1":return[oa(og("x",e,t,n))];case"Floor":return[ha(og("x",e,t,n))];case"Log":return[Ia(og("x",e,t,n))];case"Log1p":return[Na(og("x",e,t,n))];case"Imag":return[Vn(og("x",e,t,n))];case"Neg":return[Un(og("x",e,t,n))];case"Reciprocal":return[Ii(og("x",e,t,n))];case"Real":return[Gn(og("x",e,t,n))];case"Relu":return[Ni(og("x",e,t,n))];case"Round":return[$i(og("x",e,t,n))];case"Selu":return[Ei(og("x",e,t,n))];case"Sigmoid":return[tr(og("x",e,t,n))];case"Sin":return[Fi(og("x",e,t,n))];case"Sign":return[_i(og("x",e,t,n))];case"Sinh":return[Di(og("x",e,t,n))];case"Softplus":return[Ta(og("x",e,t,n))];case"Sqrt":return[Qr(og("x",e,t,n))];case"Square":return[ea(og("x",e,t,n))];case"Tanh":return[sr(og("x",e,t,n))];case"Tan":return[Yi(og("x",e,t,n))];case"ClipByValue":return[dr(og("x",e,t,n),og("clipValueMin",e,t,n),og("clipValueMax",e,t,n))];case"Relu6":return[Si(og("x",e,t,n))];case"Rsqrt":return[Ci(lg(e.inputNames[0],t,n))];case"Prod":return[ti(og("x",e,t,n),og("axes",e,t,n))];case"LeakyRelu":return[ba(og("x",e,t,n),og("alpha",e,t,n))];case"Prelu":return[ei(og("x",e,t,n),og("alpha",e,t,n))];case"IsNan":return[ya(lg(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return ty(e,t,n);case"convolution":return zn((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=og("stride",e,t,n),r=og("pad",e,t,n),a=og("dataFormat",e,t,n).toUpperCase(),i=og("dilation",e,t,n);return[xr(og("x",e,t,n),og("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=og("strides",e,t,n),r=pg(e,t,n),a=og("dataFormat",e,t,n).toUpperCase(),i=og("dilations",e,t,n);return[br(og("x",e,t,n),og("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=ny(e,t,n);return[bo({x:og("x",e,t,n),filter:og("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=ny(e,t,n);return[vo({x:og("x",e,t,n),filter:og("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=og("outputShape",e,t,n),r=og("strides",e,t,n),a=pg(e,t,n);return[vr(og("x",e,t,n),og("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=og("strides",e,t,n),r=pg(e,t,n),a=og("dilations",e,t,n),i=og("dataFormat",e,t,n).toUpperCase();return[Rr(og("input",e,t,n),og("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("dataFormat",e,t,n).toUpperCase(),i=og("dilations",e,t,n);return[wr(og("x",e,t,n),og("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("kernelSize",e,t,n);return[Js(og("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("kernelSize",e,t,n);return[La(og("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("kernelSize",e,t,n),i=og("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Pa(og("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("kernelSize",e,t,n);return[Qs(og("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("kernelSize",e,t,n);return[za(og("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=og("strides",e,t,n),r=og("pad",e,t,n),a=og("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[_r(og("x",e,t,n),og("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return zn((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=og("shape",e,t,n),r=og("dtype",e,t,n);return[ca(s,og("value",e,t,n),r)]}case"LinSpace":return[va(og("start",e,t,n),og("stop",e,t,n),og("num",e,t,n))];case"Multinomial":{const s=og("logits",e,t,n),r=og("numSamples",e,t,n),a=og("seed",e,t,n);return[Ka(s,r,a)]}case"OneHot":{const s=og("indices",e,t,n),r=og("depth",e,t,n),a=og("onValue",e,t,n),i=og("offValue",e,t,n);return[On(s,r,a,i)]}case"Ones":return[Ua(og("shape",e,t,n),og("dtype",e,t,n))];case"OnesLike":return[Ya(og("x",e,t,n))];case"RandomUniform":return[vi(og("shape",e,t,n),og("minval",e,t,n),og("maxval",e,t,n),og("dtype",e,t,n))];case"Range":return[wi(og("start",e,t,n),og("stop",e,t,n),og("step",e,t,n),og("dtype",e,t,n))];case"TruncatedNormal":{const s=og("shape",e,t,n),r=og("mean",e,t,n),a=og("stdDev",e,t,n),i=og("seed",e,t,n);return[eo(s,r,a,og("dtype",e,t,n),i)]}case"Zeros":return[Va(og("shape",e,t,n),og("dtype",e,t,n))];case"ZerosLike":return[Or(og("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return ry(e,t,n);case"evaluation":return zn((()=>((e,t,n)=>{switch(e.op){case"LowerBound":return[Ma(og("sortedSequence",e,t,n),og("values",e,t,n))];case"TopKV2":{const s=og("x",e,t,n),r=og("k",e,t,n),a=og("sorted",e,t,n),i=Qi(s,r,a);return[i.values,i.indices]}case"UpperBound":return[ro(og("sortedSequence",e,t,n),og("values",e,t,n))];case"Unique":{const s=og("x",e,t,n),r=to(s);return[r.values,r.indices]}case"UniqueV2":{const s=og("x",e,t,n),r=og("axis",e,t,n),a=to(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return zn((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=og("images",e,t,n),r=og("size",e,t,n),a=og("alignCorners",e,t,n),i=og("halfPixelCenters",e,t,n);return[ul.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=og("images",e,t,n),r=og("size",e,t,n),a=og("alignCorners",e,t,n),i=og("halfPixelCenters",e,t,n);return[ul.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=og("image",e,t,n),r=og("boxes",e,t,n),a=og("boxInd",e,t,n),i=og("cropSize",e,t,n),o=og("method",e,t,n),l=og("extrapolationValue",e,t,n);return[ul.cropAndResize(s,r,a,i,o,l)]}case"ImageProjectiveTransformV3":{const s=og("images",e,t,n),r=og("transforms",e,t,n),a=og("outputShape",e,t,n),i=og("fillValue",e,t,n),o=og("interpolation",e,t,n),l=og("fillMode",e,t,n);return[ul.transform(s,r,o.toLowerCase(),l.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return zn((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=og("default",e,t,n);return[lg(e.name,t,n)||s];case"Placeholder":return[lg(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[dg(og("x",e,t,n))];case"IdentityN":return og("x",e,t,n).map((e=>dg(e)));case"Shape":return[Zi(og("x",e,t,n).shape,"int32")];case"ShapeN":return og("x",e,t,n).map((e=>Zi(e.shape)));case"Size":return[Jr(og("x",e,t,n).size,"int32")];case"Rank":return[Jr(og("x",e,t,n).rank,"int32")];case"NoOp":return[Jr(1)];case"Print":const r=og("x",e,t,n),a=og("data",e,t,n),i=og("message",e,t,n),o=og("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return zn((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Fr(og("a",e,t,n),og("b",e,t,n))];case"NotEqual":return[Xa(og("a",e,t,n),og("b",e,t,n))];case"Greater":return[da(og("a",e,t,n),og("b",e,t,n))];case"GreaterEqual":return[fa(og("a",e,t,n),og("b",e,t,n))];case"Less":return[xa(og("a",e,t,n),og("b",e,t,n))];case"LessEqual":return[ka(og("a",e,t,n),og("b",e,t,n))];case"LogicalAnd":return[Ra(og("a",e,t,n),og("b",e,t,n))];case"LogicalNot":return[_a(og("a",e,t,n))];case"LogicalOr":return[Fa(og("a",e,t,n),og("b",e,t,n))];case"Select":case"SelectV2":return[Dr(og("condition",e,t,n),og("a",e,t,n),og("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return zn((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Dn(og("a",e,t,n),og("b",e,t,n),og("transposeA",e,t,n),og("transposeB",e,t,n))];case"Einsum":return[zr(og("equation",e,t,n),...og("tensors",e,t,n))];case"Transpose":return[Hn(og("x",e,t,n),og("perm",e,t,n))];case"_FusedMatMul":const[s,r]=og("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=og("numArgs",e,t,n),l=og("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=og("args",e,t,n);return[wo({a:og("a",e,t,n),b:og("b",e,t,n),transposeA:og("transposeA",e,t,n),transposeB:og("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return zn((()=>((e,t,n)=>{switch(e.op){case"EuclideanNorm":return[ra(og("x",e,t,n),og("axis",e,t,n),og("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[ar(og("x",e,t,n),og("mean",e,t,n),og("variance",e,t,n),og("offset",e,t,n),og("scale",e,t,n),og("epsilon",e,t,n))];case"LRN":return[wa(og("x",e,t,n),og("radius",e,t,n),og("bias",e,t,n),og("alpha",e,t,n),og("beta",e,t,n))];case"Softmax":return[Pi(og("x",e,t,n))];case"LogSoftmax":return[Ea(og("x",e,t,n))];case"SparseToDense":return[lo(og("sparseIndices",e,t,n),og("outputShape",e,t,n),og("sparseValues",e,t,n),og("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return zn((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[Xr(og("x",e,t,n),s,r)]}case"Mean":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[Wa(og("x",e,t,n),s,r)]}case"Min":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[Yr(og("x",e,t,n),s,r)]}case"Sum":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[ta(og("x",e,t,n),s,r)]}case"All":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[Cs(og("x",e,t,n),s,r)]}case"Any":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[Es(og("x",e,t,n),s,r)]}case"ArgMax":{const s=og("axis",e,t,n);return[As(og("x",e,t,n),s)]}case"ArgMin":{const s=og("axis",e,t,n);return[Rs(og("x",e,t,n),s)]}case"Prod":{const s=og("axis",e,t,n),r=og("keepDims",e,t,n);return[ti(og("x",e,t,n),s,r)]}case"Cumprod":{const s=og("axis",e,t,n),r=og("exclusive",e,t,n),a=og("reverse",e,t,n);return[$r(og("x",e,t,n),s,r,a)]}case"Cumsum":{const s=og("axis",e,t,n),r=og("exclusive",e,t,n),a=og("reverse",e,t,n);return[Cr(og("x",e,t,n),s,r,a)]}case"Bincount":const s=og("x",e,t,n),r=og("weights",e,t,n),a=og("size",e,t,n);return[ur(s,r,a)];case"DenseBincount":{const s=og("x",e,t,n),r=og("weights",e,t,n),a=og("size",e,t,n),i=og("binaryOutput",e,t,n);return[Er(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return zn((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=og("n",e,t,n),r=og("axis",e,t,n);let a=og("tensors",e,t,n);return a=a.slice(0,s),[er(a,r)]}case"Gather":{const s=og("x",e,t,n),r=og("indices",e,t,n);return[pa(s,Nn(r,"int32"),0)]}case"GatherV2":{const s=og("axis",e,t,n),r=og("batchDims",e,t,n),a=og("x",e,t,n),i=og("indices",e,t,n);return[pa(a,Nn(i,"int32"),s,r)]}case"Reverse":{const s=og("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=og("x",e,t,n);return[Ti(a,r)]}case"ReverseV2":{const s=og("axis",e,t,n),r=og("x",e,t,n);return[Ti(r,s)]}case"Slice":{const s=og("begin",e,t,n),r=og("size",e,t,n);return[nr(og("x",e,t,n),s,r)]}case"StridedSlice":{const s=og("begin",e,t,n),r=og("end",e,t,n),a=og("strides",e,t,n),i=og("beginMask",e,t,n),o=og("endMask",e,t,n),l=og("ellipsisMask",e,t,n),u=og("newAxisMask",e,t,n),c=og("shrinkAxisMask",e,t,n),h=og("x",e,t,n);return[Xi(h,s,r,a,i,o,l,u,c)]}case"Pack":return zn((()=>{const s=og("axis",e,t,n),r=og("tensors",e,t,n),a=r[0].shape,i=ji(r[0]).shape,o=r.map((e=>{const t=g(e.shape,a);if(!t&&!g(ji(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:Zs(e,a)}));return[qi(o,s)]}));case"Unpack":{const s=og("axis",e,t,n),r=og("tensor",e,t,n);return so(r,s)}case"Tile":{const s=og("reps",e,t,n);return[la(og("x",e,t,n),s)]}case"Split":case"SplitV":{const s=og("axis",e,t,n),r=og("numOrSizeSplits",e,t,n),a=og("x",e,t,n);return Ui(a,r,s)}case"ScatterNd":{const s=og("indices",e,t,n),r=og("values",e,t,n),a=og("shape",e,t,n);return[oo(s,r,a)]}case"GatherNd":{const s=og("x",e,t,n),r=og("indices",e,t,n);return[uo(s,r)]}case"SparseToDense":{const s=og("sparseIndices",e,t,n),r=og("outputShape",e,t,n),a=og("sparseValues",e,t,n),i=og("defaultValue",e,t,n);return[lo(s,a,r,a.dtype===i.dtype?i:Nn(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return zn((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:a,reverseIndexMap:i}=hl.sparseFillEmptyRows(og("indices",e,t,n),og("values",e,t,n),og("denseShape",e,t,n),og("defaultValue",e,t,n));return[s,r,a,i]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=hl.sparseReshape(og("inputIndices",e,t,n),og("inputShape",e,t,n),og("newShape",e,t,n));return[s,r]}case"SparseSegmentMean":return[hl.sparseSegmentMean(og("data",e,t,n),og("indices",e,t,n),og("segmentIds",e,t,n))];case"SparseSegmentSum":return[hl.sparseSegmentSum(og("data",e,t,n),og("indices",e,t,n),og("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return zn((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Bi(og("x",e,t,n))];case"IFFT":return[Wi(og("x",e,t,n))];case"RFFT":return[Gi(og("x",e,t,n))];case"IRFFT":return[Vi(og("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return zn((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=pl.stringNGrams(og("data",e,t,n),og("dataSplits",e,t,n),og("separator",e,t,n),og("nGramWidths",e,t,n),og("leftPad",e,t,n),og("rightPad",e,t,n),og("padWidth",e,t,n),og("preserveShortSequences",e,t,n));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:a}=pl.stringSplit(og("input",e,t,n),og("delimiter",e,t,n),og("skipEmpty",e,t,n));return[s,r,a]}case"StringToHashBucketFast":return[pl.stringToHashBucketFast(og("input",e,t,n),og("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return zn((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Nn(og("x",e,t,n),og("dtype",e,t,n))];case"ExpandDims":{const s=og("axis",e,t,n);return[ia(og("x",e,t,n),s)]}case"Squeeze":{const s=og("axis",e,t,n);return[ji(og("x",e,t,n),s)]}case"Reshape":return[Zs(og("x",e,t,n),og("shape",e,t,n))];case"MirrorPad":return[Ha(og("x",e,t,n),og("padding",e,t,n),og("mode",e,t,n))];case"PadV2":case"Pad":return[Za(og("x",e,t,n),og("padding",e,t,n),og("constantValue",e,t,n))];case"SpaceToBatchND":{const s=og("blockShape",e,t,n),r=og("paddings",e,t,n);return[Ja(og("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=og("blockShape",e,t,n),r=og("crops",e,t,n);return[rr(og("x",e,t,n),s,r)]}case"DepthToSpace":{const s=og("blockSize",e,t,n),r=og("dataFormat",e,t,n).toUpperCase();return[Ar(og("x",e,t,n),s,r)]}case"BroadcastTo":return[hr(og("x",e,t,n),og("shape",e,t,n))];case"BroadcastArgs":return[cr(og("s0",e,t,n),og("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return iy(e,t,n,s);case"custom":const r=ig(e.op);if(r&&r.customExecutor)return r.customExecutor(new Kg(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return U(r)?r.then((e=>[].concat(e))):[].concat(r)}class ly{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function uy(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>hg(e)[0]));let c=[];null!=s&&(c=s.map((e=>hg(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(dy(e)||fy(e)||my(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const cy=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],hy=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],py=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function dy(e){return cy.indexOf(e.op)>=0}function fy(e){return hy.indexOf(e.op)>=0}function my(e){return py.indexOf(e.op)>=0}class gy{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new gy(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=uy(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>hg(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[hg(e)[0]])),r=t.map((e=>hg(e)[0]));let a=r.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return zn((()=>{const n=new ly(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=hg(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=oy(t,s,n,this._resourceManager);if(U(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>lg(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=function(e,t,n){return t[cg(e,n.currentContextId)]}(e.name,n,s);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,r]=ug(t.name,s);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][r]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}executeAsync(e,n){return t(this,null,(function*(){return this._executeAsync(e,n)}))}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}_executeAsync(e,n){return t(this,arguments,(function*(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=j().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(cR){console.warn(cR.message)}this.resetIntermediateTensors();const a=new ly(this.weightMap,s,r,this.functionExecutorMap);this.tensorsMap=yield this.executeWithControlFlow(e,a,t,n);const i=t.map((e=>lg(e,this.tensorsMap,a))),o=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),i}))}executeFunctionAsync(e,n,s){return t(this,null,(function*(){const t=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(t,this.outputNodes,!0,n,s)}))}executeWithControlFlow(e,n,s,r){return t(this,null,(function*(){const t=Object.keys(e),a=t.map((e=>this.graph.nodes[hg(e)[0]])),i=s.map((e=>hg(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=uy(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:n.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=hg(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,n,d,g,m,i,f,l);yield Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!dy(e)&&!lg(e.name,d,n))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${t}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}))}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&og("isConstant",e.node,s,n)&&([c]=ug(e.node.name,n)),null==s[e.node.name]){const h=oy(e.node,s,n,this._resourceManager);c||([c]=ug(e.node.name,n));const p=n.currentContext;U(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=ug(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!lg(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!lg(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=hg(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;h(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&h(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=hg(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=hg(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class yy{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class by{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new yy}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Fn(e,this.loadOptions);else{const s=(t=e,n=this.loadOptions,Jt.getLoadHandlers(t,n));if(0===s.length)s.push(Fn(e,this.loadOptions));else if(s.length>1)throw new Error(`Found more than one (${s.length}) load handlers for URL '${[e]}'`);this.handler=s[0]}var t,n}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return U(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=function(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=m(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Ut[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=Zt()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=m(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Ut[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=Vt(e,o,"float32"),i=Vt(s,o,"float32");n[t]=Bt(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=Vt(u,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new gy(Fg.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Fg.Instance.transformGraph(e.modelInitializer);this.initializer=new gy(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}save(e,n){return t(this,null,(function*(){if("string"==typeof e){const t=Qt(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}))}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof it||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}executeAsync(e,n){return t(this,null,(function*(){e=this.normalizeInputs(e),n=this.normalizeOutputs(n);const t=yield this.executor.executeAsync(e,n);return t.length>1?t:t[0]}))}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}function xy(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}var ky={exports:{}};!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.alea=a}(0,ky);var vy={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor128=a}(0,vy);var wy={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorwow=a}(0,wy);var Iy={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorshift7=a}(0,Iy);var Ny={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor4096=a}(0,Ny);var Sy={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.tychei=a}(0,Sy);var Ty={exports:{}};!function(e){!function(t,n){var s,r=(0,eval)("this"),a=256,i=n.pow(a,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(a):(e=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(e)),m(e)}catch(cR){var n=r.navigator,i=n&&n.plugins;return[+new Date,r,i,r.screen,m(t)]}}():e,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,r=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<a;)o[r]=r++;for(r=0;r<a;r++)o[r]=o[i=u&i+e[r%n]+(t=o[r])],o[i]=t;(s.g=function(e){for(var t,n=0,r=s.i,i=s.j,o=s.S;e--;)t=o[r=u&r+1],n=n*a+o[u&(o[r]=o[i=u&i+t])+(o[i]=t)];return s.i=r,s.j=i,n})(a)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(cR){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=require("crypto")}catch(g){}}}([],Math)}(Ty);var $y,Cy,Ey=ky.exports,Ay=vy.exports,Ry=wy.exports,_y=Iy.exports,Fy=Ny.exports,Dy=Sy.exports,Oy=Ty.exports;Oy.alea=Ey,Oy.xor128=Ay,Oy.xorwow=Ry,Oy.xorshift7=_y,Oy.xor4096=Fy,Oy.tychei=Dy,(Cy=$y||($y={}))[Cy.FAIL=0]="FAIL",Cy[Cy.SHORTEST=1]="SHORTEST",Cy[Cy.LONGEST=2]="LONGEST";function My(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&h("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const Ly=ao;class zy extends a{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r(this,Mn())}nextDataId(){return zy.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,j().get("IS_NODE")&&Z("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>qe(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}read(e){return t(this,null,(function*(){return this.readSync(e)}))}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Ol(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Ke(e)));return In(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return In(e.shape,e.dtype,t)}makeOutput(e,t,n){return Mn().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return t(this,null,(function*(){const t=je();e();return{kernelMs:je()-t}}))}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){My([e],"where");const t=this.readSync(e.dataId);return Ly(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Py(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}zy.nextDataId=0;const By={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;My(t,"abs");let s=new Float32Array(m(t.shape));return s=Py(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}};function Wy(e){return(t,n,s,r,a)=>{const i=Kn(t,n),o=i.length,l=D(i),u=N(a,m(i)),c=t.length,h=n.length,p=D(t),d=D(n),f=jn(t,i),g=jn(n,i);if(f.length+g.length===0)for(let m=0;m<u.length;++m)u[m]=e(s[m%s.length],r[m%r.length]);else for(let m=0;m<u.length;++m){const t=V(m,o,l),n=t.slice(-c);f.forEach((e=>n[e]=0));const a=W(n,c,p),i=t.slice(-h);g.forEach((e=>i[e]=0));const y=W(i,h,d);u[m]=e(s[a],r[y])}return[u,i]}}function Vy(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Uy={kernelName:"Complex",backendName:"cpu",kernelFunc:Vy};function Gy(e,t,n="float32"){if("complex64"===n){return Vy({inputs:{real:Gy(e,t,"float32"),imag:Gy(e,t,"float32")},backend:e})}const s=z(m(t),n);return e.makeTensorInfo(t,n,s)}function Hy(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const jy={kernelName:"Identity",backendName:"cpu",kernelFunc:Hy};function qy(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Ky={kernelName:"Real",backendName:"cpu",kernelFunc:qy};function Xy(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Hy({inputs:{x:r},backend:n});const e=Gy(n,r.shape,r.dtype),t=Xy({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Vy({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=qy({inputs:{input:r},backend:n}),t=Xy({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!T(r.dtype,a)){const e=Hy({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=He([0],r.dtype),[s,a]=Wy(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const Yy={kernelName:"Cast",backendName:"cpu",kernelFunc:Xy};function Zy(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;My([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?du(l):l,h="string"===a.dtype?du(u):u,p=s||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Xy({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=Xy({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),k=o.makeTensorInfo(b,"float32",y),v=Vy({inputs:{real:x,imag:k},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(k),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function Jy(e){return(t,n,s,r,a,i)=>{const o=Kn(t,n),l=m(o),u=o.length,c=D(o),h=N("float32",l),p=N("float32",l),d=jn(t,o),f=jn(n,o),g=Ol(s,r),y=Ol(a,i),b=t.length,x=D(t),k=n.length,v=D(n);if(d.length+f.length===0)for(let m=0;m<h.length;m++){const t=m%g.length,n=m%y.length,s=e(g[2*t],g[2*t+1],y[2*n],y[2*n+1]);h[m]=s.real,p[m]=s.imag}else for(let m=0;m<h.length;m++){const t=V(m,u,c),n=t.slice(-b);d.forEach((e=>n[e]=0));const s=W(n,b,x),r=t.slice(-k);f.forEach((e=>r[e]=0));const a=W(r,k,v),i=e(g[2*s],g[2*s+1],y[2*a],y[2*a+1]);h[m]=i.real,p[m]=i.imag}return[h,p,o]}}const Qy=Wy(((e,t)=>e+t)),eb=Zy("Add",Qy,Jy(((e,t,n,s)=>({real:e+n,imag:t+s})))),tb={kernelName:"Add",backendName:"cpu",kernelFunc:eb};function nb(e,t,n,s,r){const a=m(s),i=z(r,n);for(let o=0;o<e.length;o++){const n=e[o];if(n<0)throw new Error("Input x must be non-negative!");n>=r||(i[n]+=a>0?t[o]:1)}return i}function sb(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=In([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}function rb(e){return(t,n,s)=>{const r=N(n,t.length);for(let a=0;a<t.length;++a)r[a]=e(t[a],s);return r}}function ab(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(My(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=m(i.shape),c=n||i.dtype,h=S(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function ib(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(My(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}const ob=rb((e=>Math.ceil(e))),lb={kernelName:"Ceil",backendName:"cpu",kernelFunc:ib("Ceil",ob)};function ub(e,t,n,s){const r=S(n,m(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=m(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?du(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}const cb=Wy(((e,t)=>e===t?1:0)),hb=Zy("Equal",cb,null,"bool"),pb={kernelName:"Equal",backendName:"cpu",kernelFunc:hb},db=rb((e=>Math.exp(e))),fb=ib("Exp",db,"float32"),mb={kernelName:"Exp",backendName:"cpu",kernelFunc:fb},gb=rb((e=>Math.expm1(e))),yb={kernelName:"Expm1",backendName:"cpu",kernelFunc:ib("Expm1",gb)},bb=rb((e=>Math.floor(e))),xb={kernelName:"Floor",backendName:"cpu",kernelFunc:ib("Floor",bb)};function kb(e,t,n,s,r,a,i,o,l){const u=In([s,a],n);for(let c=0;c<s;c++){const n=[];let s=0;for(let t=0;t<r;t++){const a=e[c*r+t];s+=a*i[t],n.push(a)}if(s<0||s>=l/a)throw new Error(`Invalid indices: ${n} does not index into ${o}`);for(let e=0;e<a;e++)u.values[c*a+e]=t.get(...t.indexToLoc(s*a+e))}return u}function vb(e,t,n){const s=In(n,e.dtype);for(let r=0;r<s.size;++r){const n=s.indexToLoc(r).slice(),a=n[0],i=n[2],o=t.locToIndex([a,i]);n[2]=t.values[o];const l=e.locToIndex(n);0<=l&&l<e.values.length&&(s.values[r]=e.values[l])}return s}const wb=Wy(((e,t)=>e>t?1:0)),Ib={kernelName:"Greater",backendName:"cpu",kernelFunc:Zy("Greater",wb,null,"bool")},Nb=Wy(((e,t)=>e>=t?1:0)),Sb={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Zy("GreaterEqual",Nb,null,"bool")},Tb=Wy(((e,t)=>e<t?1:0)),$b={kernelName:"Less",backendName:"cpu",kernelFunc:Zy("Less",Tb,null,"bool")},Cb=Wy(((e,t)=>e<=t?1:0)),Eb={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Zy("LessEqual",Cb,null,"bool")};function Ab(e,t,n){const s=(t-e)/(n-1),r=z(n,"float32");r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+s;return r}const Rb=rb((e=>Math.log(e))),_b={kernelName:"Log",backendName:"cpu",kernelFunc:ib("Log",Rb)};function Fb(e,t,n,s){const r=N(s,m(n));for(let a=0;a<r.length;++a){const n=a*t;let s=e[n];for(let r=0;r<t;++r){const t=e[n+r];(Number.isNaN(t)||t>s)&&(s=t)}r[a]=s}return r}const Db=Wy(((e,t)=>Math.max(e,t))),Ob={kernelName:"Maximum",backendName:"cpu",kernelFunc:Zy("Maximum",Db)},Mb=Wy(((e,t)=>Math.min(e,t))),Lb={kernelName:"Minimum",backendName:"cpu",kernelFunc:Zy("Minimum",Mb)},zb=Wy(((e,t)=>e*t)),Pb=Jy(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),Bb=Zy("Multiply",zb,Pb),Wb={kernelName:"Multiply",backendName:"cpu",kernelFunc:Bb};function Vb(e,t,n){const s=Ge(-1,n);return zb([],t,s,e,n)}const Ub={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;My(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=Vb(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},Gb=Wy(((e,t)=>e!==t?1:0)),Hb={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Zy("NotEqual",Gb,null,"bool")};function jb(e,t,n,s,r){const a=t.length,i=m(t),o=D(t),l=D(r),u=N(n,m(r));for(let c=0;c<i;++c){const t=V(c,a,o),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[s[e]];u[W(n,a,l)]=e[c]}return u}function qb(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;My(r,"transpose");const i=r.shape.length,o=new Array(i);for(let u=0;u<o.length;u++)o[u]=r.shape[a[u]];const l=jb(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Kb={kernelName:"Transpose",backendName:"cpu",kernelFunc:qb};function Xb(e,t,n,s){const[r,a]=Ur(e,s),i=kt(t,"int32"),o=z(m(r),i),l=m(a);for(let u=0;u<o.length;++u){const e=u*l;let t=1;for(let s=0;s<l;++s)t*=n[e+s];o[u]=t}return{outVals:o,outShape:r,outDtype:i}}const Yb={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;My(r,"prod");const o=r.shape.length,l=w(a,r.shape),u=jr(l,o);let c=l,h=r;const p=[];null!=u&&(h=qb({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Kr(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=Xb(h.shape,h.dtype,d,c);let y=m;return i&&(y=Gr(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function Zb(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return z(0,s);const r=z(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let a=1;a<r.length;a++)r[a]=r[a-1]+n;return r}const Jb=rb((e=>1/Math.sqrt(e))),Qb={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:ib("Rsqrt",Jb)};function ex(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return In(n,t.dtype);const d=In(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let f=0;f<a;f++){const e=[];let a=0;for(let t=0;t<i;t++){const n=h[f*i+t];e.push(n),a+=n*o[t]}if(a<0||a>=s/r)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[a*r+n]+=p[f*r+n]:d.values[a*r+n]=0===t.rank?p[0]:p[f*r+n]}return d}const tx=rb((e=>1/(1+Math.exp(-e)))),nx=ab("Sigmoid",(e=>1/(1+Math.exp(-e)))),sx={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:nx};function rx(e,t,n,s,r){const a=hs(s,t,n),i=m(n),o=D(s);if(a){const n=ps(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=In(s,r,"string"===r?du(e):e),u=In(n,r);for(let c=0;c<u.size;++c){const e=u.indexToLoc(c),n=e.map(((e,n)=>e+t[n]));u.set(l.get(...n),...e)}return"string"===r?fu(u.values):u.values}function ax(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;My(r,"slice");const[o,l]=ds(r,a,i);ts(r,o,l);const u=rx(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const ix={kernelName:"Slice",backendName:"cpu",kernelFunc:ax};function ox(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Zl(o));return[S(n,0),[0,h],S(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let g=0;g<o;++g){const t=e[g*h];if(t<0)throw new Error(Jl(g,t));if(t>=l)throw new Error(Ql(g,t,l));++f[t],p=p&&t>=d,d=t}let m=!0;for(let g=0;g<l;++g){const e=0===f[g];u[g]=e,m=m&&!e,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=S(n,t*h),p=S(r,t),d=new Array(l).fill(0);for(let n=0;n<o;++n){const t=e[n*h],r=d[t],i=(0===t?0:f[t-1])+r;d[t]++;for(let s=0;s<h;++s)a[i*h+s]=e[n*h+s];p[i]=s[n],c[n]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,u,c]}}function lx(e,t,n,s,r){const a=m(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let m=0;m<o;++m){const e=r[m];if(-1===e){if(-1!==c)throw new Error(eu(c,m));c=m,l.push(1)}else{if(e<0)throw new Error(tu(m,e));u*=e,l.push(e)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(su(s,l));l[c]=e}if(m(l)!==a)throw new Error(ru(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=S(n,i*o);for(let m=0;m<i;++m){let t=0;for(let n=0;n<h;++n)t+=e[m*h+n]*p[n];for(let e=0;e<o;++e)f[m*o+e]=Math.trunc(t/d[e]),t%=d[e]}return[f,[i,o],l]}function ux(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const p=S(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&p.fill(i),[p,h];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=r[d];for(;;){let t=0;if(f<o){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(ou(g,c));g>m&&p.fill(i,m*u,g*u);for(let n=d;n<f;++n){const t=s[n];if(t<0||t>=l[0])throw new Error(lu(n,s[n],l[0]));for(let n=0;n<u;n++)p[g*u+n]+=e[t*u+n]}if(a)for(let e=0;e<u;e++)p[g*u+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>o)break}return m<c&&p.fill(i,m*u,c*u),[p,h]}const cx=rb((e=>Math.sqrt(e))),hx={kernelName:"Sqrt",backendName:"cpu",kernelFunc:ab("Sqrt",(e=>Math.sqrt(e)))},px=Wy(((e,t)=>{const n=e-t;return n*n})),dx={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Zy("SquaredDifference",px)};function fx(e,t,n,s){const r=In(e,t.dtype);for(let a=0;a<r.size;a++){const e=r.indexToLoc(a),i=new Array(e.length);for(let t=0;t<i.length;t++)i[t]=e[t]*n[t]+s[t];r.set(t.get(...i),...e)}return r}class mx{constructor(e,t,n,s,r,a){this.separator=qe(e),this.nGramWidths=t,this.leftPad=qe(n),this.rightPad=qe(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length;p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=S("int32",s);if(0===n||0===s){const e=new Array(n);for(let t=0;t<=r;++t)a[t]=0;return[e,a]}a[0]=0;for(let o=1;o<=r;++o){const e=t[o]-t[o-1];let n=0;this.nGramWidths.forEach((t=>{n+=this.getNumNGrams(e,t)})),this.preserveShort&&e>0&&0===n&&(n=1),a[o]=a[o-1]+n}const i=new Array(a[r]);for(let o=0;o<r;++o){const n=t[o];let s=a[o];if(this.nGramWidths.forEach((r=>{const a=t[o+1]-t[o],l=this.getNumNGrams(a,r);this.createNGrams(e,n,i,s,l,r),s+=l})),this.preserveShort&&s===a[o]){const r=t[o+1]-t[o];if(0===r)continue;const a=r+2*this.padWidth,l=1;this.createNGrams(e,n,i,s,l,a)}}return[i,a]}}function gx(e,t,n,s,r,a,i,o){return new mx(n,s,r,a,i,o).compute(e,t)}function yx(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function bx(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let p=0;p<s;++p){const s=r.length;yx(e[p],t,n,r);const l=r.length-s;o[p]=l,a+=l,i=Math.max(i,l)}const l=S("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let p=0;p<s;++p)for(let e=0;e<o[p];++e)l[2*h]=p,l[2*h+1]=e,u[h]=r[h],++h;return[l,u,c]}function xx(e,t){const n=S("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Ue(e[s]).modulo(t).getLowBitsUnsigned();return n}const kx=Wy(((e,t)=>e-t)),vx=Zy("Sub",kx,Jy(((e,t,n,s)=>({real:e-n,imag:t-s})))),wx={kernelName:"Sub",backendName:"cpu",kernelFunc:vx};function Ix(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const s=In(n,e.dtype);for(let r=0;r<s.values.length;++r){const t=s.indexToLoc(r),n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=t[s]%e.shape[s];const a=e.locToIndex(n);s.values[r]=e.values[a]}return s}const Nx=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function Sx(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);Sx(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(c(e,n,t),Nx(e[s],r)>0&&c(e,n,s);a<i;){for(c(e,a,i),a++,i--;Nx(e[a],r)<0;)a+=1;for(;Nx(e[i],r)>0;)i-=1}0===Nx(e[n],r)?c(e,n,i):(i+=1,c(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function Tx(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=N(n,i*s),u=N("int32",i*s);for(let h=0;h<i;h++){const t=h*o,n=e.subarray(t,t+o);let a=new Array(n.length);n.forEach(((e,t)=>a[t]={value:e,index:t})),s<a.length&&(Sx(a,s),a=a.slice(0,s)),r&&a.sort(Nx);const i=h*s,c=l.subarray(i,i+s),p=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,p[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[In(c,n,l),In(c,"int32",u)]}function $x(e,t,n,s){const r=w(t,n)[0],a=[1,n[0],1];for(let f=0;f<r;f++)a[0]*=n[f];a[1]=n[r];for(let f=r+1;f<n.length;f++)a[2]*=n[f];const i={},o=new Int32Array(n[r]),l=new st(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let f=0;f<n[r];f++){let t;if(c)t=e[f].toString();else{const e=[];for(let t=0;t<a[0];t++)for(let n=0;n<a[2];n++)e.push(l.get(t,f,n));t=e.join(",")}if(void 0!==i[t])o[f]=i[t];else{const e=Object.keys(i).length;i[t]=e,o[f]=e,u.push(f)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new st(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}var Cx=Object.freeze(Object.defineProperty({__proto__:null,simpleAbsImpl:Py,addImpl:Qy,bincountImpl:nb,bincountReduceImpl:sb,ceilImpl:ob,concatImpl:ub,equalImpl:cb,expImpl:db,expm1Impl:gb,floorImpl:bb,gatherNdImpl:kb,gatherV2Impl:vb,greaterImpl:wb,greaterEqualImpl:Nb,lessImpl:Tb,lessEqualImpl:Cb,linSpaceImpl:Ab,logImpl:Rb,maxImpl:Fb,maximumImpl:Db,minimumImpl:Mb,multiplyImpl:zb,negImpl:Vb,notEqualImpl:Gb,prodImpl:Xb,rangeImpl:Zb,rsqrtImpl:Jb,scatterImpl:ex,sigmoidImpl:tx,sliceImpl:rx,sparseFillEmptyRowsImpl:ox,sparseReshapeImpl:lx,sparseSegmentReductionImpl:ux,sqrtImpl:cx,squaredDifferenceImpl:px,stridedSliceImpl:fx,stringNGramsImpl:gx,stringSplitImpl:bx,stringToHashBucketFastImpl:xx,subImpl:kx,tileImpl:Ix,topKImpl:Tx,transposeImpl:jb,uniqueImpl:$x},Symbol.toStringTag,{value:"Module"}));Wn("cpu",(()=>new zy),1);const Ex=ab("Elu",(e=>e>=0?e:Math.exp(e)-1)),Ax={kernelName:"Elu",backendName:"cpu",kernelFunc:Ex};function Rx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;My([r],"leakyRelu");const i=m(r.shape),o=n.data.get(r.dataId).values,l=N("float32",i);for(let u=0;u<o.length;u++)l[u]=o[u]<0?a*o[u]:o[u];return n.makeTensorInfo(r.shape,"float32",l)}const _x={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:Rx},Fx=Wy(((e,t)=>e<0?t*e:e));function Dx(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;My([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Fx(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const Ox={kernelName:"Prelu",backendName:"cpu",kernelFunc:Dx},Mx=ab("Relu",(e=>Math.max(0,e))),Lx={kernelName:"Relu",backendName:"cpu",kernelFunc:Mx},zx=ab("Relu6",(e=>Math.min(Math.max(0,e),6))),Px={kernelName:"Relu6",backendName:"cpu",kernelFunc:zx};function Bx(e,t,n,s,r){if("linear"===n)return Hy({inputs:{x:t},backend:e});if("relu"===n)return Mx({inputs:{x:t},backend:e});if("elu"===n)return Ex({inputs:{x:t},backend:e});if("relu6"===n)return zx({inputs:{x:t},backend:e});if("prelu"===n)return Dx({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Rx({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return nx({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Wx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=m(r.shape),o=v(a,i),l=m(o);h(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Vx={kernelName:"Reshape",backendName:"cpu",kernelFunc:Wx};function Ux(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;My([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],p=o?a.shape[u-1]:a.shape[u-2],d=i?r.shape[l-1]:r.shape[l-2],f=o?a.shape[u-2]:a.shape[u-1],g=r.shape.slice(0,-2),y=a.shape.slice(0,-2),b=m(g),x=m(y),k=Kn(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,f]);h(c===p,(()=>`Error in matMul: inner shapes (${c}) and (${p}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const v=o?[x,f,p]:[x,p,f],w=Wx({inputs:{x:r},backend:n,attrs:{shape:i?[b,c,d]:[b,d,c]}}),I=Wx({inputs:{x:a},backend:n,attrs:{shape:v}}),N=i?w.shape[1]:w.shape[2],S=i?w.shape[2]:w.shape[1],T=o?I.shape[1]:I.shape[2],$=Math.max(b,x),C=n.data.get(w.dataId).values,E=n.data.get(I.dataId).values,A=D(w.shape),R=D(I.shape),[_,F,O]=i?[A[0],1,A[1]]:[A[0],A[1],1],[M,L,z]=o?[1,R[1],R[0]]:[R[1],1,R[0]],P=S*T,B=In([$,S,T],w.dtype),W=B.values,V=n.blockSize;for(let h=0;h<$;h++)for(let e=0;e<S;e+=V)for(let t=0;t<T;t+=V)for(let n=0;n<N;n+=V){const s=Math.min(e+V,S),r=Math.min(t+V,T),a=Math.min(n+V,N);for(let i=e;i<s;i++)for(let e=t;e<r;e++){let t=0;for(let s=n;s<a;s++){const n=Math.min(h,b-1)*_,r=Math.min(h,x-1)*z;t+=C[n+i*F+s*O]*E[s*M+e*L+r]}W[h*P+(i*T+e)]+=t}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(k,B.dtype,B.values)}const Gx={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:Ux};const Hx={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Ux({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=eb({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Bx(n,p,c,o,h),m.push(p),p=f);for(const g of m)n.disposeIntermediateTensorInfo(g);return p}},jx={kernelName:"Acos",backendName:"cpu",kernelFunc:ab("Acos",(e=>Math.acos(e)))},qx={kernelName:"Acosh",backendName:"cpu",kernelFunc:ab("Acosh",(e=>Math.acosh(e)))};const Kx={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;My(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=In(s[0].shape,s[0].dtype),i=a.values;for(let o=0;o<s.length;o++){const e=r[o];for(let t=0;t<i.length;t++)i[t]+=e[t]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};const Xx={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;My(r,"all");const o=w(a,r.shape);let l=o;const u=jr(l,r.shape.length);let c=r;null!=u&&(c=qb({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Kr(l.length,r.shape.length)),Hr("all",l,c.shape.length);const[h,p]=Ur(c.shape,l),d=m(p),f=z(m(h),c.dtype),g=n.data.get(c.dataId).values;for(let m=0;m<f.length;++m){const e=m*d;let t=g[e];for(let n=0;n<d;++n){const s=g[e+n];t=t&&s}f[m]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Wx({inputs:{x:y},backend:n,attrs:{shape:Gr(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Yx={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;My(r,"any");const o=w(a,r.shape);let l=o;const u=jr(l,r.shape.length);let c=r;null!=u&&(c=qb({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Kr(l.length,r.shape.length)),Hr("any",l,c.shape.length);const[h,p]=Ur(c.shape,l),d=m(p),f=z(m(h),c.dtype),g=n.data.get(c.dataId).values;for(let m=0;m<f.length;++m){const e=m*d;let t=g[e];for(let n=0;n<d;++n){const s=g[e+n];t=t||s}f[m]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Wx({inputs:{x:y},backend:n,attrs:{shape:Gr(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Zx={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;My(r,"argMax");let i=w(a,r.shape);const o=jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=qb({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Kr(i.length,l.shape.length)),i=[i[0]],Hr("argMax",i,l.shape.length);const[c,h]=Ur(l.shape,i),p=z(m(c),"int32"),d=m(h),f=n.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const e=m*d;let t=f[e],n=0;for(let s=0;s<d;++s){const r=f[e+s];r>t&&(t=r,n=s)}p[m]=n}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}};const Jx={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;My(r,"argMin");let i=w(a,r.shape);const o=jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=qb({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Kr(i.length,l.shape.length)),i=[i[0]],Hr("argMin",i,l.shape.length);const[c,h]=Ur(l.shape,i),p=z(m(c),"int32"),d=m(h),f=n.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const e=m*d;let t=f[e],n=0;for(let s=0;s<d;++s){const r=f[e+s];r<t&&(t=r,n=s)}p[m]=n}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},Qx={kernelName:"Asin",backendName:"cpu",kernelFunc:ab("Asin",(e=>Math.asin(e)))},ek={kernelName:"Asinh",backendName:"cpu",kernelFunc:ab("Asinh",(e=>Math.asinh(e)))},tk={kernelName:"Atan",backendName:"cpu",kernelFunc:ab("Atan",(e=>Math.atan(e)))},nk={kernelName:"Atan2",backendName:"cpu",kernelFunc:Zy("Atan2",Wy(((e,t)=>Math.atan2(e,t))))},sk={kernelName:"Atanh",backendName:"cpu",kernelFunc:ab("Atanh",(e=>Math.atanh(e)))};function rk(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=In(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let k=0;k<r.batchSize;++k){const t=k*y,n=k*s[0];for(let m=0;m<r.inChannels;++m)for(let y=0;y<r.outHeight;++y){const k=y*i-p,v=Math.max(0,k),w=Math.min(r.inHeight,c+k),I=t+y*b;for(let t=0;t<r.outWidth;++t){const i=t*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,k=0;for(let t=v;t<w;t+=l){const r=n+t*s[1];for(let t=c;t<p;t+=u){const n=e[r+t*s[2]+m];"max"===a&&n>y?y=n:"avg"===a&&(b+=n,k++)}if(isNaN(y))break}g[I+t*x+m]="avg"===a?b/k:y}}}return m}function ak(e,t,n,s,r=!1,a=!1){const i=In(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=In(t,n,e);for(let g=0;g<s.batchSize;++g)for(let e=0;e<s.inChannels;++e)for(let t=0;t<s.outHeight;++t){const n=t*o-d;let y=n;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+n);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let k=Number.NEGATIVE_INFINITY,v=-1;for(let t=y;t<b;t+=u){const i=t-n;for(let n=d;n<x;n+=c){const o=n-h,l=m.get(g,t,n,e);l>k&&(k=l,v=r?a?((g*s.inHeight+t)*s.inWidth+n)*s.inChannels+e:(t*s.inWidth+n)*s.inChannels+e:i*p+o)}}i.set(v,g,t,o,e)}}return i}function ik(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=In(r.outShape,n),k=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],w=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let S=0;S<r.batchSize;++S){const t=S*v,n=S*s[0];for(let x=0;x<r.inChannels;++x)for(let v=0;v<r.outDepth;++v){const S=v*i-m;let T=S;for(;T<0;)T+=u;const $=Math.min(r.inDepth,p+S),C=t+v*w;for(let t=0;t<r.outHeight;++t){const i=t*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),v=C+t*I;for(let t=0;t<r.outWidth;++t){const i=t*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=v+t*N;let w=b,I=0,S=0;for(let t=T;t<$;t+=u){const r=n+t*s[1];for(let t=p;t<m;t+=c){const n=r+t*s[2];for(let t=o;t<d;t+=h){const r=e[n+t*s[3]+x];if("max"===a&&r>w?w=r:"avg"===a&&(I+=r,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}k[g+x]="avg"===a?I/S:w}}}}return x}const ok={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;My(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(Ks(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=zs(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))c=Hy({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=D(r.shape),s=rk(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const lk={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;My(r,"avgPool3d");const c=Ps(r.shape,a,i,1,o,l,u),h=ik(n.data.get(r.dataId).values,r.shape,r.dtype,D(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const uk={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;My([r,a],"avgPool3DGrad");const c=Ps(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,k=c.effectiveFilterDepth,v=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=k-1-c.padInfo.front,N=w-1-c.padInfo.left,S=v-1-c.padInfo.top,T=In(a.shape,"float32"),$=1/(f*m*g),C=n.bufferSync(r);for(let E=0;E<c.batchSize;++E)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-I,a=n-S,i=s-N;let o=0;for(let t=0;t<k;t+=y){const n=(r+t)/h;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let t=0;t<v;t+=b){const s=(a+t)/p;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let t=0;t<w;t+=x){const r=(i+t)/d;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;o+=C.get(E,n,s,r,e)}}}T.set(o*$,E,t,n,s,e)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const ck={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;My([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=zs(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,k=y-1-c.padInfo.top,v=In(i.shape,"float32"),w=1/(d*f),I=n.data.get(r.dataId).values,N=In(r.shape,"float32",I);for(let S=0;S<c.batchSize;++S)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inHeight;++t)for(let n=0;n<c.inWidth;++n){const s=t-k,r=n-x;let a=0;for(let t=0;t<y;t+=m){const n=(s+t)/h;if(!(n<0||n>=c.outHeight||Math.floor(n)!==n))for(let t=0;t<b;t+=g){const s=(r+t)/p;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;a+=N.get(S,n,s,e)}}v.set(a*w,S,t,n,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const hk={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;h(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),h(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),h(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),My([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),y=m.length,b=f.length,x=d.length,k=p.length;let v=0,w=0,I=0,N=0;for(let h=0;h<c.length;++h)g[h]=m[v++]+(c[h]-p[w++])*f[I++]/Math.sqrt(d[N++]+u),v>=y&&(v=0),w>=k&&(w=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(r.shape,r.dtype,g)}};const pk={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;My([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=El(r.shape,a,o),u=Al(l.length,a.length),c=Rl(r.shape,a,o),h=_l(i,a.length),p=Fl(c,i,a.length),d=Wx({inputs:{x:r},backend:n,attrs:{shape:l}}),f=qb({inputs:{x:d},backend:n,attrs:{perm:u}}),m=Wx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=ax({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const dk={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=nb(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};const fk={kernelName:"BroadcastArgs",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=Kn(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},mk={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:ab("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},gk={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(m(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let u=0;u<o.length;u++){const e=o[u],t=l[u];s[u]=Math.hypot(e,t)}return n.makeOutput(s,t.shape,"float32")}};function yk(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const bk={kernelName:"Imag",backendName:"cpu",kernelFunc:yk};function xk(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=w(r,t[0].shape)[0];let i=Tl(t.map((e=>e.shape)),a);if(0===m(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>m(e.shape)>0));if(1===o.length)return Hy({inputs:{x:o[0]},backend:n});if(Sl(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>qy({inputs:{input:e},backend:n}))),t=o.map((e=>yk({inputs:{input:e},backend:n}))),s=xk({inputs:e,backend:n,attrs:{axis:a}}),r=xk({inputs:t,backend:n,attrs:{axis:a}}),i=Vy({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=m(e.shape.slice(a));return Wx({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Tl(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=ub(u,i,t[0].dtype,c),p=Tl(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const kk={kernelName:"Concat",backendName:"cpu",kernelFunc:xk};function vk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;My([r,a],"conv2d");const h=Xs(l),p=Bs(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,k=new st(p.outShape,r.dtype),v=D(r.shape),w=D(a.shape),I=v[0],N=x?v[1]:v[2],S=x?v[2]:1,T=x?1:v[1],$=k.strides[0],C=x?k.strides[1]:k.strides[2],E=x?k.strides[2]:1,A=x?1:k.strides[1],R=n.data.get(r.dataId).values,_=n.data.get(a.dataId).values,F=k.values;for(let D=0;D<p.batchSize;++D){const e=D*I,t=D*$;for(let n=0;n<p.outHeight;++n){const s=t+n*C,r=n*p.strideHeight-b;for(let t=0;t<d;++t){const n=r+t*m;if(n<0||n>=p.inHeight)continue;const a=t*w[0],i=e+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*S;let o=a+e*w[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*T];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*_[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,F)}const wk={kernelName:"Conv2D",backendName:"cpu",kernelFunc:vk};const Ik={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;My([r,a],"conv2dBackpropFilter");const h=Xs(l),p=Bs(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new st(p.filterShape,"float32"),x=p.padInfo.left,k=p.padInfo.top,v=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=new st(r.shape,r.dtype,v),N=new st(a.shape,a.dtype,w);for(let S=0;S<m;++S){const e=Math.max(0,Math.ceil((k-S)/d)),t=Math.min(p.outHeight,(p.inHeight+k-S)/d);for(let n=0;n<g;++n){const s=Math.max(0,Math.ceil((x-n)/f)),r=Math.min(p.outWidth,(p.inWidth+x-n)/f);for(let a=0;a<p.inChannels;++a)for(let i=0;i<p.outChannels;++i){let o=0;for(let l=0;l<p.batchSize;++l)for(let u=e;u<t;++u){const e=S+u*d-k;for(let t=s;t<r;++t){const s=n+t*f-x;o+=y?I.get(l,e,s,a)*N.get(l,u,t,i):I.get(l,a,e,s)*N.get(l,i,u,t)}}b.set(o,S,n,a,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Nk={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;My([r,a],"conv2dBackpropInput");const h=D(a.shape),p=D(r.shape);let d=Xs(u);const f=Bs(i,a.shape,o,1,l,c,!1,d),m=new st(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,k,v]=h,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:S,inHeight:T,inWidth:$,outChannels:C,outHeight:E,outWidth:A,strideHeight:R,strideWidth:_}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,O=N-1-f.padInfo.left,M="channelsLast"===d,L=m.strides[0],z=M?m.strides[1]:m.strides[2],P=M?m.strides[2]:1,B=M?1:m.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let D=0;D<w;++D)for(let e=0;e<S;++e)for(let t=0;t<T;++t){const n=t-F,s=Math.max(0,Math.ceil(n/R)),r=Math.min(E,(I+n)/R);for(let a=0;a<$;++a){const i=a-O,o=Math.max(0,Math.ceil(i/_)),l=Math.min(A,(N+i)/_);let u=0;for(let t=s;t<r;++t){const s=t*R-n;for(let n=o;n<l;++n){const r=W*D+V*t+U*n,a=x*(I-1-s)+k*(N-1-(n*_-i))+v*e;for(let e=0;e<C;++e){u+=y[r+G*e]*b[a+e]}}}g[L*D+z*t+P*a+B*e]=u}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Sk={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;My([r,a],"conv3d");const u=Ws(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,k=new st(u.outShape,r.dtype),v=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=k.values,N=D(r.shape),S=D(a.shape);for(let T=0;T<u.batchSize;++T){const e=T*N[0],t=T*k.strides[0];for(let n=0;n<u.outDepth;++n){const s=t+n*k.strides[1],r=n*u.strideDepth-y;for(let t=0;t<c;++t){const n=r+t*d;if(n<0||n>=u.inDepth)continue;const a=t*S[0],i=e+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*k.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const Tk={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;My([r,a],"conv3dBackpropFilterV2");const u=D(r.shape),c=D(a.shape),h=Ws(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new st(h.filterShape,"float32"),x=b.values,[k,v,w,I]=b.strides,N=n.data.get(a.dataId).values,[S,T,$,C]=c,E=n.data.get(r.dataId).values,[A,R,_,F]=u,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let D=0;D<m;++D){const e=Math.max(0,Math.ceil((O-D)/p)),t=Math.min(h.outDepth,(h.inDepth+O-D)/p),n=D*k;for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((L-s)/d)),a=Math.min(h.outHeight,(h.inHeight+L-s)/d),i=s*v+n;for(let n=0;n<y;++n){const o=Math.max(0,Math.ceil((M-n)/f)),l=Math.min(h.outWidth,(h.inWidth+M-n)/f),u=n*w+i;for(let i=0;i<h.inChannels;++i){const c=i*I+u;for(let u=0;u<h.outChannels;++u){let m=0;for(let c=0;c<h.batchSize;++c){const h=c*A,g=c*S;for(let c=e;c<t;++c){const e=(D+c*p-O)*R+h,t=c*T+g;for(let c=r;c<a;++c){const r=(s+c*d-L)*_+e,a=c*$+t;for(let e=o;e<l;++e){const t=e*C+a;m+=E[(n+e*f-M)*F+r+i]*N[t+u]}}}}x[c+u]=m}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const $k={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;My([r],"conv3dBackpropInputV2");const u=D(r.shape),c=D(a.shape),h=Ws(l,a.shape,o,1,i),p=new st(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,k,v,w]=u,I=n.data.get(a.dataId).values,[N,S,T,$]=c,{batchSize:C,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:_,inDepth:F,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:P,outWidth:B,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=E-1-h.padInfo.front,H=A-1-h.padInfo.top,j=R-1-h.padInfo.left;for(let D=0;D<C;++D)for(let e=0;e<_;++e)for(let t=0;t<F;++t){const n=t-G,s=Math.max(0,Math.ceil(n/W)),r=Math.min(z,(E+n)/W);for(let a=0;a<O;++a){const i=a-H,o=Math.max(0,Math.ceil(i/V)),l=Math.min(P,(A+i)/V);for(let u=0;u<M;++u){const c=u-j,h=Math.max(0,Math.ceil(c/U)),p=Math.min(B,(R+c)/U);let C=0;for(let t=s;t<r;++t){const s=t*W-n;for(let n=o;n<l;++n){const r=n*V-i;for(let a=h;a<p;++a){const i=x*D+k*t+v*n+w*a,o=N*(E-1-s)+S*(A-1-r)+T*(R-1-(a*U-c))+$*e;for(let e=0;e<L;++e){C+=b[i+e]*I[o+e]}}}}d[f*D+m*t+g*a+y*u+e]=C}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Ck={kernelName:"Cos",backendName:"cpu",kernelFunc:ab("Cos",(e=>Math.cos(e)))},Ek={kernelName:"Cosh",backendName:"cpu",kernelFunc:ab("Cosh",(e=>Math.cosh(e)))};const Ak={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=In([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,k=n.data.get(r.dataId).values,v=D(r.shape),w=D(y.shape);for(let I=0;I<f;I++){const e=4*I,t=b[e],n=b[e+1],s=b[e+2],r=b[e+3],a=x[I];if(a>=c)continue;const i=m>1?(s-t)*(h-1)/(m-1):0,o=g>1?(r-n)*(p-1)/(g-1):0;for(let c=0;c<m;c++){const e=m>1?t*(h-1)+c*i:.5*(t+s)*(h-1);if(e<0||e>h-1)for(let t=0;t<g;t++)for(let e=0;e<d;e++){const n=e+t*w[2]+c*w[1]+I*w[0];y.values[n]=u}else if("bilinear"===l){const t=Math.floor(e),s=Math.ceil(e),i=e-t;for(let e=0;e<g;e++){const l=g>1?n*(p-1)+e*o:.5*(n+r)*(p-1);if(l<0||l>p-1){for(let t=0;t<d;t++){const n=t+e*w[2]+c*w[1]+I*w[0];y.values[n]=u}continue}const h=Math.floor(l),f=Math.ceil(l),m=l-h;for(let n=0;n<d;n++){let r=n+h*v[2]+t*v[1]+a*v[0];const o=k[r];r=n+f*v[2]+t*v[1]+a*v[0];const l=k[r];r=n+h*v[2]+s*v[1]+a*v[0];const u=k[r];r=n+f*v[2]+s*v[1]+a*v[0];const p=o+(l-o)*m,d=u+(k[r]-u)*m;r=n+e*w[2]+c*w[1]+I*w[0],y.values[r]=p+(d-p)*i}}}else for(let t=0;t<g;++t){const s=g>1?n*(p-1)+t*o:.5*(n+r)*(p-1);if(s<0||s>p-1){for(let e=0;e<d;e++){const n=e+t*w[2]+c*w[1]+I*w[0];y.values[n]=u}continue}const i=Math.round(s),l=Math.round(e);for(let e=0;e<d;e++){const n=e+i*v[2]+l*v[1]+a*v[0],s=e+t*w[2]+c*w[1]+I*w[0];y.values[s]=k[n]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Rk={kernelName:"Cumprod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;My(r,"cumprod");const l=jr([a],r.shape.length);let u=r;null!=l&&(u=qb({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Kr(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=kt(u.dtype,"int32"),p=L(m(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let m=0;m<d.length;m+=f)for(let e=0;e<f;e++){const t=g(m,e);if(0===e)p[t]=i?1:d[t];else{const n=g(m,e-1);p[t]=i?d[n]*p[n]:d[t]*p[n]}}const y=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=qb({inputs:{x:y},backend:n,attrs:{perm:qr(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}};const _k={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;My(r,"cumsum");const l=jr([a],r.shape.length);let u=r;null!=l&&(u=qb({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Kr(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=kt(u.dtype,"int32"),p=z(m(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let m=0;m<d.length;m+=f)for(let e=0;e<f;e++){const t=g(m,e);if(0===e)p[t]=i?0:d[t];else{const n=g(m,e-1);p[t]=i?d[n]+p[n]:d[t]+p[n]}}const y=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=qb({inputs:{x:y},backend:n,attrs:{perm:qr(l)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(u),e}return y}};const Fk={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=nb(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=sb(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const Dk={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;h("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],p=l*a,d=u*a,f=c/(a*a),m=n.data.get(r.dataId).values,g=new Float32Array(o*p*d*f);let y=0;for(let h=0;h<o;++h)for(let e=0;e<p;++e){const t=Math.floor(e/a),n=e%a;for(let e=0;e<d;++e){const s=Math.floor(e/a),r=(n*a+e%a)*f;for(let e=0;e<f;++e){const n=e+r+c*(s+u*(t+l*h));g[y++]=m[n]}}}return n.makeTensorInfo([o,p,d,f],r.dtype,g)}};function Ok(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;My([r,a],"depthwiseConv2DNative");const c=D(r.shape),p=D(a.shape);let d=l;null==d&&(d=[1,1]),h(Ks(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const f=Bs(r.shape,a.shape,i,d,o,u,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,k=x.left,v=x.top,w=f.outChannels/f.inChannels,I=new st(f.outShape,r.dtype),N=n.data.get(r.dataId).values,S=n.data.get(a.dataId).values,T=I.values;for(let h=0;h<f.batchSize;++h){const e=h*c[0],t=h*I.strides[0];for(let n=0;n<f.outHeight;++n){const s=t+n*I.strides[1],r=n*f.strideHeight-v;for(let t=0;t<m;++t){const n=r+t*y;if(n<0||n>=f.inHeight)continue;const a=t*p[0],i=e+n*c[1];for(let e=0;e<f.outWidth;++e){const t=s+e*I.strides[2],n=e*f.strideWidth-k;for(let e=0;e<g;++e){const s=n+e*b;if(s<0||s>=f.inWidth)continue;const r=a+e*p[1],o=i+s*f.inChannels;let l=t,u=r;for(let e=0;e<f.inChannels;++e){const t=N[o+e];for(let e=0;e<w;++e)T[l+e]+=t*S[u+e];l+=w,u+=w}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Mk={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:Ok};const Lk={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;My([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Bs(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new st(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,k=n.data.get(r.dataId).values,v=new st(r.shape,r.dtype,k),w=n.data.get(a.dataId).values,I=new st(a.shape,a.dtype,w);for(let N=0;N<f;++N){const e=Math.max(0,Math.ceil((b-N)/p)),t=Math.min(h.outHeight,(h.inHeight+b-N)/p);for(let n=0;n<m;++n){const s=Math.max(0,Math.ceil((y-n)/d)),r=Math.min(h.outWidth,(h.inWidth+y-n)/d);for(let a=0;a<h.outChannels;++a){const i=Math.trunc(a/x),o=a%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let o=e;o<t;++o){const e=N+o*p-b;for(let t=s;t<r;++t){const s=n+t*d-y;l+=v.get(u,e,s,i)*I.get(u,o,t,a)}}g.set(l,N,n,i,o)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const zk={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;My([r,a],"depthwiseConv2DNativeBackpropInput");const h=D(r.shape),p=D(a.shape),d=Bs(c,a.shape,i,o,l,u,!0),f=new st(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[k,v,w]=h,I=n.data.get(a.dataId).values,[N,S,T]=p,{batchSize:$,filterHeight:C,filterWidth:E,inChannels:A,inHeight:R,inWidth:_,outChannels:F,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=d,P=C-1-d.padInfo.top,B=E-1-d.padInfo.left,W=F/A;for(let D=0;D<$;++D)for(let e=0;e<A;++e)for(let t=0;t<R;++t){const n=t-P,s=Math.max(0,Math.ceil(n/L)),r=Math.min(O,(C+n)/L);for(let a=0;a<_;++a){const i=a-B,o=Math.max(0,Math.ceil(i/z)),l=Math.min(M,(E+i)/z);let u=0;for(let t=s;t<r;++t){const s=t*L-n;for(let n=o;n<l;++n){const r=k*D+v*t+w*n,a=N*(C-1-s)+S*(E-1-(n*z-i))+T*e;for(let t=0;t<W;++t){u+=x[r+(e*W+t)]*I[a+t]}}}m[g*D+y*t+b*a+e]=u}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const Pk={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=m(s.shape),a=n.data.get(s.dataId).values,i=In([r,r],s.dtype),o=i.values;for(let u=0;u<a.length;u++)o[u*r+u]=a[u];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Bk={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:k,strideHeight:v,strideWidth:w,filterHeight:I,filterWidth:N,dilationHeight:T,dilationWidth:$,outShape:C}=Ls(s.shape,r.shape,a,i,"NHWC",o),E=m(C),A=C.length,R=S(s.dtype,E);for(let m=0;m<d;++m)for(let e=0;e<b;++e){const t=e*v-k.top;for(let n=0;n<x;++n){const a=n*w-k.left;for(let i=0;i<y;++i){let o=Number.MIN_SAFE_INTEGER;for(let e=0;e<I;++e){const n=t+e*T;if(n>=0&&n<f)for(let t=0;t<N;++t){const l=a+t*$;if(l>=0&&l<g){const a=W([m,n,l,i],c,D(s.shape)),d=W([e,t,i],p,D(r.shape)),f=u[a]+h[d];f>o&&(o=f)}}}R[W([m,e,n,i],A,D(C))]=o}}}return{dataId:l.write(He(R,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},Wk={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=M(s.shape,u.data.get(s.dataId).values),p=M(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:k,strideWidth:v,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=Ls(s.shape,r.shape,i,o,"NHWC",l);h(a.rank===T.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${T.length}, but got ${a.rank}`));const $=M(T,u.data.get(a.dataId).values),C=P(r.shape,r.dtype);for(let h=0;h<d;++h)for(let e=0;e<y;++e){const t=e*k-x.top;for(let n=0;n<b;++n){const s=n*v-x.left;for(let r=0;r<g;++r){let a=Number.MIN_SAFE_INTEGER,i=0,o=0;for(let e=0;e<w;++e){const n=t+e*N;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*S;if(l>=0&&l<m){const s=c[h][n][l][r]+p[e][t][r];s>a&&(a=s,i=e,o=t)}}}C[i][o][r]+=$[h][e][n][r]}}}return{dataId:u.write(He(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Vk={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=M(s.shape,u.data.get(s.dataId).values),p=M(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:k,strideWidth:v,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=Ls(s.shape,r.shape,i,o,"NHWC",l);h(a.rank===T.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${T.length}, but got ${a.rank}`));const $=M(T,u.data.get(a.dataId).values),C=P(s.shape,s.dtype);for(let h=0;h<d;++h)for(let e=0;e<y;++e){const t=e*k-x.top;for(let n=0;n<b;++n){const s=n*v-x.left;for(let r=0;r<g;++r){let a=Number.MIN_SAFE_INTEGER,i=t<0?0:t,o=s<0?0:s;for(let e=0;e<w;++e){const n=t+e*N;if(n>=0&&n<f)for(let t=0;t<I;++t){const l=s+t*S;if(l>=0&&l<m){const s=c[h][n][l][r]+p[e][t][r];s>a&&(a=s,i=n,o=l)}}}C[h][i][o][r]+=$[h][e][n][r]}}}return{dataId:u.write(He(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}};function Uk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;My(r,"sum"),o="bool"===r.dtype?Xy({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):Hy({inputs:{x:r},backend:n});const l=o.shape.length,u=w(a,o.shape),c=jr(u,l);let h=u,p=o;null!=c&&(p=qb({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Kr(h.length,l)),Hr("sum",h,p.shape.length);const[d,f]=Ur(p.shape,h);let g=Gy(n,d,kt(p.dtype,"int32"));const y=m(f),b=n.data.get(g.dataId).values,x=n.data.get(p.dataId).values;for(let m=0;m<b.length;++m){const e=m*y;let t=0;for(let n=0;n<y;++n)t+=x[e+n];b[m]=t}if(i){const e=g;g=Wx({inputs:{x:g},backend:n,attrs:{shape:Gr(g.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),g}const Gk={kernelName:"Sum",backendName:"cpu",kernelFunc:Uk};const Hk={kernelName:"Einsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Gl(r,a.length);jl(i.length,l,a);const{path:u,steps:c}=ql(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=Hl(d,l[e]);let r;Kl(t)?r=a[e]:(r=qb({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);g(r.shape,i)||(r=Wx({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=Bb({inputs:{a:r,b:p},backend:n}),f.push(p))}m<h-1&&(u[m]>=0&&(p=Uk({inputs:{x:p},backend:n,attrs:{axis:u[m]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const m of f)m!==p&&n.disposeIntermediateTensorInfo(m);return p}};const jk={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;My([s,r],"eluGrad");const a=new Float32Array(m(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let l=0;l<i.length;++l){const e=i[l];a[l]=e>=1?o[l]:o[l]*(e+1)}return n.makeTensorInfo(r.shape,"float32",a)}},qk={kernelName:"Erf",backendName:"cpu",kernelFunc:ab("Erf",(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+.3275911*n);return t*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))}))};function Kk(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(h(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),Wx({inputs:{x:r},backend:n,attrs:{shape:o}})}const Xk={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:Kk},Yk=Zy("RealDiv",Wy(((e,t)=>e/t))),Zk={kernelName:"RealDiv",backendName:"cpu",kernelFunc:Yk};function Jk(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=m(u),h=N("float32",c),p=N("float32",c);for(let m=0;m<r;m++){const e=ax({inputs:{x:o},backend:n,attrs:{begin:[m,0],size:[1,a]}}),s=ax({inputs:{x:l},backend:n,attrs:{begin:[m,0],size:[1,a]}}),r=Vy({inputs:{real:e,imag:s},backend:n}),{real:i,imag:u}=Qk(r,t,n),c=Ol(i,u);for(let t=0;t<a;t++){const e=Pl(c,t);h[m*a+t]=e.real,p[m*a+t]=e.imag}n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),g=Vy({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),g}function Qk(e,t,n){const s=m(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=ev(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Ge(s,"float32")),i=Hy({inputs:{x:a},backend:n}),l=Zk.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Zk.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Vl(r*s,t,n),l=Pl(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Bl(s,a,i,r)}return s}(Ol(a,i),s,t);return Ml(e)}var o}function ev(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Ol(e,t),i=n/2,o=Ll(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=Vy({inputs:{real:h,imag:p},backend:r}),f=zl(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),k=Vy({inputs:{real:b,imag:x},backend:r}),v=ev(l,u,i,s,r),w=v.real,I=v.imag,N=[w.length],S=r.makeTensorInfo(N,"float32",w),T=r.makeTensorInfo(N,"float32",I),$=Vy({inputs:{real:S,imag:T},backend:r}),C=ev(m,g,i,s,r),E=C.real,A=C.imag,R=[E.length],_=r.makeTensorInfo(R,"float32",E),F=r.makeTensorInfo(R,"float32",A),D=Vy({inputs:{real:_,imag:F},backend:r}),O=Wl(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=Vy({inputs:{real:L,imag:z},backend:r}),B=Bb({inputs:{a:P,b:D},backend:r}),W=eb({inputs:{a:$,b:B},backend:r}),V=vx({inputs:{a:$,b:B},backend:r}),U=qy({inputs:{input:W},backend:r}),G=qy({inputs:{input:V},backend:r}),H=yk({inputs:{input:W},backend:r}),j=yk({inputs:{input:V},backend:r}),q=xk({inputs:[U,G],backend:r,attrs:{axis:0}}),K=xk({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(k),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const tv={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=m(s.shape),a=s.shape[s.shape.length-1],i=Wx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Jk(i,!1,n),l=Wx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function nv(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||R(r),o=S(i,m(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const sv={kernelName:"Fill",backendName:"cpu",kernelFunc:nv};const rv={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=N(s.dtype,m(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let h=0;h<i;h++){const e=h*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let t=0;t<l;t++){const s=t*u;for(let r=0;r<u;r++){const i=Math.round(l-t-1),o=e+n+s+r;let h=c[o];if(i>=0&&i<l){h=c[e+n+i*u+r]}a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},av={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Zy("FloorDiv",Wy(((e,t)=>Math.floor(e/t))),null,"int32")};const iv={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=vk({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Wx({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=eb({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=eb({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=Wx({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Bx(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=Bx(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}};const ov={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Ok({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=eb({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Bx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const lv={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=m(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Zn(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=kb(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}};const uv={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;My([r,a],"gatherV2");const l=w(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let m=0;m<u.length;++m){const e=u[m];h(e<=c-1&&e>=0,(()=>`GatherV2: the index value ${e} is not in [0, ${c-1}]`))}let p=o;null==o&&(p=0);const d=m(a.shape),f=hu(r,a,l,p),g=Wx({inputs:{x:r},backend:n,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),y=Wx({inputs:{x:a},backend:n,attrs:{shape:[f.batchSize,d/f.batchSize]}}),b=[f.batchSize,f.outerSize,d/f.batchSize,f.sliceSize],x=n.bufferSync(y),k=vb(n.bufferSync(g),x,b);return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),n.makeTensorInfo(f.outputShape,k.dtype,k.values)}};const cv={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=m(s.shape),a=s.shape[s.shape.length-1],i=Wx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Jk(i,!0,n),l=Wx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},hv={kernelName:"IsFinite",backendName:"cpu",kernelFunc:ab("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},pv={kernelName:"IsInf",backendName:"cpu",kernelFunc:ab("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},dv={kernelName:"IsNan",backendName:"cpu",kernelFunc:ab("IsNan",(e=>Number.isNaN(e)?1:0),"bool")};const fv={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=Ab(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},mv={kernelName:"Log1p",backendName:"cpu",kernelFunc:ab("Log1p",(e=>Math.log1p(e)))},gv={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Zy("LogicalAnd",Wy(((e,t)=>e&&t)),null,"bool")},yv={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:ab("LogicalNot",(e=>e?0:1),"bool")},bv={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Zy("LogicalOr",Wy(((e,t)=>e||t)),null,"bool")};const xv={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;My(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=m(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let m=0;m<p;m++){const e=f(m),t=h[m]*Math.pow(i+o*e,-l);d[m]=t}return n.makeTensorInfo(r.shape,r.dtype,d)}};const kv={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;My(i,"LRNGrad");const h=m(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,g=n.data.get(a.dataId).values,y=new Float32Array(h),b=h;for(let m=0;m<b;m++){const e=m%p,t=m-e+Math.max(0,e-o),n=m-e+Math.min(p,e+o+1);let s=0;for(let r=t;r<n;r++)s+=Math.pow(f[r],2);s=u*s+l;for(let r=t;r<n;r++){let e=-2*u*c*f[r]*g[m]/s;m===r&&(e+=Math.pow(s,-c)),e*=d[m],y[r]+=e}}return n.makeTensorInfo(i.shape,r.dtype,y)}};function vv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=w(a,l);let h=c;const p=jr(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=jb(d,l,r.dtype,p,e),h=Kr(h.length,u),l=e}My(r,"max"),Hr("max",h,u);const[f,g]=Ur(l,h),y=Fb(d,m(g),f,r.dtype),b=o.write(y,f,r.dtype);let x=f;if(i){x=Gr(f,c)}return{dataId:b,shape:x,dtype:r.dtype}}const wv={kernelName:"Max",backendName:"cpu",kernelFunc:vv};const Iv={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;My(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(Ks(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=zs(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))c=Hy({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=D(r.shape),s=rk(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Nv={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;My(r,"maxPool3d");const c=Ps(r.shape,a,i,1,o,l,u),h=ik(n.data.get(r.dataId).values,r.shape,r.dtype,D(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Sv={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;My([r,a],"maxPool3DGrad");const c=Ps(a.shape,i,o,1,l,u),h=function(e,t){const n=In(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const k=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let w=d;for(;w<0;)w+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<k;t+=i){const n=t-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=w;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,k=c.effectiveFilterWidth,v=b-1-c.padInfo.front,w=k-1-c.padInfo.left,I=x-1-c.padInfo.top,N=In(a.shape,"float32"),S=n.bufferSync(r);for(let T=0;T<c.batchSize;++T)for(let e=0;e<c.inChannels;++e)for(let t=0;t<c.inDepth;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=t-v,a=n-I,i=s-w;let o=0;for(let t=0;t<b;t+=m){const n=(r+t)/p;if(!(n<0||n>=c.outDepth||Math.floor(n)!==n))for(let s=0;s<x;s+=g){const r=(a+s)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let a=0;a<k;a+=y){const l=(i+a)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const u=b*x*k-1-h.get(T,n,r,l,e)===t*x*k+s*k+a?1:0;if(0===u)continue;o+=S.get(T,n,r,l,e)*u}}}N.set(o,T,t,n,s,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Tv={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;My([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=zs(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=In(p.outShape,o.dtype,ak(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,k=p.effectiveFilterWidth,v=k-1-p.padInfo.left,w=x-1-p.padInfo.top,I=In(o.shape,"float32"),N=n.data.get(r.dataId).values,S=In(r.shape,"float32",N);for(let T=0;T<p.batchSize;++T)for(let e=0;e<p.inChannels;++e)for(let t=0;t<p.inHeight;++t)for(let n=0;n<p.inWidth;++n){const s=t-w,r=n-v;let a=0;for(let t=0;t<x;t+=y){const n=(s+t)/m;if(!(n<0||n>=p.outHeight||Math.floor(n)!==n))for(let s=0;s<k;s+=b){const i=(r+s)/g;if(i<0||i>=p.outWidth||Math.floor(i)!==i)continue;const o=x*k-1-f.get(T,n,i,e)===t*k+s?1:0;if(0===o)continue;a+=S.get(T,n,i,e)*o}}I.set(a,T,t,n,e)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const $v={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;My(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=zs(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=rk(e,0,n,D(t),r,"max"),i=ak(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Cv={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=w(a,r.shape),l=m(Ur(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=Xy({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=Yk({inputs:{a:h,b:c},backend:n});u.push(p);const d=Uk({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const Ev={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;My(r,"min");const o=w(a,r.shape);let l=o;const u=jr(l,r.shape.length);let c=r;null!=u&&(c=qb({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Kr(l.length,r.shape.length)),Hr("min",l,c.shape.length);const[h,p]=Ur(c.shape,l),d=m(p),f=z(m(h),c.dtype),g=n.data.get(c.dataId).values;for(let m=0;m<f.length;++m){const e=m*d;let t=g[e];for(let n=0;n<d;++n){const s=g[e+n];(Number.isNaN(s)||s<t)&&(t=s)}f[m]=t}null!=u&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Wx({inputs:{x:y},backend:n,attrs:{shape:Gr(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Av={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;My(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=D(r.shape),f=m(o),g=o.length,y=D(o),b=N(r.dtype,f);for(let m=0;m<f;m++){let e=V(m,g,y);for(let n=0;n<g;n++)e[n]<l[n]?e[n]=2*l[n]-e[n]-c:e[n]>=u[n]&&(e[n]=2*(u[n]-1)-e[n]+c);e=e.map(((e,t)=>e-l[t]));const t=W(e,p,d);b[m]=h[t]}return{dataId:n.write(b,o,r.dtype),shape:o,dtype:r.dtype}}},Rv={kernelName:"Mod",backendName:"cpu",kernelFunc:Zy("Mod",Wy(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};var _v={exports:{}};!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.alea=a}(0,_v);var Fv={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor128=a}(0,Fv);var Dv={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorwow=a}(0,Dv);var Ov={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n&&(s[7]=-1),e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xorshift7=a}(0,Ov);var Mv={exports:{}};!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.xor4096=a}(0,Mv);var Lv={exports:{}};!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:this.tychei=a}(0,Lv);var zv={exports:{}};!function(e){!function(t,n){var s,r=this,a=256,i=n.pow(a,6),o=n.pow(2,52),l=2*o,u=255;function c(e,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return s&&(e=s.randomBytes)?e=e(a):(e=new Uint8Array(a),(r.crypto||r.msCrypto).getRandomValues(e)),m(e)}catch(cR){var n=r.navigator,i=n&&n.plugins;return[+new Date,r,i,r.screen,m(t)]}}():e,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*a,t*=a,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,r=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<a;)o[r]=r++;for(r=0;r<a;r++)o[r]=o[i=u&i+e[r%n]+(t=o[r])],o[i]=t;(s.g=function(e){for(var t,n=0,r=s.i,i=s.j,o=s.S;e--;)t=o[r=u&r+1],n=n*a+o[u&(o[r]=o[i=u&i+t])+(o[i]=t)];return s.i=r,s.j=i,n})(a)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(cR){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{s=require("crypto")}catch(g){}}}([],Math)}(zv);var Pv=_v.exports,Bv=Fv.exports,Wv=Dv.exports,Vv=Ov.exports,Uv=Mv.exports,Gv=Lv.exports,Hv=zv.exports;Hv.alea=Pv,Hv.xor128=Bv,Hv.xorwow=Wv,Hv.xorshift7=Vv,Hv.xor4096=Uv,Hv.tychei=Gv;var jv=Hv;function qv(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=w([o],r.shape),u=vv({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Gr(u.shape,l),h=Wx({inputs:{x:u},backend:n,attrs:{shape:c}}),p=vx({inputs:{a:r,b:h},backend:n}),d=fb({inputs:{x:p},backend:n}),f=Uk({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=Wx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Yk({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Kv={kernelName:"Softmax",backendName:"cpu",kernelFunc:qv};const Xv={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;My(r,"multinomial");const l=o?r:qv({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=z(m(p),"int32");for(let f=0;f<u;++f){const e=f*c,t=new Float32Array(c-1);t[0]=h[e];for(let r=1;r<t.length;++r)t[r]=t[r-1]+h[e+r];const n=jv.alea(i.toString()),s=f*a;for(let r=0;r<a;++r){const e=n();d[s+r]=t.length;for(let n=0;n<t.length;n++)if(e<t[n]){d[s+r]=n;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}},Yv=Fo;const Zv={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;My(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=Yv(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Jv=Do;const Qv={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;My(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=Jv(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},ew=Oo;const tw={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;My(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=ew(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const nw={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;My(r,"oneHot");const l=m(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let h=0;h<l;++h)c[h]>=0&&c[h]<a&&(u[h*a+c[h]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function sw(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=qy({inputs:{input:s},backend:n}),t=sw({inputs:{x:e},backend:n}),r=yk({inputs:{input:s},backend:n}),a=sw({inputs:{x:r},backend:n}),i=Vy({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return nv({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const rw={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:sw};const aw={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=qy({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=yk({inputs:{input:r},backend:s}),i=sw({inputs:{x:a},backend:s}),o=Vy({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return nv({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function iw(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return Kk({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{p(a,e.shape,"All tensors passed to stack must have matching shapes"),h(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=xk({inputs:t.map((e=>{const t=Kk({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const ow={kernelName:"Pack",backendName:"cpu",kernelFunc:iw};const lw={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;My(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=m(r.shape),h=r.shape.length,p=D(r.shape),d=m(o),f=o.length,g=D(o),y=N(r.dtype,d);0!==i&&y.fill(i);for(let m=0;m<c;m++){y[W(V(m,h,p).map(((e,t)=>e+l[t])),f,g)]=u[m]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},uw={kernelName:"Pow",backendName:"cpu",kernelFunc:Zy("Pow",Wy(((e,t)=>Math.pow(e,t))))};const cw={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=Zb(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},hw={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:ab("Reciprocal",(e=>1/e))};const pw={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;My(r,"resizeBilinear");const l=D(r.shape),[u,c]=o,[h,p,d,f]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(m([h,u,c,f])),b=[a&&u>1?p-1:p,a&&c>1?d-1:d],x=[a&&u>1?u-1:u,a&&c>1?c-1:c];let k=0;const v=b[0]/x[0],w=b[1]/x[1];for(let m=0;m<h;m++)for(let e=0;e<u;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(p-1,Math.ceil(t)),a=m*l[0]+n*l[1],o=m*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=i?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),r=t-n,u=Math.min(d-1,Math.ceil(t)),c=a+n*l[2],h=o+n*l[2],p=a+u*l[2],m=o+u*l[2];for(let e=0;e<f;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*r,i=a+(n+(g[m+e]-n)*r-a)*s;y[k++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",y)}};const dw={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;My([a,r],"resizeBilinearGrad");const o=D(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let k=0;for(let v=0;v<l;v++){const e=v*o[0];for(let t=0;t<p;t++){const n=t*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=e+s*o[1],i=e+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],v=p*u,w=p*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=x[k++];f[d+e]+=t*v,f[m+e]+=t*w,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const fw={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;My(r,"resizeNearestNeighbor");const l=D(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],k=y[1]/b[1];let v=0;for(let w=0;w<h;w++){const e=w*l[0];for(let t=0;t<u;t++){const n=i?x*(t+.5):x*t;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=e+s*l[1];for(let e=0;e<c;e++){const t=i?k*(e+.5):k*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[v++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const mw={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;My([a,r],"resizeNearestNeighborGrad");const o=D(r.shape),l=D(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],k=y[1]/b[1],v=1/x,w=1/k,I=2*Math.ceil(v)+2,N=2*Math.ceil(w)+2;for(let S=0;S<u;S++){const e=S*o[0];for(let t=0;t<c;t++){const n=e+t*o[1],s=Math.floor(t*v),r=Math.floor(s-I/2);for(let a=0;a<h;a++){const s=n+a*o[2],u=Math.floor(a*w),y=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let s=0;s<I;s++){const u=s+r;if(u<0||u>=d)continue;const p=e+u*l[1],m=u*x;if(t===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const s=p+t*l[2],r=t*k;a===Math.min(h-1,i?Math.round(r):Math.floor(r))&&(o+=g[s+n])}}m[s+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const gw={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;My(r,"reverse");const i=r.shape.length,o=w(a,r.shape);if(0===i)return Hy({inputs:{x:r},backend:n});const l=new st(r.shape,r.dtype),u=n.bufferSync(r);for(let c=0;c<l.size;c++){const e=l.indexToLoc(c),t=e.slice();o.forEach((e=>t[e]=r.shape[e]-1-t[e])),l.set(u.get(...t),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},yw={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=N(s.dtype,m(s.shape)),[u,c,h,p]=s.shape,[d,f]=Cl(i,c,h),g=Math.sin(r),y=Math.cos(r),b=o.data.get(s.dataId).values;for(let m=0;m<u;m++){const e=m*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,t,s,i],m=o[2],x=o[1];let k=(m-d)*y-(x-f)*g,v=(m-d)*g+(x-f)*y;k=Math.round(k+d),v=Math.round(v+f);let w=a;if("number"!=typeof a&&(w=3===i?255:a[i]),k>=0&&k<h&&v>=0&&v<c){w=b[e+v*(h*p)+k*p+i]}l[e+n+r+i]=w}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},bw={kernelName:"Round",backendName:"cpu",kernelFunc:ab("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))};const xw={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=es(0,r,i),p=ex(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function kw(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function vw(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const ww={kernelName:"SearchSorted",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=S("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?kw(n,t[e+l]):vw(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}};const Iw={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;My([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=kt(r.dtype,a.dtype),h=z(m(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:m(r.shape.slice(1));for(let f=0;f<o.length;f++)for(let e=0;e<d;e++)1===o[f]?h[p++]=l[f]:h[p++]=u[f];return n.makeTensorInfo(r.shape,c,h)}},Nw={kernelName:"Selu",backendName:"cpu",kernelFunc:ab("Selu",(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1)))},Sw={kernelName:"Sign",backendName:"cpu",kernelFunc:ab("Sign",(e=>e<0?-1:e>0?1:0))},Tw={kernelName:"Sin",backendName:"cpu",kernelFunc:ab("Sin",(e=>Math.sin(e)))},$w={kernelName:"Sinh",backendName:"cpu",kernelFunc:ab("Sinh",(e=>Math.sinh(e)))},Cw=Math.log(1.1920928955078125e-7)+2,Ew={kernelName:"Softplus",backendName:"cpu",kernelFunc:ab("Softplus",(e=>{const t=e>-Cw,n=e<Cw,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r}))};const Aw={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;My([r],"spaceToBatchND");const o=m(a),l=[[0,0]];l.push(...i);for(let m=1+a.length;m<r.shape.length;++m)l.push([0,0]);const u=lw.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=El(u.shape,a,o,!1),h=Al(c.length,a.length,!1),p=Rl(u.shape,a,o,!1),d=Wx({inputs:{x:u},backend:n,attrs:{shape:c}}),f=qb({inputs:{x:d},backend:n,attrs:{perm:h}}),g=Wx({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),g}};const Rw={kernelName:"SparseFillEmptyRows",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=ox(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const _w={kernelName:"SparseReshape",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=lx(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const Fw={kernelName:"SparseSegmentMean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=ux(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const Dw={kernelName:"SparseSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=ux(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const Ow={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=es(0,r,o),d=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=ex(f,n.bufferSync(a),o,p,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),d);break;case"float32":m=ex(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"int32":m=ex(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"string":m=ex(f,n.bufferSync(a),o,p,c,u,l,h,Ke(n.data.get(i.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}};const Mw={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=w(i,r.shape)[0],l=Yl(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=ax({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},Lw={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;My(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let i=0;i<r.length;++i){const e=r[i];a[i]=e*e}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},zw={kernelName:"Step",backendName:"cpu",kernelFunc:ab("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};const Pw={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:d}=s;My(r,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:k,strides:v}=fs(r.shape,a,i,o,l,u,c,p,d);let w;if(g)w=Wx({inputs:{x:r},backend:n,attrs:{shape:m}});else if(y||b){h(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=ns(x,k,v),t=ax({inputs:{x:r},backend:n,attrs:{begin:x,size:e}});w=Wx({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{const e=fx(f,n.bufferSync(r),v,x);w=n.makeTensorInfo(m,e.dtype,e.values)}return w}};const Bw={kernelName:"StringNGrams",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=gx(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const Ww={kernelName:"StringSplit",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=bx(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const Vw={kernelName:"StringToHashBucketFast",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=xx(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},Uw={kernelName:"Tan",backendName:"cpu",kernelFunc:ab("Tan",(e=>Math.tan(e)))},Gw=ab("Tanh",(e=>Math.tanh(e)));function Hw(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return l(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return l(0,n,t-1)}(e,t);case"nearest":return function(e,t){return l(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function jw(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function qw(e,t,n,s,r,a,i,o,l,u,c){return jw(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function Kw(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*jw(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*jw(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*jw(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*jw(e,t,n,s,r,a,i,d,f,u,c))}const Xw=[Hx,By,jx,qx,tb,Kx,Xx,Yx,Zx,Jx,Qx,ek,tk,nk,sk,ok,lk,uk,ck,Gx,hk,pk,dk,fk,Yy,lb,mk,Uy,gk,kk,wk,Ik,Nk,Sk,Tk,$k,Ck,Ek,Ak,Rk,_k,Fk,Dk,Mk,Lk,zk,Pk,Bk,Wk,Vk,Hk,Ax,jk,pb,qk,mb,Xk,yb,tv,sv,rv,xb,av,iv,ov,lv,uv,Ib,Sb,jy,cv,bk,hv,pv,dv,_x,$b,Eb,fv,_b,mv,gv,yv,bv,xv,kv,wv,Ob,Iv,Nv,Sv,Tv,$v,Cv,Ev,Lb,Av,Rv,Xv,Wb,Ub,Zv,Qv,tw,Hb,nw,aw,ow,lw,uw,Ox,Yb,cw,Ky,Zk,hw,Lx,Px,Vx,pw,dw,fw,mw,gw,yw,bw,Qb,xw,ww,Iw,Nw,sx,Sw,Tw,$w,ix,Kv,Ew,Aw,Rw,_w,Fw,Dw,Ow,Mw,hx,Lw,dx,zw,Pw,Bw,Ww,Vw,wx,Gk,Uw,{kernelName:"Tanh",backendName:"cpu",kernelFunc:Gw},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;My(r,"tile");const i=Ix(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;My(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=Tx(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:"Transform",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,g]=null!=u?u:[h,p],y=[c,f,g,d],b=D(r.shape),x=b[0],k=b[1],v=b[2],w=N(r.dtype,m(y));w.fill(l);const I=s.data.get(r.dataId).values,S=s.data.get(a.dataId).values;for(let m=0;m<c;++m){const e=1===a.shape[0]?S:S.subarray(8*m,8*m+8);for(let t=0;t<f;++t)for(let n=0;n<g;++n)for(let s=0;s<d;++s){let r;const a=e[6]*n+e[7]*t+1;if(0===a)continue;const u=(e[0]*n+e[1]*t+e[2])/a,c=(e[3]*n+e[4]*t+e[5])/a,d=Hw(u,p,o),f=Hw(c,h,o);switch(i){case"nearest":r=qw(I,h,p,x,k,v,m,f,d,s,l);break;case"bilinear":r=Kw(I,h,p,x,k,v,m,f,d,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}w[m*x+t*k+n*v+s]=r}return s.makeTensorInfo(y,r.dtype,w)}return{dataId:s.write(w,y,r.dtype),shape:r.shape,dtype:r.dtype}}},Kb,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;My(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=$x(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let d=0;d<i;d++)d!==a&&(l[u++]=r.shape[d]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let d=0;d<p.length;d++){c[a]=d;const e=ax({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[d]=Wx({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return p}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;My(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let p=0;p<u;++p){const e=Kk({inputs:{input:c},backend:n,attrs:{dim:p+1}});c=e,l.push(e)}for(let p=0;p<i;++p){const e=Ge(p,"int32"),t=n.makeTensorInfo([],"int32",e),s=hb({inputs:{a:t,b:c},backend:n}),a=Xy({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),i=Bb({inputs:{a:a,b:r},backend:n}),u=Uk({inputs:{x:i},backend:n,attrs:{axis:0,keepDims:!1}});o.push(u),l.push(t),l.push(s),l.push(a),l.push(i),l.push(u)}const h=iw({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},rw];for(const pR of Xw)se(pR);const Yw={},Zw={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Jw(e,t){if(!(e in Yw)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;if(n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete Yw[e]}),!1),1===e)return n.getContext("webgl",Zw)||n.getContext("experimental-webgl",Zw);return n.getContext("webgl2",Zw)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;Yw[e]=n}const n=Yw[e];return null==n||n.isContextLost()?(delete Yw[e],Jw(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),Yw[e])}var Qw,eI,tI,nI,sI,rI;function aI(e,t){return[t,e]}function iI(e){const t=m(e);return b(Math.ceil(t/4))}function oI(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function lI(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===j().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function uI(e,t){const n=t();return j().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(eI=Qw||(Qw={}))[eI.DENSE=0]="DENSE",eI[eI.SHARED_BATCH=1]="SHARED_BATCH",(nI=tI||(tI={}))[nI.RENDER=0]="RENDER",nI[nI.UPLOAD=1]="UPLOAD",nI[nI.PIXELS=2]="PIXELS",nI[nI.DOWNLOAD=3]="DOWNLOAD",(rI=sI||(sI={}))[rI.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",rI[rI.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",rI[rI.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",rI[rI.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",rI[rI.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function cI(e){return!!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function hI(e,t){return kI(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const pI=/ERROR: [0-9]+:([0-9]+):/g;function dI(e,t){const n=pI.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>x((t+1).toString(),a)+e));let o=0;for(let h=0;h<i.length;h++)o=Math.max(i[h].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${x(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function fI(e,t){if(uI(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function mI(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(uI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),uI(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),uI(e,(()=>e.enableVertexAttribArray(o))),!0)}function gI(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),uI(e,(()=>e.activeTexture(e.TEXTURE0+n))),uI(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function yI(e,t,n){uI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),uI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function bI(e,t){uI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),uI(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function xI(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function kI(e,t,n){const s=uI(e,(()=>t()));if(null==s)throw new Error(n);return s}function vI(e,t=2){return m(e.slice(0,e.length-t))}function wI(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function II(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[vI(e),...wI(e)]),t}function NI(e){return e%2==0}function SI(e,t){if(g(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(NI(n)&&NI(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&NI(e[0])&&NI(t[0])}let TI,$I;function CI(e,t){return null!=e.getExtension(t)}function EI(e){try{if(null!=Jw(e))return!0}catch(cR){return console.log("Error when getting WebGL context: ",cR),!1}return!1}function AI(e){if(0===e)return!1;const t=Jw(e);if(1!==e){if(CI(t,"EXT_color_buffer_float"))return RI(t);const e="EXT_color_buffer_half_float";if(CI(t,e)){const n=t.getExtension(e);return function(e,t){const n=lI(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!CI(t,"OES_texture_float"))return!1;if(!CI(t,"WEBGL_color_buffer_float"))return!1;return RI(t)}function RI(e){const t=lI(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function _I(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&h("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const FI=j();function DI(){let e,t,n,s,r,a,i,o,l,u;return 2===j().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function OI(e,t,n="index"){const s=D(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function MI(e,t,n="index"){const s=D(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function LI(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let a=n-3;a>=0;--a)r[a]=`(${r[a+1]} * ${s[a+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function zI(e){const t=D(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}FI.registerFlag("HAS_WEBGL",(()=>FI.getNumber("WEBGL_VERSION")>0)),FI.registerFlag("WEBGL_VERSION",(()=>EI(2)?2:EI(1)?1:0)),FI.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),FI.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===FI.get("WEBGL_VERSION"))),FI.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),FI.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),FI.registerFlag("WEBGL_PACK",(()=>FI.getBool("HAS_WEBGL"))),FI.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_CLIP",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_PACK_REDUCE",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_LAZILY_UNPACK",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_CONV_IM2COL",(()=>FI.getBool("WEBGL_PACK"))),FI.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==TI){const t=Jw(e);TI=t.getParameter(t.MAX_TEXTURE_SIZE)}return TI}(FI.getNumber("WEBGL_VERSION")))),FI.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==$I){const t=Jw(e);$I=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,$I)}(FI.getNumber("WEBGL_VERSION")))),FI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=FI.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Jw(e);return t=CI(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:CI(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),FI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>FI.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Rt())),FI.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Jw(e);if(1===e){if(!CI(t,"OES_texture_float"))return!1}else if(!CI(t,"EXT_color_buffer_float"))return!1;return RI(t)}(FI.getNumber("WEBGL_VERSION")))),FI.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!FI.getBool("WEBGL_FORCE_F16_TEXTURES")&&FI.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),FI.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>AI(FI.getNumber("WEBGL_VERSION")))),FI.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=FI.getNumber("WEBGL_VERSION"))&&null!=Jw(e).fenceSync;var e})),FI.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>FI.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),FI.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),FI.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Rt()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),FI.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),FI.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),FI.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),FI.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const PI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:BI}=mu;function WI(e,t,n){const s=[];if(e.forEach((e=>{const t=m(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=JI(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?UI(e,s):VI(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=BI(e.shapeInfo.logicalShape,t.logicalShape),l=ZI(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===m(e.shapeInfo.logicalShape),g=1===m(t.logicalShape);if(1!==a||f||g){if(f&&!g)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&g(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=ZI(l),c=BI(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=DI(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${GI}\n    ${HI}\n    ${jI}\n  `}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return KI();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(g(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let u=2;u<e.length-1;u++)i*=e[e.length-u-1],o=`\n      int b${u} = index / ${i};\n      index -= b${u} * ${i};\n    `+o,l=`b${u}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return KI();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(g(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${MI(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=OI(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${MI(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=OI(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=OI(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=OI(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=qI);return[h,l,c,r,u,a,n.userCode].join("\n")}function VI(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=XI(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${YI(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=XI(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&g(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=I(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${VI(QI(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${eN(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${YI(e)}\n      }\n    `;const u=a[0],c=a[1],h=XI(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(t)return`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=I(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${VI(QI(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${eN(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${YI(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=XI(s);if(t)return`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${a} + col * ${i} + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `;return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=I(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${VI(QI(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${eN(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${YI(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=XI(s);if(t)return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `;return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=I(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${VI(QI(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${eN(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${YI(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=XI(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=I(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${VI(QI(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${eN(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${YI(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=XI(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function UI(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=DI();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=DI();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=DI();if(null!=a&&g(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${UI(QI(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${eN(a,s)});\n        }\n      `}const o=DI();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=DI();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let m=2;m<i-1;m++)d=`int b${m}, `+d,p*=a[i-m-1],f=`b${m} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const GI="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",HI="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jI="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qI="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function KI(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function XI(e){return`offset${e}`}function YI(e){const t=e.name,n=m(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ZI(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function JI(e,t,n){const{newShape:s,keptDims:r}=I(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!g(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function QI(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function eN(e,t){return t.map((t=>e[t])).join(", ")}function tN(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=WI(r,i,t),l=function(e,t){const n=kI(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(uI(e,(()=>e.shaderSource(n,t))),uI(e,(()=>e.compileShader(n))),j().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw dI(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return j().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},nN(e,t,u))}function nN(e,t,n){const s={},r={},a={},i=[];let o,l,u,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===j().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const p=!1;for(let d=0;d<t.variableNames.length;d++){const i=t.variableNames[d];s[i]=e.getUniformLocation(n,i,p),s[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,p),t.enableShapeUniforms&&(r[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,p),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,p))}return t.enableShapeUniforms&&(o=e.getUniformLocation(n,"outShape",p),u=e.getUniformLocation(n,"outShapeStrides",p),l=e.getUniformLocation(n,"outTexShape",p)),t.customUniforms&&t.customUniforms.forEach(((t,s)=>{i[s]=e.getUniformLocation(n,t.name,p)})),{uniformLocations:s,customUniformLocations:i,infLoc:c,nanLoc:h,inShapesLocations:r,inTexShapesLocations:a,outShapeLocation:o,outShapeStridesLocation:u,outTexShapeLocation:l}}function sN(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!g(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!g(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function rN(e){return j().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class aN{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Qw.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=DI();this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?MI(["r","c","d"],e):OI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class iN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Qw.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=DI();this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?MI(["r","c","d"],e):OI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class oN{constructor(e){this.variableNames=["A"],this.outTexUsage=tI.DOWNLOAD;const t=DI();this.outputShape=e,this.userCode=`\n      ${PI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class lN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=tI.DOWNLOAD;const t=DI();this.outputShape=e,this.userCode=`\n      ${PI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class uN{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=DI();this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class cN{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=DI();this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let t=0;t<=1;t++){const r=2*a+t;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zI(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function hN(e){const t=DI();return function(e,t){const n=kI(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(uI(e,(()=>e.shaderSource(n,t))),uI(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function pN(e){return function(e,t){const n=kI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return uI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),uI(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function dN(e){return function(e,t){const n=kI(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return uI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),uI(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function fN(e,t,n,s,r,a){!function(e,t){const n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return kI(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return uI(e,(()=>e.bindTexture(o,i))),uI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),uI(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),uI(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),uI(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===j().getNumber("WEBGL_VERSION")?uI(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):uI(e,(()=>e.texStorage2D(o,1,s,t,n))),uI(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function mN(e){return e.internalFormatFloat}function gN(e){return e.internalFormatHalfFloat}function yN(e){return e.downloadTextureFormat}function bN(e){return e.internalFormatPackedFloat}function xN(e){return e.internalFormatPackedHalfFloat}function kN(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=oI(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class vN{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=j().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Yw[e]=t}(t,e)):this.gl=Jw(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===j().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=hI(this.gl,e),CI(this.gl,t))this.textureHalfFloatExtension=hI(this.gl,t);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),CI(this.gl,s))this.colorBufferHalfFloatExtension=hI(this.gl,s);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",CI(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!CI(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=pN(this.gl),this.indexBuffer=dN(this.gl),this.framebuffer=function(e){return kI(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=lI(this.gl,this.textureHalfFloatExtension)}get debug(){return j().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;uI(e,(()=>e.finish())),uI(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),uI(e,(()=>e.deleteFramebuffer(this.framebuffer))),uI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),uI(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),uI(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=aI(t,n);return fN(e,r,a,mN(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=aI(t,n);return fN(e,r,a,gN(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=aI(t,n);return fN(e,r,a,yN(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){uI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===j().getNumber("WEBGL_VERSION")?uI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):uI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===j().getNumber("WEBGL_VERSION")?uI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):uI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),uI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;uI(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===j().getNumber("WEBGL_VERSION")?uI(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):uI(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),uI(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=oI(t,n);return fN(e,r,a,xN(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=oI(t,n);return fN(e,r,a,bN(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(bI(this.gl,this.framebuffer),this.outputTexture=null),uI(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=aI(t,n),i=new Uint8Array(t*n*4);return uI(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return kN(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();uI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return uI(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),uI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),uI(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(j().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return uI(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=hN(t));const n=function(e){return kI(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return uI(t,(()=>t.attachShader(n,this.vertexShader))),uI(t,(()=>t.attachShader(n,e))),function(e,t){if(uI(e,(()=>e.linkProgram(t))),!j().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&fI(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return uI(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),mI(e,t,"clipSpacePos",n,3,20,0)&&mI(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&uI(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&fI(this.gl,this.program),uI(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return kI(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),uI(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,s){uI(e,(()=>gI(e,t,s))),uI(e,(()=>e.uniform1i(n,s)))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=oI(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&fI(this.gl,this.program),xI(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),uI(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),uI(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=hI(this.gl,2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(e){return t(this,null,(function*(){return yield k((()=>this.disposed||this.isQueryAvailable(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||k((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),yI(this.gl,e,this.framebuffer),this.debug&&xI(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(yI(this.gl,this.outputTexture,this.framebuffer),this.debug&&xI(this.gl)):bI(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;yI(s,e,this.framebuffer),this.debug&&xI(s),this.outputTexture=e,uI(s,(()=>s.viewport(0,0,t,n))),uI(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),uI(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:wN,bincountImpl:IN,bincountReduceImpl:NN,ceilImpl:SN,concatImpl:TN,equalImpl:$N,expImpl:CN,expm1Impl:EN,floorImpl:AN,gatherNdImpl:RN,gatherV2Impl:_N,greaterImpl:FN,greaterEqualImpl:DN,lessImpl:ON,lessEqualImpl:MN,linSpaceImpl:LN,logImpl:zN,maxImpl:PN,maximumImpl:BN,minimumImpl:WN,multiplyImpl:VN,negImpl:UN,notEqualImpl:GN,prodImpl:HN,rangeImpl:jN,rsqrtImpl:qN,scatterImpl:KN,sigmoidImpl:XN,simpleAbsImpl:YN,sliceImpl:ZN,sparseFillEmptyRowsImpl:JN,sparseReshapeImpl:QN,sparseSegmentReductionImpl:eS,sqrtImpl:tS,stridedSliceImpl:nS,stringNGramsImpl:sS,stringSplitImpl:rS,stringToHashBucketFastImpl:aS,subImpl:iS,tileImpl:oS,topKImpl:lS,transposeImpl:uS,uniqueImpl:cS}=Cx;function hS(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function pS(e,t){return 1===t?[e]:hS(e,t)}class dS{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=rN(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=pS("rc",this.rank),t=ZI(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class fS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length);let n="";for(let a=0;a<4;a++){let e="thisRC = rc;";a%2==1&&(e+="thisRC.z += 1;"),a>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${a>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${a}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${a>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?LI(["r","c","d"],"inputShape"):OI(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":zI(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class mS{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=yS(t,n),r=bS(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=gS(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===sI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===sI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===sI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===sI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===sI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=yS(n,s),a=bS(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=gS(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=j().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function gS(e,t,n,s,r){const a=function(e,t){switch(e){case sI.PACKED_2X2_FLOAT32:return bN(t);case sI.PACKED_2X2_FLOAT16:return xN(t);case sI.UNPACKED_FLOAT32:return mN(t);case sI.UNPACKED_FLOAT16:return gN(t);case sI.PACKED_4X1_UNSIGNED_BYTE:return yN(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=oI(e[0],e[1]);i=t*n}else{const[t,n]=aI(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function yS(e,t){if(e===tI.UPLOAD)return sI.PACKED_2X2_FLOAT32;if(e===tI.RENDER||null==e)return function(e){return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?sI.PACKED_2X2_FLOAT32:sI.UNPACKED_FLOAT32:e?sI.PACKED_2X2_FLOAT16:sI.UNPACKED_FLOAT16}(t);if(e===tI.DOWNLOAD||e===tI.PIXELS)return sI.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function bS(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class xS{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const kS="return x;";class vS{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class wS{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length);const t=e.length,n=pS("rc",t),s=ZI(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const IS=ao,NS={};const SS=j().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class TS extends a{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!j().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof vN)t=e;else{const n=Jw(j().getNumber("WEBGL_VERSION"),e);t=new vN(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=Jw(j().getNumber("WEBGL_VERSION"));t=new vN(e),this.binaryCache=((n=j().getNumber("WEBGL_VERSION"))in NS||(NS[n]={}),NS[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new mS(this.gpgpu),this.numMBBeforeWarning=null==j().global.screen?1024:j().global.screen.height*j().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r(this,Mn())}nextDataId(){return TS.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((j().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||j().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:tI.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(j().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:tI.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new vS(i,kS):new xS(i,kS);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=je()),"complex64"===s){c=Ol(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=je()-u),this.convertAndCacheOnCPU(e,c)}read(e){return t(this,null,(function*(){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new vS(s,kS):new xS(s,kS);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(j().getBool("DEBUG")&&!j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===j().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&j().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...iI(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&(yield this.gpgpu.createAndWaitForFence()),"complex64"===a){const e=yield Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Ol(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=m(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;uI(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Mn().removeDataId(e,this),this.pendingDeletes--),h}))}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new vS(r,kS):new xS(r,kS);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Mn().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Ke(e)));return In(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return In(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!cI(n)){if(j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=m(t);if(j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...iI(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=j().getBool("WEBGL_PACK")&&!0===s,i=a?II(t):t,o=a?new lN(i):new oN(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const n=this.activeTimers,s=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=s,r=!0):this.activeTimers.push(s),this.activeTimers=s,e();const a=f(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),i=f(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=n,r&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(()=>t(this,null,(function*(){if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=yield Promise.all(a);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:i[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})))()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:je(),endMs:null}}endTimer(e){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=je(),e)}getQueryTime(e){return t(this,null,(function*(){if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}))}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=SS){return j().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&m(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Z("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return IS(e.shape,t)}packedUnaryOp(e,t,n){const s=new vS(e.shape,t),r=this.compileAndRun(s,[e],n);return Mn().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=YN(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new xS(e.shape,"return abs(x);"),n=this.compileAndRun(t,[e]);return Mn().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>qe(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return Mn().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new wS(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new dS(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[vI(e.shape),...wI(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[vI(t),...wI(t)],a=new fS(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){h(m(r)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=II(r);let o;o=s?new iN(i):new aN(i);const l=[null!=t?t:iI(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===Qw.DENSE){const t=null!=a?a:iI(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===m(i.shape))return o.values=N(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&m(t.shape)<=j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!SI(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=JI(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=D(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&g(t.shape,a),f=1===m(t.shape),y=jn(t.shape,n.shape),b=!e.packedInputs&&p===n.shape.length&&g(a,n.texData.texShape),x=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${b}_${i?l:""}_${o.length}_${f}_${y}_${d}_${u}_${c}_${h}_${x}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${j().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(h,(()=>tN(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),j().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(sN(t.inShapeInfos,n),sN([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===j().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`],o=t.inShapesLocations[`${r}Shape`],l=t.inTexShapesLocations[`${r}TexShape`];if(o){const{uniformShape:s}=JI(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(m(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,s)}));const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=D(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,s)=>{const a=t.customUniformLocations[s],i=r[s];if("float"===n.type)e.gl.uniform1fv(a,i);else if("vec2"===n.type)e.gl.uniform2fv(a,i);else if("vec3"===n.type)e.gl.uniform3fv(a,i);else if("vec4"===n.type)e.gl.uniform4fv(a,i);else if("int"===n.type)e.gl.uniform1iv(a,i);else if("ivec2"===n.type)e.gl.uniform2iv(a,i);else if("ivec3"===n.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,i)}})),e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const y=j().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=je();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!j().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!j().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=zn((()=>{if(!j().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=j().getBool("DEBUG");j().set("DEBUG",!1);const t=this.abs(Jr(1e-8)).dataSync()[0];if(j().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=je());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?u(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=I(e);e=t.newShape}let s=m(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=vI(e);let n=2,r=2;return e.length&&([n,r]=wI(e)),s=t*(n/2)*(r/2),b(s).map((e=>2*e))}return b(s)}(n,o),t.texShape=h),null!=r){const e=II(n);let a,i=h[1],u=h[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,u]=oI(h[0],h[1])),a=o?new cN(e,p):new uN(e,p);const d=p?[u,i]:h,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?tI.PIXELS:tI.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,u,r);const g=[[u,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,j().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=je()-c)}else{const e=this.acquireTexture(h,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*C(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){return t(this,null,(function*(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}}));e.push(n)}return Promise.all(e)}))}checkCompletionAsync_(e){return t(this,null,(function*(){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(yield Nl(),this.checkCompletionAsync_(e))}))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw dI(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,inShapesLocations:a,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}=nN(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.inShapesLocations=a,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}TS.nextDataId=0;_t()&&Wn("webgl",(()=>new TS),2);class $S{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Kn(t,n),this.enableShapeUniforms=rN(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class CS{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Kn(t,n);const r=this.outputShape.length;this.enableShapeUniforms=rN(r);let a="";if(s)if(0===r||1===m(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${ZI(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=pS("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function ES(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const AS={kernelName:"Identity",backendName:"webgl",kernelFunc:ES};function RS(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=ES({inputs:{x:s},backend:n}),l=ES({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const _S={kernelName:"Complex",backendName:"webgl",kernelFunc:RS},FS="return (a < 0.) ? b * a : a;",DS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const OS={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Ge(a,"float32")),o=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new CS(DS,r.shape,i.shape):new $S(FS,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},MS="return (a < 0.) ? b * a : a;",LS="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const zS={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new CS(LS,s.shape,r.shape):new $S(MS,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}};function PS({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new vS(i.shape,t):new xS(i.shape,e),o.runWebGLProgram(u,[i],l)}}function BS({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new $S(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],kt(n.dtype,s.dtype))})),a=RS({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||kt(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?du(e):e,s="string"===l.dtype?du(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new CS(t,l.shape,u.shape,n):new $S(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function WS(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?LS:MS;if("leakyrelu"===e)return t?DS:FS;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class VS{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=rN(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const US="return areal * breal - aimag * bimag;",GS="return areal * bimag + aimag * breal;";class HS{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Kn(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const jS="return a * b;";function qS(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=kt(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new HS(US,s.shape,r.shape),i=new HS(GS,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=RS({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=VN(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new CS(jS,s.shape,r.shape):new $S(jS,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const KS={kernelName:"Multiply",backendName:"webgl",kernelFunc:qS};function XS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=m(r.shape),l=v(a,o),u=m(l);h(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||SI(r.shape,l)||null!==c.texture&&SI(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[vI(e.shape),...wI(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[vI(t),...wI(t)],i=new fS(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const YS={kernelName:"Reshape",backendName:"webgl",kernelFunc:XS};class ZS{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${y(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class JS{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function QS(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=$l(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new ZS({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new ZS({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new JS({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class eT{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const s=ZI(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<e.length;r++)s[e[r]]=n[r];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class tT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let u=0;u<n.length;u++)n[u]=e[t[u]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=ZI(this.rank),r=hS("rc",this.rank),a=new Array(this.rank);for(let u=0;u<t.length;u++)a[t[u]]=r[u];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function nT(e,t,n){const s=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tT(e.shape,t):new eT(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function sT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=w(r,e.shape);let o=i;const l=jr(o,a),u=null!=l;let c=e;u&&(c=nT(e,l,s),o=Kr(o.length,a)),Hr("sum",o,a);const[h,p]=Ur(c.shape,o);let d=h;n&&(d=Gr(h,i));const f=m(p),g=XS({inputs:{x:c},attrs:{shape:[m(e.shape)/f,f]},backend:s}),y=QS(g,vt(e.dtype),"sum",s),b=XS({inputs:{x:y},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(g),s.disposeIntermediateTensorInfo(y),u&&s.disposeIntermediateTensorInfo(c),b}(r,a,i,n)}const rT={kernelName:"Sum",backendName:"webgl",kernelFunc:sT};function aT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let c=0;c<l.length;c++)l[c]=r.shape[a[c]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=uS(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=nT(r,a,i);return u}const iT={kernelName:"Transpose",backendName:"webgl",kernelFunc:aT};function oT({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,p=n?e.shape[u-2]:e.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],f=n?e.shape[u-1]:e.shape[u-2],g=s?t.shape[c-2]:t.shape[c-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=m(y),k=m(b),v=Kn(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([f,g]);h(p===d,(()=>`Error in matMul: inner shapes (${p}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[x,p,f]:[x,f,p],I=s?[k,g,d]:[k,d,g],N=XS({inputs:{x:e},backend:r,attrs:{shape:w}}),S=XS({inputs:{x:t},backend:r,attrs:{shape:I}}),T=[N,S],$=Math.max(x,k),C=n?N.shape[1]:N.shape[2],E=null!=a,A=null!=i,R="leakyrelu"===l,_=null!=l?WS(l,!0):null;let F;if((1===f||1===g)&&C>1e3&&!1===(E||A||R||null!=_)){let e=N,t=S;n&&(e=aT({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),T.push(e)),s&&(t=aT({inputs:{x:S},backend:r,attrs:{perm:[0,2,1]}}),T.push(t));const a=1===g;let i=e;1!==g&&(i=XS({inputs:{x:e},backend:r,attrs:{shape:[$,C,1]}}),T.push(i));const o=1===g?2:1;let l=t;a&&(l=XS({inputs:{x:t},backend:r,attrs:{shape:[$,1,C]}}),T.push(l));const u=qS({inputs:{a:i,b:l},backend:r});F=sT({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),T.push(u)}else{const l=kt(e.dtype,t.dtype),u=new VS(w,I,[$,f,g],n,s,E,_,A,R),c=[N,S];if(null!=a&&c.push(a),A&&c.push(i),R){const e=r.makeTensorInfo([],"float32",Ge(o,"float32"));c.push(e),T.push(e)}F=r.runWebGLProgram(u,c,l)}const D=XS({inputs:{x:F},backend:r,attrs:{shape:v}});T.push(F);for(const h of T)r.disposeIntermediateTensorInfo(h);return D}const lT={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return oT({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},uT="return abs(x);";const cT={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=YN(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new vS(s.shape,uT):new xS(s.shape,uT),n.runWebGLProgram(r,[s],s.dtype)}},hT={kernelName:"Acos",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},pT={kernelName:"Acosh",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},dT="return a + b;",fT={kernelName:"Add",backendName:"webgl",kernelFunc:BS({opSnippet:dT,packedOpSnippet:dT,supportsComplex:!0,cpuKernelImpl:wN})};class mT{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class gT{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const yT={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return ES({inputs:{x:r[0]},backend:s});if(r.length>j().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>kt(e,t))),i=r.map((e=>e.shape)),o=j().getBool("WEBGL_PACK")?new gT(r[0].shape,i):new mT(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const bT={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=jr(u,o);let h=r;null!=c&&(h=aT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Kr(u.length,o)),Hr("all",u,o);const[p,d]=Ur(h.shape,u),f=XS({inputs:{x:h},backend:n,attrs:{shape:[-1,m(d)]}}),g=QS(f,f.dtype,"all",n);let y;if(i){y=XS({inputs:{x:g},backend:n,attrs:{shape:Gr(p,l)}})}else y=XS({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};const xT={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=jr(u,o);let h=r;null!=c&&(h=aT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Kr(u.length,o)),Hr("any",u,o);const[p,d]=Ur(h.shape,u),f=XS({inputs:{x:h},backend:n,attrs:{shape:[-1,m(d)]}}),g=QS(f,f.dtype,"any",n);let y;if(i){y=XS({inputs:{x:g},backend:n,attrs:{shape:Gr(p,l)}})}else y=XS({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};class kT{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class vT{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,h(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=ZI(o),u=pS("coords",o);let c,p;if(1===a){p=o+1;const e=ZI(p);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else p=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=pS("sourceLocR",p-1).concat("inIdx.r"),y=pS("sourceLocG",p-1).concat("inIdx.g"),b=pS("sourceLocB",p-1).concat("inIdx.b"),x=pS("sourceLocA",p-1).concat("inIdx.a"),k="max"===n?"greaterThan":"lessThan",v=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=s?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${k}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function wT(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=$l(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new kT(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=wT(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function IT(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=$l(r[r.length-1]),i=new vT(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=IT(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function NT(e,t,n,s){const r=[n];if(Hr("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!j().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=Ur(i.shape,r),u=m(l),c=XS({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=wT(e,c,s);n.push(h);const p=XS({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return IT(e,t,s)}const ST={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=w(a,r.shape);const o=jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=aT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Kr(i.length,l.shape.length)),Hr("argMax",[i[0]],l.shape.length);const c=NT(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const TT={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=w(a,r.shape);const o=jr(i,r.shape.length);let l=r;const u=[];null!=o&&(l=aT({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Kr(i.length,l.shape.length)),Hr("argMin",[i[0]],l.shape.length);const c=NT(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},$T={kernelName:"Asin",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},CT={kernelName:"Asinh",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},ET={kernelName:"Atan",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},AT={kernelName:"Atan2",backendName:"webgl",kernelFunc:BS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},RT={kernelName:"Atanh",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class _T{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),k=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class FT{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let k=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(k="avgValue / count");const v=4*Math.floor(a/4),w=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${k});\n        }\n      }\n    `}}const DT={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;_I(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(Ks(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=zs(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))return ES({inputs:{x:r},backend:n});const c=new _T(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const OT={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Ps(r.shape,a,i,[1,1,1],o,l,u),h=new FT(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class MT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const zT={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ps(i.shape,o,l,[1,1,1],u,c),p=new LT(h);return n.runWebGLProgram(p,[r],i.dtype)}};const PT={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;_I([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=zs(i.shape,o,l,1,u),h=new MT(c);return n.runWebGLProgram(h,[r],i.dtype)}};const BT={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return oT({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class WT{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Kn(e,t),Kn(e,n);let i="0.0";null!=s&&(Kn(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Kn(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class VT{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Kn(e,t),Kn(e,n);let i="vec4(0.0)";null!=s&&(Kn(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Kn(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const UT={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;h(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),h(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),h(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let p=null;null!=o&&(p=o.shape,u.push(o));const d=j().getBool("WEBGL_PACK_NORMALIZATION")?new VT(s.shape,r.shape,a.shape,c,p,l):new WT(s.shape,r.shape,a.shape,c,p,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class GT{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=ZI(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return HT.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${HT[t]} = start[${t}] + coords.${HT[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const HT=["x","y","z","w","u","v"];class jT{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=ZI(this.rank),n=pS("coords",this.rank),s=pS("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function qT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=ds(r,a,i);if(ts(r,o,l),0===m(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=ZN(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=hs(r.shape,o,l);if(u||!c){const e=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new jT(l):new GT(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=ps(t,D(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const KT={kernelName:"Slice",backendName:"webgl",kernelFunc:qT},XT={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;h(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=El(r.shape,a,o),u=Al(l.length,a.length),c=Rl(r.shape,a,o),p=_l(i,a.length),d=Fl(c,i,a.length),f=[],m=XS({inputs:{x:r},backend:n,attrs:{shape:l}}),g=aT({inputs:{x:m},backend:n,attrs:{perm:u}}),y=XS({inputs:{x:g},backend:n,attrs:{shape:c}}),b=qT({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const YT={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=IN(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const ZT={kernelName:"BroadcastArgs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=Kn(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},JT=BS({opSnippet:"return float(a != b);",cpuKernelImpl:GN,dtype:"bool"}),QT={kernelName:"NotEqual",backendName:"webgl",kernelFunc:JT};function e$(e){const{inputs:t,backend:n}=e,{input:s}=t;return ES({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const t$={kernelName:"Real",backendName:"webgl",kernelFunc:e$};const n$={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return ES({inputs:{x:a},backend:s});const t=Va(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=RS({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=e$({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!T(a.dtype,i)){const e=ES({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new xS(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",N("bool",1)),t=JT({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},s$="return ceil(x);",r$={kernelName:"Ceil",backendName:"webgl",kernelFunc:PS({opSnippet:s$,packedOpSnippet:s$,cpuKernelImpl:SN})};class a${constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class i${constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const o$={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=j().getBool("WEBGL_PACK_CLIP")?new i$(r.shape):new a$(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class l${constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function u$(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const c$={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new l$(s.shape),i=[u$(s,r.complexTensorInfos.real),u$(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class h${constructor(e){this.outputShape=[],this.outputShape=Tl(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let a=1;a<t.length;a++)t[a]=t[a-1]+e[a][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<t.length;a++){const e=t[a-1];n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${e}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class p${constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Tl(e,t);const n=this.outputShape,s=n.length,r=ZI(s),a=pS("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let f=1;f<o.length;f++)o[f]=o[f-1]+e[f][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let f=1;f<o.length;f++){const e=o[f-1];h+=`\n        if (${l} < ${o[f]}  && ${l} >= ${o[f-1]}) {\n          return getChannel(\n            getT${f}(${d$(i,l,e)}),\n            vec2(${d$(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${d$(i,l,d)}),\n          vec2(${d$(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function d$(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function f$(e){const{inputs:t,backend:n}=e,{input:s}=t;return ES({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const m$={kernelName:"Imag",backendName:"webgl",kernelFunc:f$};function g$(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>e$({inputs:{input:e},backend:n}))),r=e.map((e=>f$({inputs:{input:e},backend:n}))),a=g$(s,t,n),i=g$(r,t,n),o=RS({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=m(e.shape.slice(t));return XS({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Tl(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=TN(a,i,s,o),u=Tl(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=g$(e.slice(0,s),t,n),a=g$(e.slice(s),t,n),i=g$([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new p$(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:a,outShape:i}=function(e,t,n){const s=Tl(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>XS({inputs:{x:e},attrs:{shape:[-1,m(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),o=new h$(a.map((e=>e.shape))),l=n.runWebGLProgram(o,a,s);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=XS({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function y$(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=w(r,t[0].shape)[0],i=Tl(t.map((e=>e.shape)),a);if(0===m(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>m(e.shape)>0));if(1===o.length)return ES({inputs:{x:o[0]},backend:n});return Sl(o.map((e=>e.shape)),a),g$(o,a,n)}const b$={kernelName:"Concat",backendName:"webgl",kernelFunc:y$};class x${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",k="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,k="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${k}\n        setOutput(result);\n      }\n    `}}class k${constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class v${constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=rN(this.outputShape.length);const{dataFormat:n}=t,s=DI(),r="channelsLast"===n,a=r?0:1,i=r?1:2,o=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let u=0;u<=1;u++)for(let e=0;e<=1;e++)l+=`\n          blockIndex = rc.y + ${e};\n          pos = rc.x + ${u};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*u+e}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*u+e}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function w$({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,p=l[0]*l[1]*l[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const y=[];if(null!=a&&!f&&3===a.shape.length){const e=aT({inputs:{x:a},backend:s,attrs:{perm:[1,2,0]}});y.push(e),a=e}if(!((1===p||1===d)&&c>1e3)&&u.isPacked&&f&&null!=u.texture&&l[2]%2!=0&&g(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),p={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,h(SI(u.shape,p.shape),(()=>`packed reshape ${u.shape} to ${p.shape} isn't free`));const f=XS({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});y.push(f);const g=oT({a:p,b:f,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=s.texData.get(g.dataId);h(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=d,b.shape=n.outShape,m=ES({inputs:{x:g},backend:s}),m.shape=n.outShape,y.push(g)}else{const l=f?e:aT({inputs:{x:e},backend:s,attrs:{perm:[0,2,3,1]}}),u=l.shape,c=XS({inputs:{x:l},backend:s,attrs:{shape:[1,u[0]*u[1]*u[2],n.inChannels]}}),h=XS({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=oT({a:c,b:h,transposeA:false,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),d=XS({inputs:{x:p},backend:s,attrs:{shape:[n.batchSize,n.outHeight,n.outWidth,n.outChannels]}});m=f?d:aT({inputs:{x:d},backend:s,attrs:{perm:[0,3,1,2]}}),f||(y.push(l),y.push(d)),y.push(c),y.push(h),y.push(p)}for(const h of y)s.disposeIntermediateTensorInfo(h);return m}function I$({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,g=l*u*c,y=p*h,b=[g,y],x=[];if(null!=a&&!f&&3===a.shape.length){const e=aT({inputs:{x:a},backend:s,attrs:{perm:[1,2,0]}});x.push(e),a=e}const k=XS({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),v=XS({inputs:{x:t},backend:s,attrs:{shape:[1,g,m(t.shape)/g]}});x.push(k),x.push(v);const w=new v$(b,n),I=[k.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],N=s.runWebGLProgram(w,[k],"float32",I),S=XS({inputs:{x:N},backend:s,attrs:{shape:[1,b[0],b[1]]}});x.push(N),x.push(S);const T=null!=r,$=null!=a,C="leakyrelu"===o,E=o?WS(o,!0):null,A=new VS(S.shape,v.shape,[1,y,n.outChannels],!0,!1,T,E,$,C),R=[S,v];if(r&&R.push(r),$&&R.push(a),C){const e=s.makeTensorInfo([],"float32",Ge(i,"float32"));R.push(e),x.push(e)}const _=s.runWebGLProgram(A,R,"float32"),F=XS({inputs:{x:_},backend:s,attrs:{shape:[1,p,h,n.outChannels]}}),D=f?F:aT({inputs:{x:F},backend:s,attrs:{perm:[0,3,1,2]}});f||x.push(F),x.push(_);for(const m of x)s.disposeIntermediateTensorInfo(m);return D}const N$={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Xs(l),p=Bs(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(j().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=I$({x:r,filter:a,convInfo:p,backend:n});else{const e=new x$(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=w$({x:r,filter:a,convInfo:p,backend:n});const f=XS({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class S${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class T${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class C${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const E$={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Xs(l),p=Bs(r.shape,c,i,1,o,u,!1,h),d=new S$(p);return n.runWebGLProgram(d,[r,a],"float32")}};const A$={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Xs(u),p=Bs(i,a.shape,o,1,l,c,!1,h),d=new T$(p);return n.runWebGLProgram(d,[r,a],"float32")}};const R$={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Ws(r.shape,a.shape,i,l,o),c=new k$(u);return n.runWebGLProgram(c,[r,a],"float32")}};const _$={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Ws(r.shape,l,i,1,o),c=new $$(u);return n.runWebGLProgram(c,[r,a],"float32")}};const F$={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Ws(l,a.shape,o,1,i),c=new C$(u);return n.runWebGLProgram(c,[r,a],"float32")}},D$={kernelName:"Cos",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},O$={kernelName:"Cosh",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class M${constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,k]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${k};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const L$={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new M$(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var z$,P$;(P$=z$||(z$={})).Prod="*",P$.Sum="+";class B${constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===z$.Prod?"1.0":"0.0",i=n?a:`getX(${W$(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ZI(r)} coords = getOutputCoords();\n        int end = ${V$(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${V$(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${W$(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function W$(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function V$(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function U$(e,t,n,s,r,a){const i=t.shape.length,o=jr([s],i);let l=t;null!=o&&(l=aT({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=Kr(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=ES({inputs:{x:l},backend:n});for(let p=0;p<=Math.ceil(Math.log2(c))-1;p++){const t=new B$(e,l.shape,!1,a),s=[[p]],r=h;h=n.runWebGLProgram(t,[h],h.dtype,s),n.disposeIntermediateTensorInfo(r)}if(r){const t=new B$(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=aT({inputs:{x:h},backend:n,attrs:{perm:qr(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const G$={kernelName:"Cumprod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return U$(z$.Prod,r,n,a,i,o)}};const H$={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return U$(z$.Sum,r,n,a,i,o)}};const j$={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=IN(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=NN(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class q${constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const K$={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new q$("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class X${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=rN(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class Y${constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=rN(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,h=e.filterWidth,p=h;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let u=0;u<h;u++)d+=`\n          vec4 xTexelC${2*u};\n          int xTexelC${2*u}Ready;\n          vec4 xTexelC${2*u+1};\n          int xTexelC${2*u+1}Ready;\n          vec4 xC${u};`;d+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let u=0;u<h;u++)d+=`\n          xTexelC${2*u} = vec4(0.0);\n          xTexelC${2*u}Ready = 0;\n          xTexelC${2*u+1} = vec4(0.0);\n          xTexelC${2*u+1}Ready = 0;\n          xC${u} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(p+1)/2;y++){const e=2*y;if(d+=`\n          xC = xCCorner + ${e*l};\n          `,1===o){if(e<h&&(i%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,d+=1===l&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<h)){const t=i%2==0?u(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,l>1&&(d+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                      xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${e}Ready = 1;\n                    }\n                    `),d+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                  `):d+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<h&&(i%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<h&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<h&&(d+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<h&&(d+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<h&&(d+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let f="",m="";n&&(f=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const Z$={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),h(Ks(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const p=Bs(r.shape,a.shape,i,c,o,u,!0);let d;d=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new Y$(p):new X$(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(d,[r,a],"float32",f)}};class J${constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Q${constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eC={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Bs(r.shape,c,i,o,l,u,!0),p=new J$(h);return n.runWebGLProgram(p,[r,a],"float32")}};const tC={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Bs(c,a.shape,i,o,l,u,!0),p=new Q$(h);return n.runWebGLProgram(p,[r,a],"float32")}};class nC{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const sC={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=m(s.shape),i=XS({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new nC(a),l=n.runWebGLProgram(o,[i],i.dtype),u=XS({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class rC{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const aC={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Ls(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new rC(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=XS({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const iC={kernelName:"Einsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Gl(r,a.length);jl(i.length,l,a);const{path:u,steps:c}=ql(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let m=0;m<h;++m){for(const e of c[m]){const{permutationIndices:t,expandDims:s}=Hl(d,l[e]);let r;Kl(t)?r=a[e]:(r=aT({inputs:{x:a[e]},backend:n,attrs:{perm:t}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);g(r.shape,i)||(r=XS({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=qS({inputs:{a:r,b:p},backend:n}),f.push(p))}m<h-1&&(u[m]>=0&&(p=sT({inputs:{x:p},backend:n,attrs:{axis:u[m]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const m of f)m!==p&&n.disposeIntermediateTensorInfo(m);return p}},oC={kernelName:"Elu",backendName:"webgl",kernelFunc:PS({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},lC={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new CS("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new $S("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},uC={kernelName:"Equal",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:$N})},cC={kernelName:"Erf",backendName:"webgl",kernelFunc:PS({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'})},hC=PS({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:CN,dtype:"float32"}),pC={kernelName:"Exp",backendName:"webgl",kernelFunc:hC};function dC(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(h(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),XS({inputs:{x:a},backend:s,attrs:{shape:o}})}const fC={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:dC},mC="return exp(x) - 1.0;",gC={kernelName:"Expm1",backendName:"webgl",kernelFunc:PS({opSnippet:mC,packedOpSnippet:mC,cpuKernelImpl:EN})};class yC{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function bC(e,t,n){const s=n.texData.get(e.dataId),r=m(e.shape),a=e.shape[e.shape.length-1],i=XS({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new yC("real",o,t),u=new yC("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=RS({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=XS({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const xC={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return bC(s,!1,n)}};class kC{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function vC(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||R(r),"string"===a){const e=S(a,m(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new kC(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const wC={kernelName:"Fill",backendName:"webgl",kernelFunc:vC};class IC{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const NC={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new IC(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},SC="return floor(x);",TC={kernelName:"Floor",backendName:"webgl",kernelFunc:PS({opSnippet:SC,packedOpSnippet:SC,cpuKernelImpl:AN})},$C={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:BS({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class CC{constructor(e){this.variableNames=["A"];const t=DI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class EC{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=DI(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const AC={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];(o||i)&&(null==RC&&(RC=document.createElement("canvas").getContext("2d")),RC.canvas.width=l,RC.canvas.height=u,RC.drawImage(r,0,0,l,u),r=RC.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=tI.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=j().getBool("WEBGL_PACK")?new EC(h):new CC(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let RC;const _C={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Xs(c),g=Bs(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(j().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=I$({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?WS(d,!1):null,u=new x$(g,e,l,t,s),h=[r,a],p=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=XS({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(e&&h.push(p(i,c)),t&&h.push(p(o,c)),s){const e=n.makeTensorInfo([],"float32",Ge(f,"float32"));h.push(e),b.push(e)}y=n.runWebGLProgram(u,h,"float32")}else y=w$({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=XS({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const FC={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=[];let g=c;null==g&&(g=[1,1]),h(Ks(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=Bs(r.shape,a.shape,l,g,u,p,!0),b=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?WS(d,b):null,k=[r,a],v=null!=i,w=null!=o,I="leakyrelu"===d;if(v&&k.push(i),w&&k.push(o),I){const e=n.makeTensorInfo([],"float32",Ge(f,"float32"));k.push(e),m.push(e)}let N;N=b?new Y$(y,v,x,w,I):new X$(y,v,x,w,I);const S=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],T=n.runWebGLProgram(N,k,"float32",S);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),T}};class DC{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=ZI(t.length),r=ZI(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const OC={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=m(s.shape),[l,u,c,h]=Zn(s,r),p=XS({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),d=XS({inputs:{x:s},backend:n,attrs:{shape:[m(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=RN(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new DC(i,h,[u,c]),g=n.runWebGLProgram(f,[d,p],d.dtype),y=XS({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(g),y}};class MC{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=ZI(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<e.length;r++)2===r?s.push("index"):s.push(`${n[r]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function LC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=w(i,r.shape)[0];if(j().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];h(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=hu(r,a,l,o),c=m(a.shape),p=[],d=XS({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),f=XS({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});p.push(d),p.push(f);const g=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(f),t=n.bufferSync(d),s=_N(t,e,g);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const y=new MC(d.shape,g),b=n.runWebGLProgram(y,[d,f],d.dtype);p.push(b);const x=XS({inputs:{x:b},backend:n,attrs:{shape:u.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}const zC={kernelName:"GatherV2",backendName:"webgl",kernelFunc:LC},PC={kernelName:"Greater",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:FN,dtype:"bool"})},BC={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:DN})};const WC={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return bC(s,!0,n)}},VC={kernelName:"IsFinite",backendName:"webgl",kernelFunc:PS({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},UC={kernelName:"IsInf",backendName:"webgl",kernelFunc:PS({opSnippet:"return float(isinf(x));",dtype:"bool"})},GC={kernelName:"IsNan",backendName:"webgl",kernelFunc:PS({opSnippet:"return float(isnan(x));",dtype:"bool"})},HC={kernelName:"Less",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:ON,dtype:"bool"})},jC={kernelName:"LessEqual",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:MN,dtype:"bool"})};const qC={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=LN(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},KC={kernelName:"Log",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:zN})},XC={kernelName:"Log1p",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"})},YC={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},ZC={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:PS({opSnippet:"return float(!(x >= 1.0));"})},JC={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:BS({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class QC{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class eE{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const tE={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=j().getBool("WEBGL_PACK_NORMALIZATION")?new eE(r.shape,a,i,o,l):new QC(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class nE{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const sE={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new nE(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function rE(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=jr(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let n=0;n<t.length;n++)t[n]=r.shape[c[n]];const s=uS(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype);n.texData.get(d.dataId).values=s}else d=nT(r,c,n);u=Kr(u.length,o)}Hr("max",u,o);const[f,g]=Ur(d.shape,u);let y,b=f;if(i&&(b=Gr(f,l)),p){const e=n.texData.get(d.dataId).values,t=PN(e,m(g),b,r.dtype);y=n.makeTensorInfo(b,r.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,s){const r=m(t),a=XS({inputs:{x:e},attrs:{shape:[m(e.shape)/r,r]},backend:s}),i=QS(a,e.dtype,"max",s),o=XS({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,g,b,n);return h&&n.disposeIntermediateTensorInfo(d),y}const aE={kernelName:"Max",backendName:"webgl",kernelFunc:rE},iE={kernelName:"Maximum",backendName:"webgl",kernelFunc:BS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:BN})};const oE={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;_I(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;h(Ks(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=zs(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&g(u.inShape,u.outShape))return ES({inputs:{x:r},backend:n});const c=new _T(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const lE={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Ps(r.shape,a,i,[1,1,1],o,u,l),h=new FT(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class uE{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class cE{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const hE={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Ps(i.shape,o,l,[1,1,1],u,c),p=new FT(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new cE(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const pE={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;_I([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=zs(o.shape,l,u,1,c,h),d=new _T(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new uE(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const dE={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;h(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];h(Ks(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=zs(s.shape,r,a,u,i),[p,d]=function(e,t,n,s){let r=new _T(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new _T(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[p,d]}};const fE={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=w(a,s.shape);let u=l;const c=jr(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let r=0;r<t.length;r++)t[r]=s.shape[c[r]];const n=uS(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype);i.texData.get(f.dataId).values=n}else f=nT(s,c,i);d.push(f),u=Kr(u.length,o)}Hr("sum",u,o);const[g,y]=Ur(f.shape,u);let b=g;r&&(b=Gr(g,l));const x=function(e,t,n,s){const r=m(t),a=XS({inputs:{x:e},attrs:{shape:[m(e.shape)/r,r]},backend:s}),i=QS(a,"float32","mean",s),o=XS({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,y,b,i);for(const m of d)i.disposeIntermediateTensorInfo(m);return x}};const mE={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=w(a,r.shape);let u=l;const c=jr(u,o);let h=r;null!=c&&(h=aT({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Kr(u.length,r.shape.length)),Hr("min",u,o);const[p,d]=Ur(h.shape,u),f=XS({inputs:{x:h},backend:n,attrs:{shape:[-1,m(d)]}}),g=QS(f,f.dtype,"min",n);let y;if(i){y=XS({inputs:{x:g},backend:n,attrs:{shape:Gr(p,l)}})}else y=XS({inputs:{x:g},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}},gE={kernelName:"Minimum",backendName:"webgl",kernelFunc:BS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:WN})};class yE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=ZI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class bE{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=ZI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=pS("rc",s),l=pS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const xE={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bE(s.shape,r,a):new yE(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},kE={kernelName:"Mod",backendName:"webgl",kernelFunc:BS({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};class vE{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const wE=BS({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),IE={kernelName:"RealDiv",backendName:"webgl",kernelFunc:wE},NE="return a - b;",SE=BS({opSnippet:NE,packedOpSnippet:NE,supportsComplex:!0,cpuKernelImpl:iS}),TE={kernelName:"Sub",backendName:"webgl",kernelFunc:SE};function $E(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=w([a],r.shape),o=rE({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Gr(o.shape,i),u=XS({inputs:{x:o},backend:n,attrs:{shape:l}}),c=SE({inputs:{a:r,b:u},backend:n}),h=hC({inputs:{x:c},backend:n}),p=sT({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=XS({inputs:{x:p},backend:n,attrs:{shape:l}}),f=wE({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const CE={kernelName:"Softmax",backendName:"webgl",kernelFunc:$E};const EE={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:$E({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new vE(u,c,a),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}};const AE={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=UN(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new vS(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new xS(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(r,[s],s.dtype)}},RE=Fo;const _E={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){Z("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=RE(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},FE=Do;const DE={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){Z("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=FE(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},OE=Oo;const ME={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){Z("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=OE(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class LE{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const zE={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=m(r.shape),u=new LE(l,a,i,o),c=XS({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=XS({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function PE(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=e$({inputs:{input:s},backend:n}),t=PE({inputs:{x:e},backend:n}),r=f$({inputs:{input:s},backend:n}),a=PE({inputs:{x:r},backend:n}),i=RS({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return vC({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const BE={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:PE};const WE={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=e$({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=f$({inputs:{input:r},backend:s}),i=PE({inputs:{x:a},backend:s}),o=RS({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return vC({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const VE={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return dC({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{p(a,e.shape,"All tensors passed to stack must have matching shapes"),h(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=y$({inputs:t.map((e=>{const t=dC({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class UE{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=ZI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class GE{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=ZI(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=pS("rc",s),l=pS("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let f=0,m=1===s?2:4;f<m;f++)d+=`\n        ${h[f]}\n        if (${p}) {\n          result[${f}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${f}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const HE=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===m(r.shape)){return vC({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const o=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new GE(r.shape,a,i):new UE(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},jE={kernelName:"PadV2",backendName:"webgl",kernelFunc:HE},qE={kernelName:"Pow",backendName:"webgl",kernelFunc:BS({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};const KE={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=w(a,r.shape);let c=u;const h=jr(c,o);let p,d=r;if(null!=h&&(d=aT({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Kr(c.length,o),l.push(d)),Hr("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=HN(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Ur(d.shape,c),s=m(t),a=XS({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=QS(a,vt(r.dtype),"prod",n);p=XS({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Gr(p.shape,u);p=XS({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},XE=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=jN(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},YE={kernelName:"Range",backendName:"webgl",kernelFunc:XE},ZE={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:PS({opSnippet:"return 1.0 / x;"})},JE={kernelName:"Relu",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},QE={kernelName:"Relu6",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class eA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class tA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const nA={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new tA(r.shape,l,u,a,i):new eA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class sA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const rA={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new sA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class aA{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class iA{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const oA={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new iA(r.shape,l,u,a,i):new aA(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class lA{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const uA={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new lA(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class cA{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=ZI(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class hA{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=pS("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=ZI(n);var o;function l(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const pA={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=w(a,r.shape);if(0===i)return ES({inputs:{x:r},backend:n});const l=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hA(r.shape,o):new cA(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class dA{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const fA={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new dA(s.shape,a),[u,c]=Cl(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},mA={kernelName:"Round",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},gA={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:PS({opSnippet:"return inversesqrt(x);",cpuKernelImpl:qN})};class yA{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=ZI(r.length),l=ZI(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const bA={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=es(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=XS({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=XS({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new yA(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=XS({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class xA{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===j().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const kA={kernelName:"SearchSorted",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new xA(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class vA{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=ZI(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const wA={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new vA(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],kt(r.dtype,a.dtype))}},IA={kernelName:"Selu",backendName:"webgl",kernelFunc:PS({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Dl};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`})},NA={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:XN})},SA={kernelName:"Sign",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},TA={kernelName:"Sin",backendName:"webgl",kernelFunc:PS({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},$A={kernelName:"Sinh",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},CA={kernelName:"Softplus",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},EA={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;h(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let h=1+a.length;h<r.shape.length;++h)l.push([0,0]);const u=[],c=HE({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),p=El(c.shape,a,o,!1),d=Al(p.length,a.length,!1),f=Rl(c.shape,a,o,!1),m=XS({inputs:{x:c},backend:n,attrs:{shape:p}}),g=aT({inputs:{x:m},backend:n,attrs:{perm:d}}),y=XS({inputs:{x:g},backend:n,attrs:{shape:f}});return u.push(c),u.push(m),u.push(g),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const AA={kernelName:"SparseFillEmptyRows",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=JN(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const RA={kernelName:"SparseReshape",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=QN(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const _A={kernelName:"SparseSegmentMean",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=eS(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const FA={kernelName:"SparseSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=eS(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const DA={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=es(0,r,o);if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=Ke(n.readSync(i.dataId)[0]),d=KN(e,t,o,p,c,u,l,h,s,false);return n.makeTensorInfo(o,d.dtype,d.values)}const d=new yA(u,l,r.shape.length,a.shape.length,h,[p,1],false),f=n.runWebGLProgram(d,[a,r,i],a.dtype),m=XS({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}};const OA={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=w(i,r.shape)[0],l=Yl(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=qT({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},MA="return sqrt(x);",LA={kernelName:"Sqrt",backendName:"webgl",kernelFunc:PS({opSnippet:MA,packedOpSnippet:MA,cpuKernelImpl:tS})},zA={kernelName:"Square",backendName:"webgl",kernelFunc:PS({opSnippet:"return x * x;"})},PA={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:BS({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const BA={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new xS(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class WA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=ZI(n.length),a=ZI(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const VA={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:d}=s,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:k,strides:v}=fs(r.shape,a,i,o,l,u,c,p,d);let w;if(g)w=XS({inputs:{x:r},backend:n,attrs:{shape:m}});else if(y||b){h(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=ns(x,k,v),t=qT({inputs:{x:r},backend:n,attrs:{begin:x,size:e}});w=XS({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=In(r.shape,r.dtype,e),s=nS(f,t,v,x);w=n.makeTensorInfo(m,r.dtype,s.values)}else{const e=new WA(x,v,f);w=n.runWebGLProgram(e,[r],r.dtype)}}const I=XS({inputs:{x:w},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(w),I}};const UA={kernelName:"StringNGrams",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=sS(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const GA={kernelName:"StringSplit",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=rS(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const HA={kernelName:"StringToHashBucketFast",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=aS(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},jA={kernelName:"Tan",backendName:"webgl",kernelFunc:PS({opSnippet:"return tan(x);"})},qA={kernelName:"Tanh",backendName:"webgl",kernelFunc:PS({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class KA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const s=ZI(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<e.length;r++)s.push(`imod(${n[r]}, ${e[r]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function XA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Ke(e))):e,s=In(r.shape,r.dtype,t),i=oS(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new KA(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const YA={kernelName:"Tile",backendName:"webgl",kernelFunc:XA};class ZA{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class JA{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function QA(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function eR(e){let t=1;for(;t<e;)t*=2;return t}const tR={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=j().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=j().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=lS(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,vC({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=m(u)/c,g=XS({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&QA(n,d);const y=eR(a),b=eR(c);let x=null;const k=()=>null===x?[g,g]:[g,x],v=(e,t,s)=>{const r=k(),a=new ZA(s),i=[[c],[null===x?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=x;x=n.runWebGLProgram(a,r,"int32",i),QA(n,o)};for(let m=1;m<y;m*=2){const e=2*m;for(let t=m;t>=1;t/=2)v(e,t,[f,b])}for(let m=b;m>y;m/=2){const e=k(),t=new JA([f,m/2]),s=[[c],[null===x?1:0],[y]],r=x;x=n.runWebGLProgram(t,e,"int32",s),QA(n,r);const a=y/2,i=2*a;for(let n=a;n>=1;n/=2)v(i,n,x.shape)}let w=x;x=qT({inputs:{x:x},backend:n,attrs:{begin:0,size:[f,a]}}),QA(n,w);let I=LC({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});QA(n,g);const N=u.slice(0,-1);N.push(a),w=x,x=XS({inputs:{x:x},attrs:{shape:N},backend:n}),QA(n,w);const S=I;return I=XS({inputs:{x:I},attrs:{shape:N},backend:n}),QA(n,S),[I,x]}};class nR{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const sR={kernelName:"Transform",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new nR(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const rR={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;_I(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=cS(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const aR={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let m=0;m<o;m++)m!==a&&(u[c++]=i.shape[m]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let m=0;m<f.length;m++){p[a]=m;const e=qT({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),t=XS({inputs:{x:e},backend:n,attrs:{shape:u}});f[m]=t,h.push(e)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class iR{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const oR=[lT,cT,hT,pT,fT,yT,bT,xT,ST,TT,$T,CT,ET,AT,RT,DT,OT,zT,PT,BT,UT,XT,YT,ZT,n$,r$,o$,_S,c$,b$,N$,E$,A$,R$,_$,F$,D$,O$,L$,G$,H$,j$,K$,Z$,eC,tC,sC,aC,iC,oC,lC,uC,cC,pC,fC,gC,xC,wC,NC,TC,$C,AC,_C,FC,OC,zC,PC,BC,AS,WC,m$,VC,UC,GC,OS,HC,jC,qC,KC,XC,YC,ZC,JC,tE,sE,aE,iE,oE,lE,hE,pE,dE,fE,mE,gE,xE,kE,EE,KS,AE,_E,DE,ME,QT,zE,WE,VE,jE,qE,zS,KE,YE,t$,IE,ZE,JE,QE,YS,nA,rA,oA,uA,pA,fA,mA,gA,bA,kA,wA,IA,NA,SA,TA,$A,KT,CE,CA,EA,AA,RA,_A,FA,DA,OA,LA,zA,PA,BA,VA,UA,GA,HA,TE,rT,jA,qA,YA,tR,sR,iT,rR,aR,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=jr([u],o);let h=r;null!=c&&(h=aT({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Kr(1,o)[0]);const p=cu(h.shape,u,i),d=m([h.shape[u]]),f=XS({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const g=vt(r.dtype),y=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=uu(o,a),c=new iR({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=XE({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=XA({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return y(h,t,d,r,a)},b=XS({inputs:{x:y(f,"unsortedSegmentSum",a,g,i)},backend:n,attrs:{shape:p}});let x=b;if(null!=c){l.push(b);const e=qr(c);x=aT({inputs:{x:x},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},BE];for(const pR of oR)se(pR);let lR=null;const uR={model:lR,init:e=>t(this,null,(function*(){lR||(lR=yield function(e){return t(this,arguments,(function*(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=xy(e));const n=new by(e,t);return yield n.load(),n}))}(e))})),detect:(e,...s)=>t(this,[e,...s],(function*(e,t={numResults:20,threshold:.5}){if(!lR)return[];let s=Yn(e);const r=ia(s);s.dispose();const a=r.shape[1],i=r.shape[2];if(!i||!a)return console.error("detect - imageWidth or imageHeight is undefined"),[];const o=yield lR.executeAsync(r,["Identity_1:0","Identity_2:0","Identity_4:0","Identity_5:0"]);r.dispose();const l=yield o[0].data(),u=yield o[1].data(),c=yield o[2].data();let h=(yield o[3].data())[0];Pn(o);const p=[];t.numResults<h&&(h=t.numResults);for(let d=0;d<h&&!(c[d]<t.threshold);d++){const[e,t,s,r]=l.slice(4*d,4*(d+1)),o={x:t*i,y:e*a,width:(r-t)*i,height:(s-e)*a},h=n[Math.round(u[d]-1)];p.push({bndBox:o,class:h,confidence:c[d]})}return p}))};export{uR as default};
